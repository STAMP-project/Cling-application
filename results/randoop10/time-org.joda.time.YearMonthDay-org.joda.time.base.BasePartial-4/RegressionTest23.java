import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime11 = dateTime7.withFieldAdded(durationFieldType9, 5);
        org.joda.time.TimeOfDay timeOfDay12 = dateTime7.toTimeOfDay();
        int int13 = timeOfDay12.getMinuteOfHour();
        int int14 = timeOfDay12.size();
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTimeToday();
        org.joda.time.DateTime dateTime16 = timeOfDay12.toDateTimeToday();
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTimeToday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours(25793899);
        int int3 = timeOfDay0.getMillisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.DateTime dateTime20 = dateMidnight19.toDateTime();
        boolean boolean21 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((long) 3);
        mutableDateTime26.setDayOfMonth((int) (byte) 10);
        org.joda.time.Period period30 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        java.lang.String str32 = durationFieldType31.toString();
        org.joda.time.Period period34 = period30.withField(durationFieldType31, 2);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        java.lang.String str36 = durationFieldType35.toString();
        boolean boolean37 = period30.isSupported(durationFieldType35);
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period30, 21);
        mutableDateTime26.addMillis((-292275054));
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime26.centuryOfEra();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime26.minuteOfHour();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime26.minuteOfHour();
        int int45 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        int int49 = dateMidnight48.getEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateMidnight48.toDateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusDays(9);
        int int54 = dateTime51.getEra();
        org.joda.time.DateTime dateTime55 = dateTime51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        java.lang.String str57 = dateTimeZone56.toString();
        long long60 = dateTimeZone56.convertLocalToUTC((long) (short) 1, false);
        mutableDateTime26.setZone(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = dateTime11.withZoneRetainFields(dateTimeZone56);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology67);
        org.joda.time.Interval interval69 = yearMonthDay68.toInterval();
        org.joda.time.DateTime dateTime70 = yearMonthDay68.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property72 = dateTime70.property(dateTimeFieldType71);
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int74 = property72.getMaximumTextLength(locale73);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(locale73);
        java.lang.String str76 = locale73.getScript();
        java.lang.String str77 = dateTimeZone56.getShortName((long) 85500000, locale73);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hours" + "'", str32, "hours");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hours" + "'", str36, "hours");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 49 + "'", int45 == 49);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1645514329388,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=49,MILLISECOND=388,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType2);
        mutablePeriod4.addYears(0);
        int int7 = mutablePeriod4.getYears();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int43 = mutablePeriod41.getMinutes();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType46);
        long long53 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology30.withZone(dateTimeZone54);
        org.joda.time.DurationField durationField56 = chronology55.years();
        org.joda.time.DurationField durationField57 = chronology55.millis();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.clockhourOfDay();
        mutablePeriod4.add((long) 81, chronology55);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateTimeField dateTimeField61 = chronology55.dayOfMonth();
        org.joda.time.DurationField durationField62 = chronology55.weeks();
        org.joda.time.DateTimeField dateTimeField63 = chronology55.clockhourOfHalfday();
        org.joda.time.DurationField durationField64 = chronology55.weeks();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 25755235L + "'", long53 == 25755235L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear(1);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("years");
        boolean boolean23 = locale22.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = dateTimeFormatter24.parseLocalDate("und-EN");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "years");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay10 = property8.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = property8.setCopy("May 11, 2022 7:09:40 AM");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"May 11, 2022 7:09:40 AM\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        java.util.Locale locale2 = new java.util.Locale("+00:00", "2022-5-11 7:11:16");
        java.lang.String str3 = locale2.toLanguageTag();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(7);
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime21 = property20.getDateTime();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale23 = locale22.stripExtensions();
        int int24 = property20.getMaximumShortTextLength(locale22);
        java.lang.String str27 = nameProvider11.getName(locale22, "", "ISOChronology[UTC]");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter8.withLocale(locale22);
        java.lang.String str29 = locale22.getVariant();
        java.lang.String str30 = locale22.getDisplayName();
        java.util.Locale locale33 = new java.util.Locale("2022-02-15T07:09:31.491", "en");
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = locale22.getDisplayName(locale33);
        java.lang.String str36 = locale2.getDisplayCountry(locale22);
        org.junit.Assert.assertEquals(locale2.toString(), "+00:00_2022-5-11 7:11:16");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertEquals(locale33.toString(), "2022-02-15t07:09:31.491_EN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-15t07:09:31.491 (EN)" + "'", str34, "2022-02-15t07:09:31.491 (EN)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-5-11 7:11:16" + "'", str36, "2022-5-11 7:11:16");
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-22T07:13:31.098Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:13:31.098Z\" is malformed at \"22-02-22T07:13:31.098Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay4.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        int int42 = mutablePeriod40.getMinutes();
        org.joda.time.Period period44 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        java.lang.String str46 = durationFieldType45.toString();
        org.joda.time.Period period48 = period44.withField(durationFieldType45, 2);
        boolean boolean49 = mutablePeriod40.isSupported(durationFieldType45);
        long long52 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod40, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology29.withZone(dateTimeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight7, chronology54);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight7.minusDays(2159890);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours" + "'", str46, "hours");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 25755235L + "'", long52 == 25755235L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateMidnight58);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.Period period2 = period1.negated();
        org.joda.time.Period period4 = period2.plusHours(0);
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.Period period10 = period6.withField(durationFieldType7, 2);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.Period period13 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.Period period17 = period13.withField(durationFieldType14, 2);
        int int18 = period13.size();
        org.joda.time.MutablePeriod mutablePeriod19 = period13.toMutablePeriod();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(periodType20);
        org.joda.time.Period period22 = period13.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Period period24 = period22.minusMillis(3);
        org.joda.time.Period period25 = period10.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period27 = period10.minusSeconds(25804551);
        org.joda.time.Period period28 = period4.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period30 = period10.withWeeks(2000);
        org.joda.time.Period period32 = period10.plusWeeks(25893543);
        org.joda.time.PeriodType periodType33 = period32.getPeriodType();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hours" + "'", str15, "hours");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        org.joda.time.Duration duration52 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDate localDate54 = dateMidnight53.toLocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfYear();
        org.joda.time.LocalDate localDate56 = property55.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate58 = localDate56.withWeekyear(11);
        long long60 = chronology23.set((org.joda.time.ReadablePartial) localDate56, (-604800001L));
        int int61 = localDate56.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDate.Property property63 = localDate56.property(dateTimeFieldType62);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        int int68 = dateMidnight67.getEra();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateMidnight67.toDateTime(chronology69);
        org.joda.time.DateTime dateTime72 = dateTime70.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight73 = dateTime72.toDateMidnight();
        org.joda.time.DateMidnight.Property property74 = dateMidnight73.era();
        int int75 = dateMidnight73.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone77);
        int int79 = dateMidnight78.getEra();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = dateMidnight78.toDateTime(chronology80);
        org.joda.time.DateTime dateTime83 = dateTime81.minusWeeks(0);
        org.joda.time.DateTime dateTime84 = dateTime83.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime87 = dateTime83.withFieldAdded(durationFieldType85, 5);
        int int88 = dateMidnight73.compareTo((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = dateTime87.toDateTime();
        int int90 = dateTime89.getDayOfMonth();
        org.joda.time.DateTime dateTime92 = dateTime89.minus((long) (short) 0);
        java.util.GregorianCalendar gregorianCalendar93 = dateTime92.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone94 = dateTime92.getZone();
        org.joda.time.MutableDateTime mutableDateTime95 = new org.joda.time.MutableDateTime(0L, dateTimeZone94);
        org.joda.time.Interval interval96 = localDate56.toInterval(dateTimeZone94);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 86399999L + "'", long60 == 86399999L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 19 + "'", int61 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(gregorianCalendar93);
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertNotNull(interval96);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = localDate28.toInterval(dateTimeZone29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology34);
        org.joda.time.Interval interval36 = yearMonthDay35.toInterval();
        org.joda.time.Interval interval38 = interval36.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfDay();
        boolean boolean41 = localDate28.equals((java.lang.Object) property40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property40.getFieldType();
        org.joda.time.DateTime.Property property43 = dateTime7.property(dateTimeFieldType42);
        org.joda.time.DateTime.Property property44 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = property44.addToCopy(455308);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = property44.setCopy("1972-10-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1972-10-01T00:00:00.000Z\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        java.lang.String str27 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfDay();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(0L, (long) 1, chronology26);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(10L);
        long long33 = chronology26.set((org.joda.time.ReadablePartial) yearMonthDay31, (long) 8);
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfYear();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 122, 25839000L, chronology26);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(1645514268984L, chronology26);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 8L + "'", long33 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.getDisplayName();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = locale6.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CN" + "'", str8, "CN");
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(56);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((long) 25790263);
        int int14 = localTime13.getMinuteOfHour();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy(25849993);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean19 = localTime17.isSupported(dateTimeFieldType18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay11.property(dateTimeFieldType18);
        int int21 = property20.getMaximumValueOverall();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 959, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        long long16 = interval14.getStartMillis();
        org.joda.time.Interval interval17 = interval7.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfDay();
        org.joda.time.Interval interval42 = interval7.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.era();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray55 = mutablePeriod54.getValues();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType61 = periodType60.withMillisRemoved();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 10, (long) '#', periodType61);
        org.joda.time.Period period63 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType61);
        mutablePeriod54.add((org.joda.time.ReadablePeriod) period63);
        int[] intArray66 = chronology39.get((org.joda.time.ReadablePeriod) mutablePeriod54, (long) 25787004);
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(436, 26328666, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 436 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61038316800000L) + "'", long16 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 7, 9, 47, 4]");
        org.junit.Assert.assertNotNull(localDate67);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableDuration) duration51, periodType53);
        boolean boolean55 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime dateTime57 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration51, 32769);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (-709));
        java.util.Locale.Category category61 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale64 = new java.util.Locale("", "ISOChronology[UTC]");
        java.util.Locale.setDefault(category61, locale64);
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale66.getISO3Language();
        java.lang.String str68 = locale66.getScript();
        java.util.Locale.setDefault(category61, locale66);
        java.util.Calendar calendar70 = dateTime60.toCalendar(locale66);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTime60.getZone();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.FORMAT + "'", category61.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale64.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ita" + "'", str67, "ita");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-61038313523100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35,MONTH=9,WEEK_OF_YEAR=41,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=285,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=54,SECOND=36,MILLISECOND=900,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone71);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        java.util.Locale locale17 = new java.util.Locale("hi!", "");
        java.lang.String str18 = property14.getAsText(locale17);
        int int19 = property11.getMaximumShortTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.US;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = new java.util.Locale("hi!", "");
        java.util.Locale locale27 = new java.util.Locale("hi!", "");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.year();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.year();
        java.util.Locale locale36 = new java.util.Locale("hi!", "");
        java.lang.String str37 = property33.getAsText(locale36);
        int int38 = property30.getMaximumShortTextLength(locale36);
        java.lang.String str39 = locale27.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.US;
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale17, locale20, locale21, locale24, locale27, locale40 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList42, filteringMode44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList54);
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet58);
        int int60 = strSet58.size();
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.io.IOException iOException65 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException67 = new java.io.IOException("PT0.100S");
        java.lang.Exception[] exceptionArray68 = new java.lang.Exception[] { iOException65, iOException67 };
        java.lang.Exception[] exceptionArray69 = strSet63.toArray(exceptionArray68);
        strSet63.clear();
        strSet63.clear();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet63);
        java.lang.Object[] objArray73 = strSet63.toArray();
        strSet63.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(exceptionArray68);
        org.junit.Assert.assertNotNull(exceptionArray69);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusYears(6);
        int int3 = yearMonthDay2.getMonthOfYear();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay2.year();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(976);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(0);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.add((long) 3);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        int int23 = dateMidnight22.getEra();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.Duration duration39 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        int int44 = dateMidnight43.getEra();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        org.joda.time.Duration duration60 = mutablePeriod49.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableDuration) duration60);
        boolean boolean62 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration60);
        java.lang.String str63 = duration60.toString();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime65 = dateTime10.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        java.lang.Object obj71 = mutablePeriod70.clone();
        org.joda.time.Chronology chronology74 = null;
        mutablePeriod70.setPeriod((long) 0, (long) 12, chronology74);
        org.joda.time.DateTime dateTime77 = dateTime65.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod70, 59);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Chronology chronology79 = dateTime77.getChronology();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0.100S");
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT0.100S" + "'", str63, "PT0.100S");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "PT0.012S");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((int) (short) 0);
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.Period period10 = period6.withField(durationFieldType7, 2);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        int int45 = mutablePeriod43.getMinutes();
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        boolean boolean52 = mutablePeriod43.isSupported(durationFieldType48);
        long long55 = chronology32.add((org.joda.time.ReadablePeriod) mutablePeriod43, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology32.withZone(dateTimeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.DurationField durationField59 = chronology57.halfdays();
        org.joda.time.DurationField durationField60 = durationFieldType7.getField(chronology57);
        mutableDateTime4.setChronology(chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.dayOfYear();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone71);
        int int73 = dateMidnight72.getEra();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = dateMidnight72.toDateTime(chronology74);
        org.joda.time.DateTime dateTime77 = dateTime75.plusDays(9);
        int int78 = dateTime75.getEra();
        org.joda.time.DateTime dateTime79 = dateTime75.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime79.getZone();
        java.lang.String str81 = dateTimeZone80.toString();
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone80);
        java.lang.String str84 = dateTimeZone80.toString();
        org.joda.time.Chronology chronology85 = chronology57.withZone(dateTimeZone80);
        org.joda.time.DurationField durationField86 = chronology85.weeks();
        org.joda.time.DurationField durationField87 = chronology85.weekyears();
        int int89 = durationField87.getValue(1050665248800000L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 25755235L + "'", long55 == 25755235L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "UTC" + "'", str84, "UTC");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 33294 + "'", int89 == 33294);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Locale.Builder builder55 = builder0.setLocale(locale53);
        java.util.Locale.Builder builder56 = builder0.clear();
        java.util.Locale.Builder builder58 = builder56.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder58.addUnicodeLocaleAttribute("millisOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: millisOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime5.withZoneRetainFields(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusHours(25778198);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay23);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(9, 0, 25755035, (int) (byte) 1, 3, 7, (int) (short) 0, 21);
        java.lang.String str9 = mutablePeriod8.toString();
        org.joda.time.ReadableInterval readableInterval10 = null;
        mutablePeriod8.setPeriod(readableInterval10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology22);
        org.joda.time.Interval interval24 = yearMonthDay23.toInterval();
        org.joda.time.Period period25 = interval24.toPeriod();
        long long26 = interval24.getStartMillis();
        org.joda.time.Interval interval27 = interval17.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology31);
        org.joda.time.Interval interval33 = yearMonthDay32.toInterval();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Interval interval35 = interval33.withPeriodBeforeEnd(readablePeriod34);
        boolean boolean36 = interval17.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Interval interval37 = interval17.toInterval();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval40 = yearMonthDay39.toInterval();
        boolean boolean41 = interval17.equals((java.lang.Object) yearMonthDay39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology45);
        org.joda.time.Interval interval47 = yearMonthDay46.toInterval();
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology52);
        org.joda.time.Interval interval54 = yearMonthDay53.toInterval();
        org.joda.time.Period period55 = interval54.toPeriod();
        long long56 = interval54.getStartMillis();
        org.joda.time.Interval interval57 = interval47.overlap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology61);
        org.joda.time.Interval interval63 = yearMonthDay62.toInterval();
        org.joda.time.Interval interval65 = interval63.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime66 = interval65.getEnd();
        boolean boolean67 = interval54.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutableInterval mutableInterval68 = interval65.toMutableInterval();
        org.joda.time.Interval interval69 = interval17.overlap((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutableInterval mutableInterval70 = interval69.toMutableInterval();
        org.joda.time.Duration duration71 = mutableInterval70.toDuration();
        mutablePeriod8.add((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology76);
        org.joda.time.Interval interval78 = yearMonthDay77.toInterval();
        org.joda.time.DateTime dateTime79 = yearMonthDay77.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property81 = dateTime79.property(dateTimeFieldType80);
        java.util.Locale locale82 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int83 = property81.getMaximumTextLength(locale82);
        org.joda.time.DateTime dateTime84 = property81.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate85 = dateTime84.toLocalDate();
        org.joda.time.DateTime dateTime87 = dateTime84.minusMonths(32);
        org.joda.time.DateTime dateTime89 = dateTime87.withMillisOfSecond(19);
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime92 = dateTime89.withFieldAdded(durationFieldType90, 25762216);
        mutablePeriod8.set(durationFieldType90, 25855302);
        mutablePeriod8.addMinutes(361);
        mutablePeriod8.addMonths(17);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P9Y25755035W1DT3H7M0.021S" + "'", str9, "P9Y25755035W1DT3H7M0.021S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61038316800000L) + "'", long26 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-61038316800000L) + "'", long56 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("PeriodType[YearMonthDay]");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("halfdays");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone5);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        long long29 = dateTimeZone26.adjustOffset((long) 5, true);
        boolean boolean31 = dateTimeZone26.isStandardOffset((long) 3);
        mutableDateTime4.setZoneRetainFields(dateTimeZone26);
        java.util.TimeZone timeZone33 = dateTimeZone26.toTimeZone();
        timeZone33.setRawOffset(2023);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = timeZone33.getOffset(26092, 830, 25909981, 26043334, 993, 361);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 26092");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5L + "'", long29 == 5L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514329993,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=2023,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=52,MILLISECOND=16,ZONE_OFFSET=2023,DST_OFFSET=0]");
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.minusYears(245);
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        org.joda.time.DateMidnight dateMidnight10 = property9.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        org.joda.time.DateMidnight dateMidnight13 = property9.addWrapFieldToCopy(28);
        org.joda.time.DateMidnight dateMidnight14 = property9.getDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.weekOfWeekyear();
        long long16 = property15.remainder();
        org.joda.time.DateMidnight dateMidnight17 = property15.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 259200000L + "'", long16 == 259200000L);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        boolean boolean9 = dateMidnight8.isBeforeNow();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plusMonths(42);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Language();
        java.util.Calendar calendar15 = dateMidnight8.toCalendar(locale13);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        java.lang.Object obj23 = mutablePeriod22.clone();
        java.lang.String str24 = mutablePeriod22.toString();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod22, 2022);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime17.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateMidnight30.toDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays(9);
        int int36 = dateTime33.getEra();
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        long long41 = dateTimeZone38.adjustOffset((long) 5, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.util.TimeZone timeZone43 = dateTimeZone38.toTimeZone();
        boolean boolean44 = timeZone43.observesDaylightTime();
        calendar15.setTimeZone(timeZone43);
        boolean boolean46 = timeZone43.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone43);
        int int49 = timeZone43.getOffset(0L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-61038316800000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=35,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=285,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.100S" + "'", str24, "PT0.100S");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5L + "'", long41 == 5L);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.monthOfYear();
        org.joda.time.DateMidnight dateMidnight34 = property32.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property32.getFieldType();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime27.property(dateTimeFieldType35);
        boolean boolean37 = dateMidnight4.isSupported(dateTimeFieldType35);
        java.lang.String str38 = dateTimeFieldType35.getName();
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay1.property(dateTimeFieldType35);
        int int40 = yearMonthDay1.getYear();
        int int41 = yearMonthDay1.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology45);
        org.joda.time.Interval interval47 = yearMonthDay46.toInterval();
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property50 = dateTime48.property(dateTimeFieldType49);
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateMidnight54.toDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(9);
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTime dateTime64 = dateTime48.toDateTime(dateTimeZone62);
        int int66 = dateTimeZone62.getStandardOffset((-1L));
        int int68 = dateTimeZone62.getStandardOffset((long) 25762033);
        org.joda.time.Interval interval69 = yearMonthDay1.toInterval(dateTimeZone62);
        java.lang.String str71 = dateTimeZone62.getShortName((long) 2159890);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "monthOfYear" + "'", str38, "monthOfYear");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        int int7 = dateMidnight6.getEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = dateMidnight6.toDateTime(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(0);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime15 = dateTime11.withFieldAdded(durationFieldType13, 5);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((long) 35);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks(0);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.year();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime33.toDateTime(readableInstant35);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, readableInstant35, periodType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.year();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.halfdayOfDay();
        org.joda.time.Period period48 = new org.joda.time.Period(1645513814998L, (-61038230400000L), periodType37, chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(255139200000L, (-3L), periodType37, chronology49);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        org.joda.time.Period period4 = new org.joda.time.Period(6, 10470, 237, 23);
        org.joda.time.Period period6 = period4.withSeconds(25924452);
        java.util.Date date8 = new java.util.Date((long) 0);
        int int9 = date8.getDay();
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date8);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight14.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateMidnight31.toLocalDate();
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        int int46 = mutablePeriod44.getMinutes();
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        boolean boolean53 = mutablePeriod44.isSupported(durationFieldType49);
        long long56 = chronology33.add((org.joda.time.ReadablePeriod) mutablePeriod44, (long) 25755035, 2);
        boolean boolean57 = durationFieldType11.isSupported(chronology33);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay10.withChronologyRetainFields(chronology33);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property61 = yearMonthDay58.year();
        org.joda.time.YearMonthDay yearMonthDay62 = property61.getYearMonthDay();
        org.joda.time.DateTime dateTime63 = yearMonthDay62.toDateTimeAtCurrentTime();
        org.joda.time.Duration duration64 = period6.toDurationFrom((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 25755235L + "'", long56 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration64);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean11 = dateMidnight8.isSupported(dateTimeFieldType10);
        java.lang.String str12 = dateMidnight8.toString();
        org.joda.time.DateMidnight.Property property13 = dateMidnight8.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = dateMidnight8.withDayOfYear((-1641746940));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1641746940 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0035-10-10T00:00:00.000Z" + "'", str12, "0035-10-10T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType17 = periodType16.withMillisRemoved();
        org.joda.time.Period period18 = interval15.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = interval15.getEnd();
        int int20 = dateTime19.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight21 = dateTime19.toDateMidnight();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = localTime15.toDateTimeToday();
        org.joda.time.LocalTime.Property property17 = localTime15.secondOfMinute();
        org.joda.time.LocalTime.Property property18 = localTime15.hourOfDay();
        java.lang.String str19 = localTime15.toString();
        org.joda.time.LocalTime localTime21 = localTime15.plusMinutes(86399999);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "00:00:00.000" + "'", str19, "00:00:00.000");
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.withMinimumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.Interval interval16 = yearMonthDay15.toInterval();
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property19.getFieldType();
        boolean boolean22 = localDate10.isSupported(dateTimeFieldType21);
        java.lang.String str23 = dateTimeFieldType21.getName();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "secondOfDay" + "'", str23, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType24);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        mutablePeriod26.addMillis(0);
        mutablePeriod26.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        org.joda.time.Duration duration60 = mutablePeriod49.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight44.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(0L, 100L, periodType66, chronology67);
        java.lang.Object obj69 = mutablePeriod68.clone();
        java.lang.String str70 = mutablePeriod68.toString();
        mutableDateTime63.add((org.joda.time.ReadablePeriod) mutablePeriod68, 2022);
        mutablePeriod26.setPeriod((org.joda.time.ReadableInstant) dateMidnight61, (org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime74.millisOfDay();
        org.joda.time.DateTime dateTime76 = localDate21.toDateTime((org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone78);
        int int80 = dateMidnight79.getEra();
        org.joda.time.Chronology chronology81 = dateMidnight79.getChronology();
        mutableDateTime74.setChronology(chronology81);
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((long) (-17412996), chronology81);
        org.joda.time.DateTimeField dateTimeField84 = chronology81.weekyear();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0.100S");
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT0.100S" + "'", str70, "PT0.100S");
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Locale.Builder builder55 = builder0.setLocale(locale53);
        java.util.Locale.Builder builder56 = builder0.clear();
        java.util.Locale.Builder builder57 = builder0.clear();
        java.util.Locale.Builder builder59 = builder57.addUnicodeLocaleAttribute("January");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder59.setUnicodeLocaleKeyword("2022-5-11 7:18:03", "+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-5-11 7:18:03 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusMillis(0);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay16 = property14.addToCopy(315);
        org.joda.time.TimeOfDay timeOfDay18 = property14.addToCopy((-1706));
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-15T07:16:29.933");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(2005, 25762147, (-730), 1982, 26047387, 342, 324, 25804968);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.LocalDate localDate33 = dateMidnight32.toLocalDate();
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        java.lang.String str35 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfDay();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(0L, (long) 1, chronology34);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(10L);
        long long41 = chronology34.set((org.joda.time.ReadablePartial) yearMonthDay39, (long) 8);
        org.joda.time.DateTimeField dateTimeField42 = chronology34.secondOfDay();
        org.joda.time.DurationField durationField43 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology34.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        org.joda.time.Duration duration63 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight47.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDate localDate65 = dateMidnight64.toLocalDate();
        org.joda.time.LocalDate.Property property66 = localDate65.dayOfYear();
        org.joda.time.LocalDate localDate67 = property66.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate69 = localDate67.withWeekyear(11);
        long long71 = chronology34.set((org.joda.time.ReadablePartial) localDate67, (-604800001L));
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(0L, dateTimeZone73);
        org.joda.time.LocalDate localDate75 = dateMidnight74.toLocalDate();
        int int76 = localDate75.getDayOfYear();
        org.joda.time.LocalDate localDate78 = localDate75.minusDays(169);
        java.lang.String str79 = localDate78.toString();
        long long81 = chronology34.set((org.joda.time.ReadablePartial) localDate78, (-1L));
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(0L, chronology34);
        mutablePeriod8.add((-3628799879L), chronology34);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 8L + "'", long41 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.100S");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 86399999L + "'", long71 == 86399999L);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1969-07-16" + "'", str79, "1969-07-16");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-14515200001L) + "'", long81 == (-14515200001L));
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks(0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime12 = dateTime10.toLocalTime();
        org.joda.time.LocalTime localTime14 = localTime12.minusMinutes(3);
        org.joda.time.LocalTime.Property property15 = localTime12.minuteOfHour();
        org.joda.time.LocalTime.Property property16 = localTime12.millisOfDay();
        int[] intArray17 = localTime12.getValues();
        org.joda.time.LocalTime localTime19 = localTime12.withHourOfDay(22);
        org.joda.time.LocalTime localTime21 = localTime12.minusHours(25768718);
        org.joda.time.Chronology chronology22 = localTime12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(86403, (-59), 26306, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -59 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        java.lang.String str41 = interval5.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology45);
        org.joda.time.DateMidnight dateMidnight47 = yearMonthDay46.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay46.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = property52.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime55 = property52.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.monthOfYear();
        org.joda.time.DateMidnight dateMidnight62 = property60.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property60.getFieldType();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime55.property(dateTimeFieldType63);
        java.lang.String str65 = mutableDateTime55.toString();
        org.joda.time.DateTime dateTime66 = yearMonthDay49.toDateTime((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Interval interval67 = yearMonthDay49.toInterval();
        org.joda.time.Interval interval68 = yearMonthDay49.toInterval();
        org.joda.time.Period period69 = interval68.toPeriod();
        boolean boolean70 = interval5.contains((org.joda.time.ReadableInterval) interval68);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str41, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str65, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(25762033, 21, 32769);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int15 = property13.getMaximumTextLength(locale14);
        java.util.Calendar.Builder builder16 = builder0.setLocale(locale14);
        java.util.Calendar calendar17 = builder16.build();
        calendar17.set(169, 70, (int) (short) -1, 70, 20);
        java.lang.String str24 = calendar17.getCalendarType();
        calendar17.setMinimalDaysInFirstWeek((int) (byte) 0);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromCalendarFields(calendar17);
        org.joda.time.DateMidnight dateMidnight28 = localDate27.toDateMidnight();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-56649980400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=174,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=305,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=20,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gregory" + "'", str24, "gregory");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType33);
        boolean boolean35 = dateMidnight2.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight2.minusWeeks(16);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.millisOfDay();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.secondOfDay();
        java.lang.String str42 = property41.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.roundHalfEven();
        int int44 = dateMidnight2.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        org.joda.time.Duration duration63 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight47.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDate localDate65 = dateMidnight64.toLocalDate();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.minusMonths(3);
        int int68 = mutableDateTime43.compareTo((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.plus((long) (-5087));
        org.joda.time.YearMonthDay yearMonthDay71 = dateMidnight70.toYearMonthDay();
        org.joda.time.Interval interval72 = dateMidnight70.toInterval();
        org.joda.time.Interval interval74 = interval72.withEndMillis((long) 32770);
        boolean boolean76 = interval74.isBefore((long) 25778198);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.100S");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        org.joda.time.DateTime dateTime11 = dateTime6.withEarlierOffsetAtOverlap();
        int int12 = dateTime6.getMillisOfDay();
        org.joda.time.LocalDate localDate13 = dateTime6.toLocalDate();
        int int14 = localDate13.getYear();
        org.joda.time.LocalDate.Property property15 = localDate13.era();
        java.lang.String str16 = localDate13.toString();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0035-10-10" + "'", str16, "0035-10-10");
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        org.joda.time.Period period42 = period40.withMillis((int) '#');
        org.joda.time.LocalDate localDate43 = localDate34.minus((org.joda.time.ReadablePeriod) period42);
        int int44 = period42.getMonths();
        org.joda.time.Period period46 = period42.minusMinutes(8);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadablePeriod) period42);
        java.util.Date date48 = mutableDateTime4.toDate();
        mutableDateTime4.setTime((long) (-14));
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight53.withDayOfMonth((int) (byte) 1);
        boolean boolean58 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) dateMidnight53);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Mon Jan 09 00:00:00 UTC 2023");
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.Duration duration39 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        org.joda.time.Duration duration59 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight43.plus((org.joda.time.ReadableDuration) duration59);
        int int61 = dateMidnight40.compareTo((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableInstant62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight40.minusYears(22);
        int int66 = dateMidnight65.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight65.plusMonths(25852727);
        int int69 = property18.compareTo((org.joda.time.ReadableInstant) dateMidnight65);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(25918840);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 25773844);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.era();
        int int13 = localDateTime11.getYearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.isAfter(100L);
        org.joda.time.DateTime dateTime9 = interval5.getEnd();
        org.joda.time.Duration duration10 = interval5.toDuration();
        org.joda.time.Chronology chronology11 = interval5.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.centuries();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Period period24 = period22.withSeconds((int) '#');
        org.joda.time.Period period26 = period24.minusHours(6);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = period26.minusMillis(25827480);
        org.joda.time.Minutes minutes30 = period29.toStandardMinutes();
        int[] intArray32 = chronology11.get((org.joda.time.ReadablePeriod) minutes30, (long) 86399999);
        org.joda.time.DurationField durationField33 = chronology11.seconds();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1439]");
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.LocalDate localDate23 = property21.addToCopy(25762147);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.roundFloor();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology32);
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay33.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime28, (org.joda.time.ReadableInstant) dateMidnight34, periodType38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        int int43 = dateMidnight42.getEra();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = dateMidnight42.toDateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusDays(9);
        int int48 = dateTime45.getEra();
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        long long53 = dateTimeZone50.adjustOffset((long) 5, true);
        boolean boolean55 = dateTimeZone50.isStandardOffset((long) 3);
        mutableDateTime28.setZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime57 = localDate23.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime60 = dateTime58.plusDays((int) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime();
        int int62 = dateTime61.getWeekyear();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 5L + "'", long53 == 5L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        java.lang.String str23 = mutableDateTime13.toString();
        org.joda.time.DateTime dateTime24 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay7.minusMonths(25774925);
        org.joda.time.Chronology chronology27 = yearMonthDay26.getChronology();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.TimeOfDay timeOfDay28 = property8.withMinimumValue();
        java.util.Date date30 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.fromDateFields(date30);
        int int32 = timeOfDay31.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.secondOfMinute();
        java.util.Locale locale40 = new java.util.Locale("hi!", "");
        java.lang.String str41 = property37.getAsShortText(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = property8.getAsShortText(locale42);
        org.joda.time.DurationField durationField46 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay47 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay49 = property8.addWrapFieldToCopy((-1890));
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusMonths(0);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.plus((long) 6);
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight10.toYearMonthDay();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        java.lang.String str20 = mutablePeriod18.toString();
        mutableDateTime13.add((org.joda.time.ReadablePeriod) mutablePeriod18, 2022);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime13.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        int int27 = dateMidnight26.getEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateMidnight26.toDateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(9);
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        long long37 = dateTimeZone34.adjustOffset((long) 5, true);
        mutableDateTime13.setZoneRetainFields(dateTimeZone34);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        long long41 = dateTimeZone34.convertUTCToLocal(25755235L);
        java.lang.String str43 = dateTimeZone34.getShortName(31556952000L);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight10.withZoneRetainFields(dateTimeZone34);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = dateMidnight44.toCalendar(locale45);
        java.lang.String str47 = locale45.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0.100S" + "'", str20, "PT0.100S");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 25755235L + "'", long41 == 25755235L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=84153600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=245,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "China" + "'", str47, "China");
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusDays((int) ' ');
        java.util.Date date5 = localDateTime4.toDate();
        java.lang.String str6 = localDateTime4.toString();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime9 = property7.addWrapFieldToCopy(993);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property7.getFieldType();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField12 = property7.getField();
        org.joda.time.DurationField durationField13 = dateTimeField12.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = durationField13.getValue(1113208617600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 21 07:18:50 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-01-21T07:18:50.681" + "'", str6, "2022-01-21T07:18:50.681");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        int int9 = periodType8.size();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.halfdays();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology62);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, periodType8, chronology62);
        org.joda.time.DateTime dateTime67 = interval5.getStart();
        org.joda.time.DateTime dateTime68 = dateTime67.withEarlierOffsetAtOverlap();
        int int69 = dateTime68.getMinuteOfDay();
        org.joda.time.DateTime dateTime72 = dateTime68.withDurationAdded(8130791167L, 223);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25755235L + "'", long60 == 25755235L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(26005889);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        mutablePeriod11.addMillis(0);
        mutablePeriod11.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        java.lang.String str55 = mutablePeriod53.toString();
        mutableDateTime48.add((org.joda.time.ReadablePeriod) mutablePeriod53, 2022);
        mutablePeriod11.setPeriod((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime48.addWeekyears((int) (byte) 0);
        mutableDateTime48.setSecondOfMinute(8);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withChronology(chronology68);
        boolean boolean70 = mutableDateTime48.isAfter((org.joda.time.ReadableInstant) dateMidnight69);
        boolean boolean71 = dateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime48.addHours((int) (short) 10);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime48.millisOfDay();
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime48.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime77 = property75.add((-2208988800000L));
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime77.weekyear();
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime77.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT0.100S" + "'", str55, "PT0.100S");
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        java.lang.Object obj58 = mutablePeriod57.clone();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        org.joda.time.Duration duration68 = mutablePeriod57.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight52.plus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.LocalDate localDate70 = dateMidnight69.toLocalDate();
        org.joda.time.Period period72 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.hours();
        java.lang.String str74 = durationFieldType73.toString();
        org.joda.time.Period period76 = period72.withField(durationFieldType73, 2);
        org.joda.time.Period period78 = period76.withMillis((int) '#');
        org.joda.time.LocalDate localDate79 = localDate70.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period81 = period78.minusYears(21);
        org.joda.time.Period period83 = period81.plusWeeks(32772);
        long long86 = chronology46.add((org.joda.time.ReadablePeriod) period81, (long) (byte) 1, 70);
        org.joda.time.DurationField durationField87 = chronology46.halfdays();
        java.lang.String str88 = durationField87.toString();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "PT0.100S");
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hours" + "'", str74, "hours");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-46388174397549L) + "'", long86 == (-46388174397549L));
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DurationField[halfdays]" + "'", str88, "DurationField[halfdays]");
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        int int6 = calendar0.getGreatestMinimum(0);
        calendar0.setMinimalDaysInFirstWeek(8);
        java.time.Instant instant9 = calendar0.toInstant();
        java.time.Instant instant10 = calendar0.toInstant();
        calendar0.roll(8, false);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        java.lang.String str22 = mutablePeriod20.toString();
        mutableDateTime15.add((org.joda.time.ReadablePeriod) mutablePeriod20, 2022);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime15.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateMidnight28.toDateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusDays(9);
        int int34 = dateTime31.getEra();
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        long long39 = dateTimeZone36.adjustOffset((long) 5, true);
        mutableDateTime15.setZoneRetainFields(dateTimeZone36);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        java.util.TimeZone.setDefault(timeZone41);
        calendar0.setTimeZone(timeZone41);
        org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        java.util.TimeZone timeZone45 = calendar0.getTimeZone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61663394469225,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=8,ERA=1,YEAR=15,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=355,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=50,MILLISECOND=775,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.100S" + "'", str22, "PT0.100S");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5L + "'", long39 == 5L);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        mutableDateTime1.setMillisOfSecond((int) (byte) 10);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        mutablePeriod9.addMillis(0);
        mutablePeriod9.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        java.lang.Object obj52 = mutablePeriod51.clone();
        java.lang.String str53 = mutablePeriod51.toString();
        mutableDateTime46.add((org.joda.time.ReadablePeriod) mutablePeriod51, 2022);
        mutablePeriod9.setPeriod((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        int int60 = dateMidnight59.getEra();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateMidnight59.toDateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusDays(9);
        int int65 = dateTime62.getEra();
        org.joda.time.DateTime dateTime66 = dateTime62.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime66.getZone();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        mutableDateTime46.setZone(dateTimeZone67);
        mutableDateTime1.setZone(dateTimeZone67);
        java.lang.String str71 = dateTimeZone67.getID();
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(dateTimeZone67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.withWeekOfWeekyear(26099197);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26099197 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0.100S" + "'", str53, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "UTC" + "'", str71, "UTC");
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        org.joda.time.Period period1 = org.joda.time.Period.days(81);
        org.joda.time.Period period3 = period1.minusMinutes(25857465);
        org.joda.time.Period period5 = period3.withDays((-1641746940));
        org.joda.time.Period period7 = period5.minusWeeks(824);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        int int9 = timeOfDay7.getMinuteOfHour();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay7.secondOfMinute();
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = nameProvider11.getName(locale12, "", "0035-10-10");
        java.lang.String str16 = property10.getAsText(locale12);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear(11);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDateTime6.toDateTime(dateTimeZone20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay4.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        java.lang.String str30 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.Duration duration50 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight34.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.LocalDate localDate52 = dateMidnight51.toLocalDate();
        org.joda.time.Period period54 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.hours();
        java.lang.String str56 = durationFieldType55.toString();
        org.joda.time.Period period58 = period54.withField(durationFieldType55, 2);
        org.joda.time.Period period60 = period58.withMillis((int) '#');
        org.joda.time.LocalDate localDate61 = localDate52.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.LocalDate localDate63 = localDate61.minusYears(11);
        int int64 = localDate61.getYearOfEra();
        int int65 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDate61);
        long long68 = dateTimeField31.set((-1L), 22);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology73);
        org.joda.time.Interval interval75 = yearMonthDay74.toInterval();
        org.joda.time.DateTime dateTime76 = yearMonthDay74.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property78 = dateTime76.property(dateTimeFieldType77);
        org.joda.time.DateTime dateTime79 = property78.getDateTime();
        java.util.Locale locale80 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale81 = locale80.stripExtensions();
        int int82 = property78.getMaximumShortTextLength(locale80);
        java.lang.String str83 = dateTimeField31.getAsShortText((long) 32772, locale80);
        java.lang.String str84 = locale80.getLanguage();
        java.util.Calendar calendar85 = dateMidnight7.toCalendar(locale80);
        int int86 = calendar85.getMinimalDaysInFirstWeek();
        calendar85.setTimeInMillis((long) 25804551);
        // The following exception was thrown during execution in test generation
        try {
            calendar85.set(25826196, 177);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hours" + "'", str56, "hours");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-86377001L) + "'", long68 == (-86377001L));
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "32" + "'", str83, "32");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "zh" + "'", str84, "zh");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=25804551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=4,MILLISECOND=551,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundFloor();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateMidnight12, periodType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight12.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight12.withFieldAdded(durationFieldType19, 25770065);
        java.lang.String str22 = durationFieldType19.getName();
        java.lang.String str23 = durationFieldType19.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        int int27 = dateMidnight26.getEra();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology34);
        int int36 = yearMonthDay35.size();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        mutablePeriod47.setPeriod((long) (byte) 100, (long) (byte) -1, chronology56);
        org.joda.time.Period period58 = new org.joda.time.Period(1645513759767L, periodType30, chronology56);
        long long63 = chronology56.getDateTimeMillis((-292275054), 5, 14, 11);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight26.withChronology(chronology56);
        org.joda.time.DurationField durationField65 = chronology56.years();
        org.joda.time.DurationField durationField66 = chronology56.seconds();
        boolean boolean67 = durationFieldType19.isSupported(chronology56);
        org.joda.time.DateTimeField dateTimeField68 = chronology56.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval69 = new org.joda.time.Interval(3815999729L, (long) 26125066, chronology56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "months" + "'", str22, "months");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "months" + "'", str23, "months");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-9223372005551999989L) + "'", long63 == (-9223372005551999989L));
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime.Property property8 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusDays(0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(993);
        org.joda.time.DateTime dateTime15 = dateTime11.withMillisOfDay(6);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime11.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.addWrapFieldToCopy(9);
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        java.util.Date date22 = new java.util.Date((long) 0);
        int int23 = date22.getDay();
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromDateFields(date22);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.Duration duration44 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight28.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.LocalDate localDate46 = dateMidnight45.toLocalDate();
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        int int60 = mutablePeriod58.getMinutes();
        org.joda.time.Period period62 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.hours();
        java.lang.String str64 = durationFieldType63.toString();
        org.joda.time.Period period66 = period62.withField(durationFieldType63, 2);
        boolean boolean67 = mutablePeriod58.isSupported(durationFieldType63);
        long long70 = chronology47.add((org.joda.time.ReadablePeriod) mutablePeriod58, (long) 25755035, 2);
        boolean boolean71 = durationFieldType25.isSupported(chronology47);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay24.withChronologyRetainFields(chronology47);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay72.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property75 = yearMonthDay72.year();
        org.joda.time.YearMonthDay yearMonthDay77 = property75.setCopy(21);
        org.joda.time.YearMonthDay yearMonthDay78 = property75.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField79 = property75.getField();
        org.joda.time.YearMonthDay yearMonthDay81 = property75.addToCopy(33);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(0L, 100L, periodType84, chronology85);
        java.lang.Object obj87 = mutablePeriod86.clone();
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(0L, 100L, periodType90, chronology91);
        mutablePeriod86.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod92);
        int int94 = mutablePeriod92.getMinutes();
        int[] intArray95 = mutablePeriod92.getValues();
        int int96 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay81, intArray95);
        int[] intArray97 = yearMonthDay81.getValues();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.100S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hours" + "'", str64, "hours");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 25755235L + "'", long70 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 12 + "'", int96 == 12);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[2003, 1, 1]");
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime14 = dateTime11.withCenturyOfEra(70);
        org.joda.time.DateTime.Property property15 = dateTime11.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        int int18 = mutableDateTime17.getSecondOfDay();
        mutableDateTime17.setWeekOfWeekyear(8);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray30 = mutablePeriod29.getValues();
        int int31 = mutablePeriod29.getYears();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod29, 713);
        org.joda.time.Period period38 = new org.joda.time.Period((int) (byte) 10, 1970, 10, (int) (short) -1);
        org.joda.time.Days days39 = period38.toStandardDays();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        boolean boolean48 = period41.isSupported(durationFieldType46);
        int int49 = period38.get(durationFieldType46);
        int int50 = period38.getMonths();
        org.joda.time.Period period52 = period38.minusDays(2100);
        mutablePeriod29.add((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period55 = period38.plusDays(885);
        org.joda.time.Period period57 = period55.plusHours(885);
        org.joda.time.DateTime dateTime58 = dateTime11.plus((org.joda.time.ReadablePeriod) period55);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        int int8 = dateTime7.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundFloor();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology17);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay18.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(0L, dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        int int47 = dateMidnight46.getEra();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        org.joda.time.Duration duration63 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableDuration) duration63, periodType65);
        boolean boolean67 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        int int72 = dateMidnight71.getEra();
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(0L, 100L, periodType75, chronology76);
        java.lang.Object obj78 = mutablePeriod77.clone();
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(0L, 100L, periodType81, chronology82);
        mutablePeriod77.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod83);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone86);
        org.joda.time.Duration duration88 = mutablePeriod77.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight87);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight71, (org.joda.time.ReadableDuration) duration88);
        org.joda.time.DateTime dateTime90 = dateMidnight71.toDateTime();
        org.joda.time.Interval interval91 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateTime dateTime93 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration40, 25804551);
        org.joda.time.DateTime.Property property94 = dateTime93.yearOfEra();
        org.joda.time.DateTime dateTime95 = property94.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime96 = property94.getDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.100S");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "PT0.100S");
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.addDays(86399);
        int int18 = mutablePeriod14.size();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, (org.joda.time.ReadableDuration) duration41, periodType43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        int int48 = dateMidnight47.getEra();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone62);
        org.joda.time.Duration duration64 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight47, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        int int69 = dateMidnight68.getEra();
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(0L, 100L, periodType72, chronology73);
        java.lang.Object obj75 = mutablePeriod74.clone();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(0L, 100L, periodType78, chronology79);
        mutablePeriod74.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone83);
        org.joda.time.Duration duration85 = mutablePeriod74.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight68, (org.joda.time.ReadableDuration) duration85);
        boolean boolean87 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration85);
        java.lang.String str88 = duration85.toString();
        boolean boolean89 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration85);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration85);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.PeriodType periodType92 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period93 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration85, readableInstant91, periodType92);
        org.joda.time.PeriodType periodType94 = periodType92.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight95 = new org.joda.time.DateMidnight((java.lang.Object) periodType92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "PT0.100S");
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PT0.100S" + "'", str88, "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType94);
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime5.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = property9.setCopy(20);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology16);
        org.joda.time.Interval interval18 = yearMonthDay17.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology23);
        org.joda.time.Interval interval25 = yearMonthDay24.toInterval();
        org.joda.time.Period period26 = interval25.toPeriod();
        long long27 = interval25.getStartMillis();
        org.joda.time.Interval interval28 = interval18.overlap((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDate localDate49 = dateMidnight48.toLocalDate();
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfDay();
        org.joda.time.Interval interval53 = interval18.withChronology(chronology50);
        org.joda.time.DurationField durationField54 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.halfdayOfDay();
        org.joda.time.DateTime dateTime56 = dateTime12.toDateTime(chronology50);
        org.joda.time.DateTime dateTime58 = dateTime12.withWeekyear(25897205);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 1639439999426L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-61038316800000L) + "'", long27 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        org.joda.time.LocalTime localTime16 = localTime13.minusMinutes(2022);
        org.joda.time.LocalTime localTime18 = localTime16.withMillisOfSecond(4);
        org.joda.time.LocalTime localTime20 = localTime18.plusMinutes(111);
        org.joda.time.LocalTime localTime22 = localTime20.plusHours(25824443);
        int int23 = localTime20.getSecondOfMinute();
        org.joda.time.LocalTime.Property property24 = localTime20.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.yearOfEra();
        org.joda.time.DateMidnight dateMidnight46 = property45.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int43 = mutablePeriod41.getMinutes();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType46);
        long long53 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 25755035, 2);
        org.joda.time.LocalDate localDate54 = localDate8.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.LocalDate localDate56 = localDate54.plusYears(32770);
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property59.add((long) 3);
        mutableDateTime61.setDayOfMonth((int) (byte) 10);
        mutableDateTime61.add((long) 6);
        mutableDateTime61.addWeeks((int) '4');
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime61.monthOfYear();
        org.joda.time.Period period70 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.hours();
        java.lang.String str72 = durationFieldType71.toString();
        org.joda.time.Period period74 = period70.withField(durationFieldType71, 2);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.hours();
        java.lang.String str76 = durationFieldType75.toString();
        boolean boolean77 = period70.isSupported(durationFieldType75);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime61, (org.joda.time.ReadablePeriod) period70);
        boolean boolean79 = localDate56.equals((java.lang.Object) interval78);
        org.joda.time.LocalDate localDate81 = localDate56.minusMonths(894);
        org.joda.time.LocalDate localDate83 = localDate81.plusDays(55);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 25755235L + "'", long53 == 25755235L);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hours" + "'", str72, "hours");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hours" + "'", str76, "hours");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra(25877966);
        org.joda.time.DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property7 = dateTime5.weekOfWeekyear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.get();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.getYearMonthDay();
        org.joda.time.DurationField durationField59 = property54.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay60 = property54.withMaximumValue();
        int int61 = property54.get();
        org.joda.time.DurationField durationField62 = property54.getDurationField();
        boolean boolean63 = durationField62.isPrecise();
        long long66 = durationField62.add((long) 41, (long) 25897205);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 817236855100800041L + "'", long66 == 817236855100800041L);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(25755035);
        org.joda.time.DateTime dateTime13 = dateTime9.withYear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime16 = dateTime9.withField(dateTimeFieldType14, 8);
        org.joda.time.DateTime dateTime18 = dateTime9.minusMillis((-5087));
        org.joda.time.DateTime.Property property19 = dateTime18.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMinutes(25774925);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundHalfEven();
        int int28 = mutableDateTime27.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.roundFloor();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.roundFloor();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology43);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay44.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        int int54 = dateMidnight53.getEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateMidnight53.toDateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusDays(9);
        int int59 = dateTime56.getEra();
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime60.getZone();
        long long64 = dateTimeZone61.adjustOffset((long) 5, true);
        boolean boolean66 = dateTimeZone61.isStandardOffset((long) 3);
        mutableDateTime39.setZoneRetainFields(dateTimeZone61);
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime33.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone72);
        int int74 = dateMidnight73.getEra();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateMidnight73.toDateTime(chronology75);
        org.joda.time.DateTime dateTime78 = dateTime76.plusDays(9);
        org.joda.time.DateTime dateTime80 = dateTime76.plusMillis(6);
        int int81 = dateTime76.getDayOfYear();
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime.Property property84 = dateTime76.dayOfWeek();
        org.joda.time.DateTime dateTime86 = dateTime76.plusSeconds(25923675);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 5L + "'", long64 == 5L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(0L, dateTimeZone8);
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks(100);
        org.joda.time.Chronology chronology13 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.year();
        java.lang.String str16 = chronology13.toString();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(0L, (long) 25770065, chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(25920000L, periodType2, chronology13);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType26 = periodType25.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType25);
        org.joda.time.PeriodType periodType28 = periodType25.withSecondsRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period(0L, periodType28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        org.joda.time.Interval interval35 = yearMonthDay34.toInterval();
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology40);
        org.joda.time.Interval interval42 = yearMonthDay41.toInterval();
        org.joda.time.Period period43 = interval42.toPeriod();
        long long44 = interval42.getStartMillis();
        org.joda.time.Interval interval45 = interval35.overlap((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone62);
        org.joda.time.Duration duration64 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight48.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.LocalDate localDate66 = dateMidnight65.toLocalDate();
        org.joda.time.Chronology chronology67 = localDate66.getChronology();
        java.lang.String str68 = chronology67.toString();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.secondOfDay();
        org.joda.time.Interval interval70 = interval35.withChronology(chronology67);
        org.joda.time.DateTimeField dateTimeField71 = chronology67.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.millisOfSecond();
        org.joda.time.Period period73 = new org.joda.time.Period((long) 993, periodType28, chronology67);
        org.joda.time.Period period75 = period73.plusDays(952);
        int[] intArray78 = chronology13.get((org.joda.time.ReadablePeriod) period73, (-61662790691317000L), 192525135660136L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-61038316800000L) + "'", long44 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1960116, 11, 3]");
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(21463, 3540000, 26003451, 976, 2005, 25866711, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 976 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Interval interval14 = interval12.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withEra((int) (short) 0);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, periodType6, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology19.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(25880355, 25939879, 26116603, 198, 26003451, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 198 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology37.seconds();
        long long46 = durationField43.add(0L, 11);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 11000L + "'", long46 == 11000L);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(9);
        int int9 = dateTime6.getEra();
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-429), dateTimeZone11);
        int int13 = localDateTime12.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusYears(25886760);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay5.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((long) (byte) -1);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withMillis((long) 25755035);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Interval interval23 = interval21.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withEra((int) (short) 0);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, periodType15, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight9.withChronology(chronology28);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((-61830864000000L), chronology28);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((int) (short) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        mutableDateTime4.add((long) 111);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        java.util.Locale locale13 = new java.util.Locale("hi!", "");
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime15 = property10.withMaximumValue();
        int int17 = localDateTime15.getValue(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusDays(7);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis(25762147);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        int int26 = dateMidnight25.getEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateMidnight25.toDateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(9);
        int int31 = dateTime28.getEra();
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundCeilingCopy();
        org.joda.time.Period period36 = org.joda.time.Period.days(1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = period36.toDurationFrom(readableInstant37);
        org.joda.time.Duration duration39 = duration38.toDuration();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType41 = periodType40.withMillisRemoved();
        java.lang.String str42 = periodType41.getName();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration38, periodType41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime19.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration45 = duration38.toDuration();
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration45);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26331343 + "'", int17 == 26331343);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Minutes" + "'", str42, "Minutes");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(duration45);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.plusDays((int) ' ');
        int int8 = yearMonthDay4.getYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.era();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray54 = mutablePeriod53.getValues();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType60 = periodType59.withMillisRemoved();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 10, (long) '#', periodType60);
        org.joda.time.Period period62 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType60);
        mutablePeriod53.add((org.joda.time.ReadablePeriod) period62);
        int[] intArray65 = chronology38.get((org.joda.time.ReadablePeriod) mutablePeriod53, (long) 25787004);
        long long69 = chronology38.add(0L, 2650838400000L, 0);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(80770622126414L, chronology38);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        org.joda.time.MutableDateTime mutableDateTime73 = dateMidnight70.toMutableDateTime(dateTimeZone72);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 7, 9, 47, 4]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withDayOfYear(52);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plus(3024000008L);
        int int13 = dateMidnight12.getMinuteOfHour();
        int int14 = dateMidnight12.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.DateTime dateTime20 = dateMidnight19.toDateTime();
        boolean boolean21 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight.Property property22 = dateMidnight19.era();
        org.joda.time.DateMidnight dateMidnight23 = property22.getDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight25 = property22.addToCopy(177);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        int int8 = timeOfDay5.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay5.minusSeconds(200);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusSeconds((-278));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy(259200000L);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        java.lang.String str19 = property18.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property18.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay22 = timeOfDay12.withField(dateTimeFieldType20, 25928765);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Jul" + "'", str19, "Jul");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(292269054);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        boolean boolean9 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withDefaultYear((int) (short) 10);
        java.io.Writer writer12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.Duration duration53 = mutablePeriod42.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, (org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = duration53.toDuration();
        java.lang.String str57 = duration56.toString();
        java.util.Date date59 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay60 = org.joda.time.TimeOfDay.fromDateFields(date59);
        int int61 = timeOfDay60.getSecondOfMinute();
        org.joda.time.LocalTime localTime62 = timeOfDay60.toLocalTime();
        org.joda.time.Period period64 = org.joda.time.Period.hours((int) (byte) -1);
        org.joda.time.LocalTime localTime65 = localTime62.plus((org.joda.time.ReadablePeriod) period64);
        boolean boolean66 = duration56.equals((java.lang.Object) localTime62);
        org.joda.time.LocalTime.Property property67 = localTime62.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean69 = localTime62.isSupported(dateTimeFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer12, (org.joda.time.ReadablePartial) localTime62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0.100S" + "'", str57, "PT0.100S");
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.addToCopy(32769);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField59 = property54.getField();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(4000L);
        org.joda.time.LocalDateTime localDateTime8 = property4.setCopy(12);
        int int9 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusSeconds((int) (byte) 1);
        java.lang.String str12 = localDateTime8.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2021-01-12T07:18:51.529" + "'", str12, "2021-01-12T07:18:51.529");
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DurationField durationField23 = chronology21.eras();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology27);
        int int29 = yearMonthDay28.size();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay28.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay28.minusDays(11);
        java.lang.String str45 = yearMonthDay28.toString();
        int int46 = yearMonthDay28.getYear();
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay28.monthOfYear();
        long long49 = chronology21.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 999);
        org.joda.time.DateTimeField dateTimeField50 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField51 = chronology21.weekyear();
        org.joda.time.DurationField durationField52 = dateTimeField51.getRangeDurationField();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0035-10-10" + "'", str45, "0035-10-10");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-61038316799001L) + "'", long49 == (-61038316799001L));
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNull(durationField52);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        int int40 = dateMidnight19.compareTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableInstant41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight19.minusYears(22);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plusDays(713);
        org.joda.time.DateMidnight.Property property47 = dateMidnight44.dayOfYear();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateMidnight.Property property32 = dateMidnight8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = dateMidnight8.getZone();
        org.joda.time.DateMidnight.Property property34 = dateMidnight8.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight8.minusDays((-10));
        org.joda.time.YearMonthDay yearMonthDay37 = dateMidnight36.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        int int41 = dateMidnight40.getEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateMidnight40.toDateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(21);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMinutes(25770065);
        org.joda.time.DateTime dateTime49 = dateTime43.plus((-62135596800000L));
        org.joda.time.DateTime dateTime51 = dateTime49.plusMonths(25782688);
        long long52 = dateTime51.getMillis();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.year();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusHours(2022);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime61 = property60.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime63 = property60.setCopy(15);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property60.getFieldType();
        org.joda.time.DateTime.Property property65 = dateTime51.property(dateTimeFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay37.withField(dateTimeFieldType64, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 67739784883200000L + "'", long52 == 67739784883200000L);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        mutablePeriod7.addYears(25859094);
        mutablePeriod7.addMonths(292278994);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod7, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plusWeeks(26081052);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime11 = dateTime7.withFieldAdded(durationFieldType9, 5);
        org.joda.time.TimeOfDay timeOfDay12 = dateTime7.toTimeOfDay();
        org.joda.time.Instant instant13 = dateTime7.toInstant();
        int int14 = dateTime7.getSecondOfMinute();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        int int17 = dateTime15.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Period period35 = period33.withMillis(21);
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        boolean boolean44 = period37.isSupported(durationFieldType42);
        java.lang.String str45 = durationFieldType42.getName();
        org.joda.time.Period period47 = period33.withField(durationFieldType42, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 25827445);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime5.plusHours(10);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hours" + "'", str45, "hours");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtCurrentTime();
        int int7 = yearMonthDay4.getYear();
        org.joda.time.Interval interval8 = yearMonthDay4.toInterval();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L, dateTimeZone10);
        org.joda.time.LocalDate localDate12 = dateMidnight11.toLocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(100);
        org.joda.time.Chronology chronology15 = localDate12.getChronology();
        org.joda.time.LocalDate.Property property16 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property16.roundCeilingCopy();
        org.joda.time.LocalDate localDate18 = property16.roundFloorCopy();
        int int19 = property16.getLeapAmount();
        org.joda.time.LocalDate localDate21 = property16.addToCopy(7);
        org.joda.time.LocalDate localDate22 = property16.roundCeilingCopy();
        org.joda.time.LocalDate localDate24 = property16.addToCopy(8);
        org.joda.time.LocalDate localDate25 = property16.getLocalDate();
        org.joda.time.LocalDate localDate26 = property16.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.roundFloor();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology35);
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay36.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, (org.joda.time.ReadableInstant) dateMidnight37, periodType41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        int int46 = dateMidnight45.getEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateMidnight45.toDateTime(chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusDays(9);
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime52.getZone();
        long long56 = dateTimeZone53.adjustOffset((long) 5, true);
        boolean boolean58 = dateTimeZone53.isStandardOffset((long) 3);
        mutableDateTime31.setZoneRetainFields(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight61 = org.joda.time.DateMidnight.now(dateTimeZone53);
        org.joda.time.Interval interval62 = localDate26.toInterval(dateTimeZone53);
        boolean boolean63 = interval8.isBefore((org.joda.time.ReadableInterval) interval62);
        long long64 = interval8.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 5L + "'", long56 == 5L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-61038316800000L) + "'", long64 == (-61038316800000L));
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((-967894379785000L), dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusWeeks(6);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime5.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = property9.setCopy(20);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology16);
        org.joda.time.Interval interval18 = yearMonthDay17.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology23);
        org.joda.time.Interval interval25 = yearMonthDay24.toInterval();
        org.joda.time.Period period26 = interval25.toPeriod();
        long long27 = interval25.getStartMillis();
        org.joda.time.Interval interval28 = interval18.overlap((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDate localDate49 = dateMidnight48.toLocalDate();
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfDay();
        org.joda.time.Interval interval53 = interval18.withChronology(chronology50);
        org.joda.time.DurationField durationField54 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.halfdayOfDay();
        org.joda.time.DateTime dateTime56 = dateTime12.toDateTime(chronology50);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-61038316800000L) + "'", long27 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.Period period8 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        java.lang.String str10 = durationFieldType9.toString();
        org.joda.time.Period period12 = period8.withField(durationFieldType9, 2);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        boolean boolean15 = period8.isSupported(durationFieldType13);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period8, 21);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology21);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        long long32 = interval30.getStartMillis();
        org.joda.time.Interval interval33 = interval23.overlap((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        org.joda.time.Duration duration52 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDate localDate54 = dateMidnight53.toLocalDate();
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        java.lang.String str56 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.secondOfDay();
        org.joda.time.Interval interval58 = interval23.withChronology(chronology55);
        org.joda.time.DurationField durationField59 = chronology55.seconds();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.clockhourOfHalfday();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime4.toMutableDateTime(chronology55);
        org.joda.time.DateTimeField dateTimeField63 = chronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = chronology55.weekyearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hours" + "'", str10, "hours");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-61038316800000L) + "'", long32 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod8.copy();
        mutablePeriod8.addSeconds(713);
        mutablePeriod8.setSeconds(4640);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) 4640);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(mutablePeriod10);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        int int5 = dateMidnight4.getEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = dateMidnight4.toDateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(0);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime7.withField(dateTimeFieldType12, 15);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        int int18 = dateMidnight17.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateMidnight17.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(0);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime24 = dateTime22.toLocalTime();
        org.joda.time.LocalTime localTime26 = localTime24.minusMinutes(3);
        org.joda.time.LocalTime localTime28 = localTime24.minusMillis((-1));
        org.joda.time.DateTime dateTime29 = localTime28.toDateTimeToday();
        org.joda.time.LocalTime localTime31 = localTime28.minusMinutes(2022);
        org.joda.time.Chronology chronology32 = localTime28.getChronology();
        boolean boolean33 = dateTimeFieldType12.isSupported(chronology32);
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ', chronology32);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) ' ', chronology32);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        int int40 = dateMidnight39.getEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateMidnight39.toDateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(9);
        int int45 = dateTime42.getEra();
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.secondOfDay();
        org.joda.time.DateTime dateTime48 = property47.roundCeilingCopy();
        org.joda.time.Period period50 = org.joda.time.Period.days(1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = period50.toDurationFrom(readableInstant51);
        org.joda.time.Duration duration53 = duration52.toDuration();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType55 = periodType54.withMillisRemoved();
        java.lang.String str56 = periodType55.getName();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration52, periodType55);
        long long58 = duration52.getMillis();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight36.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight36.withYearOfEra(25915554);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusDays(894);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.withYear(26115188);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Minutes" + "'", str56, "Minutes");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 86400000L + "'", long58 == 86400000L);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight65);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(188, 0, 26023665, 0, 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        int int9 = periodType8.size();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.halfdays();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology62);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, periodType8, chronology62);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        int int70 = dateMidnight69.getEra();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateMidnight69.toDateTime(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks(0);
        org.joda.time.DateTime dateTime75 = dateTime74.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime78 = dateTime74.withFieldAdded(durationFieldType76, 5);
        int int79 = mutablePeriod66.get(durationFieldType76);
        java.lang.String str80 = durationFieldType76.toString();
        java.lang.String str81 = durationFieldType76.getName();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25755235L + "'", long60 == 25755235L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "centuries" + "'", str80, "centuries");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "centuries" + "'", str81, "centuries");
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 3);
        mutableDateTime15.setDayOfMonth((int) (byte) 10);
        mutableDateTime15.add((long) 6);
        mutableDateTime15.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.monthOfYear();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        org.joda.time.Period period53 = period51.withMillis((int) '#');
        org.joda.time.LocalDate localDate54 = localDate45.minus((org.joda.time.ReadablePeriod) period53);
        int int55 = period53.getMonths();
        org.joda.time.Period period57 = period53.minusMinutes(8);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadablePeriod) period53);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod64.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        int int70 = dateMidnight69.getEra();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(0L, 100L, periodType73, chronology74);
        java.lang.Object obj76 = mutablePeriod75.clone();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(0L, 100L, periodType79, chronology80);
        mutablePeriod75.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone84);
        org.joda.time.Duration duration86 = mutablePeriod75.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight69, (org.joda.time.ReadableDuration) duration86);
        mutablePeriod64.add((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Interval interval89 = interval58.withDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        boolean boolean90 = interval10.contains((org.joda.time.ReadableInterval) interval89);
        org.joda.time.Interval interval91 = interval10.toInterval();
        long long92 = interval91.toDurationMillis();
        boolean boolean93 = interval91.isAfterNow();
        long long94 = interval91.getEndMillis();
        long long95 = interval91.getStartMillis();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "PT0.100S");
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 2L + "'", long94 == 2L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 2L + "'", long95 == 2L);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        int int3 = property2.getMaximumValue();
        org.joda.time.DurationField durationField4 = property2.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 23 + "'", int3 == 23);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundFloor();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology9);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) dateMidnight11, periodType15);
        org.joda.time.PeriodType periodType17 = periodType15.withWeeksRemoved();
        org.joda.time.PeriodType periodType18 = periodType15.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 26068797, periodType15);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 25755035, dateTimeZone1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours(840);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        calendar0.roll(8, false);
        calendar0.set(0, 25762216, 25871762, (-429), 70);
        int int14 = calendar0.getFirstDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setWeekDate(16, (int) (byte) 0, 7);
        java.util.Date date21 = calendar16.getTime();
        java.util.Date date22 = calendar16.getTime();
        int int23 = calendar0.compareTo(calendar16);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=69922626725451912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2217729,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=305,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=10,SECOND=51,MILLISECOND=912,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-61662789668088,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=51,MILLISECOND=912,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Sat Dec 28 07:18:51 UTC 15");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Sat Dec 28 07:18:51 UTC 15");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfCeiling();
        int int5 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology9);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay10.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime19 = property16.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        int int23 = dateMidnight22.getEra();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.monthOfYear();
        org.joda.time.DateMidnight dateMidnight26 = property24.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property24.getFieldType();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime19.property(dateTimeFieldType27);
        java.lang.String str29 = mutableDateTime19.toString();
        org.joda.time.DateTime dateTime30 = yearMonthDay13.toDateTime((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.setDate(16010L);
        int int33 = mutableDateTime19.getCenturyOfEra();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str29, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology37.minutes();
        org.joda.time.Chronology chronology44 = chronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = chronology37.centuryOfEra();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) 25790484, chronology38);
        org.joda.time.LocalDate localDate44 = yearMonthDay43.toLocalDate();
        int int45 = localDate44.getCenturyOfEra();
        org.joda.time.LocalDate localDate47 = localDate44.minusYears(693);
        org.joda.time.LocalDate localDate49 = localDate47.minusYears(25940734);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.withChronology(chronology55);
        org.joda.time.DateTime dateTime57 = dateMidnight56.toDateTime();
        org.joda.time.tz.NameProvider nameProvider58 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("1900-01-01");
        java.lang.String str64 = nameProvider58.getName(locale61, "DurationField[seconds]", "May 11, 2022 7:09:54 AM");
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleAttributes();
        int int66 = strSet65.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.year();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology74 = localDateTime73.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean76 = localDateTime73.isSupported(dateTimeFieldType75);
        boolean boolean77 = strSet65.contains((java.lang.Object) dateTimeFieldType75);
        boolean boolean78 = dateTime57.isSupported(dateTimeFieldType75);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType75.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int80 = localDate47.get(dateTimeFieldType75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(nameProvider58);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(durationFieldType79);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime11.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(0L, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateMidnight31.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusDays(9);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra(2022);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(23, (int) (short) 0, (int) (short) 100, 70);
        org.joda.time.DateTime dateTime46 = dateTime39.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod44, 50400000);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime39.getZone();
        org.joda.time.DateMidnight dateMidnight48 = localDate28.toDateMidnight(dateTimeZone47);
        long long50 = dateTimeZone47.previousTransition(1969L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(291851457L, dateTimeZone47);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology55);
        org.joda.time.DateMidnight dateMidnight57 = yearMonthDay56.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((long) (byte) -1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight62, chronology63);
        org.joda.time.LocalDate.Property property65 = localDate64.centuryOfEra();
        org.joda.time.LocalDate localDate67 = property65.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.withChronology(chronology73);
        int int75 = dateMidnight74.getMinuteOfHour();
        org.joda.time.Chronology chronology76 = dateMidnight74.getChronology();
        boolean boolean77 = localDate67.equals((java.lang.Object) dateMidnight74);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight74.minus((long) 674);
        int int80 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateMidnight79);
        long long82 = dateTimeZone47.nextTransition((-59958118198126L));
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((long) (-2072239199), dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.plusWeeks(25910291);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1969L + "'", long50 == 1969L);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-59958118198126L) + "'", long82 == (-59958118198126L));
        org.junit.Assert.assertNotNull(dateMidnight85);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        mutableDateTime3.addWeekyears((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.dayOfYear();
        mutableDateTime3.addHours(20);
        mutableDateTime3.add((long) 32770);
        mutableDateTime3.setWeekyear(25836647);
        int int13 = mutableDateTime3.getRoundingMode();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology9);
        org.joda.time.Interval interval11 = yearMonthDay10.toInterval();
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology16);
        org.joda.time.Interval interval18 = yearMonthDay17.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        long long20 = interval18.getStartMillis();
        org.joda.time.Interval interval21 = interval11.overlap((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight24.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDate localDate42 = dateMidnight41.toLocalDate();
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        java.lang.String str44 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfDay();
        org.joda.time.Interval interval46 = interval11.withChronology(chronology43);
        org.joda.time.DurationField durationField47 = chronology43.minutes();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 14, chronology43);
        org.joda.time.Period period49 = new org.joda.time.Period((-61038316800000L), (-61038316800000L), periodType4, chronology43);
        org.joda.time.Period period50 = new org.joda.time.Period(86399999L, chronology43);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology43);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-61038316800000L) + "'", long20 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getWeekOfWeekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter18.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = yearMonthDay15.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime5.toMutableDateTime(dateTimeZone31);
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.Duration duration57 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight41.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDate localDate59 = dateMidnight58.toLocalDate();
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        java.lang.String str61 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfDay();
        long long64 = dateTimeField62.roundHalfFloor(100L);
        java.util.Locale locale68 = new java.util.Locale("hi!", "");
        java.lang.String str69 = locale68.getDisplayVariant();
        java.lang.String str70 = locale68.getCountry();
        java.lang.String str71 = dateTimeField62.getAsShortText((long) 16, locale68);
        java.lang.String str72 = locale38.getDisplayLanguage(locale68);
        java.lang.String str73 = dateTimeZone31.getName((long) 25791265, locale38);
        long long75 = dateTimeZone31.convertUTCToLocal((long) 25767397);
        int int77 = dateTimeZone31.getStandardOffset(2232000017L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Japanese" + "'", str72, "Japanese");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 25767397L + "'", long75 == 25767397L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.Interval interval13 = interval5.withEnd((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Period period14 = interval5.toPeriod();
        long long15 = interval5.toDurationMillis();
        boolean boolean17 = interval5.isAfter(118L);
        long long18 = interval5.toDurationMillis();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86400000L + "'", long18 == 86400000L);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set("0");
        org.joda.time.MutableDateTime mutableDateTime7 = property3.add((long) 25788046);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        int int20 = mutablePeriod18.getMinutes();
        int[] intArray21 = mutablePeriod18.getValues();
        org.joda.time.PeriodType periodType22 = mutablePeriod18.getPeriodType();
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod18, (int) (byte) 10);
        org.joda.time.Period period26 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        java.lang.String str28 = durationFieldType27.toString();
        org.joda.time.Period period30 = period26.withField(durationFieldType27, 2);
        org.joda.time.PeriodType periodType31 = period30.getPeriodType();
        org.joda.time.Period period33 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        java.lang.String str35 = durationFieldType34.toString();
        org.joda.time.Period period37 = period33.withField(durationFieldType34, 2);
        int int38 = period33.size();
        org.joda.time.MutablePeriod mutablePeriod39 = period33.toMutablePeriod();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(periodType40);
        org.joda.time.Period period42 = period33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Period period44 = period42.minusMillis(3);
        org.joda.time.Period period45 = period30.plus((org.joda.time.ReadablePeriod) period44);
        int int46 = period30.getWeeks();
        org.joda.time.Period period48 = period30.plusYears(457);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType56 = periodType55.withMillisRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 10, (long) '#', periodType56);
        org.joda.time.Period period58 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType56);
        org.joda.time.PeriodType periodType59 = periodType56.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(32769L, periodType56);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (byte) 1, periodType56);
        org.joda.time.Period period62 = period48.normalizedStandard(periodType56);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period62);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hours" + "'", str35, "hours");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period62);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property8.getFieldType();
        org.joda.time.TimeOfDay timeOfDay16 = property8.setCopy((int) (byte) 0);
        org.joda.time.DurationField durationField17 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField18 = property8.getField();
        int int19 = property8.get();
        java.lang.String str20 = property8.getAsShortText();
        java.lang.String str21 = property8.getAsString();
        org.joda.time.TimeOfDay timeOfDay22 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField23 = property8.getField();
        int int24 = property8.get();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        int int3 = localDateTime1.getMonthOfYear();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.setHours(2);
        mutablePeriod14.addMonths(25762033);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        java.lang.String str22 = durationFieldType21.getName();
        int int23 = mutablePeriod14.indexOf(durationFieldType21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime1.withFieldAdded(durationFieldType21, 32769);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        java.util.Locale locale31 = new java.util.Locale("hi!", "");
        java.lang.String str32 = property28.getAsText(locale31);
        org.joda.time.LocalDateTime localDateTime33 = property28.withMaximumValue();
        int int34 = localDateTime33.getEra();
        int int35 = localDateTime33.getEra();
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime25.withField(dateTimeFieldType37, (-2072237));
        int int40 = localDateTime39.getHourOfDay();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.dayOfWeek();
        org.joda.time.Chronology chronology42 = localDateTime39.getChronology();
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology42);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "days" + "'", str22, "days");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight43);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-15T07:15:34.333");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-15t07:15:34.333");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(26202475, 2066, 653);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26202475 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        boolean boolean2 = dateMidnight0.isAfter((long) 53);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Interval interval10 = interval8.withEndMillis((long) 2);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.Interval interval16 = yearMonthDay15.toInterval();
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology21);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.Period period24 = interval23.toPeriod();
        long long25 = interval23.getStartMillis();
        org.joda.time.Interval interval26 = interval16.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDate localDate47 = dateMidnight46.toLocalDate();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfDay();
        org.joda.time.Interval interval51 = interval16.withChronology(chronology48);
        org.joda.time.DurationField durationField52 = chronology48.minutes();
        org.joda.time.Interval interval53 = interval10.withChronology(chronology48);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight0.withChronology(chronology48);
        org.joda.time.DurationField durationField55 = chronology48.centuries();
        org.joda.time.DurationField durationField56 = chronology48.days();
        long long59 = durationField56.getValueAsLong((long) 605, 0L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-61038316800000L) + "'", long25 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateMidnight54.toDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(9);
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        int int62 = dateTime57.getWeekOfWeekyear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology66);
        org.joda.time.format.DateTimePrinter dateTimePrinter68 = null;
        org.joda.time.format.DateTimeParser dateTimeParser69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter68, dateTimeParser69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter70.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone74);
        int int76 = dateMidnight75.getEra();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateMidnight75.toDateTime(chronology77);
        org.joda.time.DateTime dateTime80 = dateTime78.plusDays(9);
        int int81 = dateTime78.getEra();
        org.joda.time.DateTime dateTime82 = dateTime78.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime82.getZone();
        java.lang.String str84 = dateTimeZone83.toString();
        org.joda.time.YearMonthDay yearMonthDay85 = new org.joda.time.YearMonthDay(dateTimeZone83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter70.withZone(dateTimeZone83);
        org.joda.time.DateTime dateTime87 = yearMonthDay67.toDateTimeAtMidnight(dateTimeZone83);
        org.joda.time.MutableDateTime mutableDateTime88 = dateTime57.toMutableDateTime(dateTimeZone83);
        long long91 = dateTimeZone83.adjustOffset(0L, false);
        org.joda.time.Interval interval92 = yearMonthDay3.toInterval(dateTimeZone83);
        org.joda.time.YearMonthDay.Property property93 = yearMonthDay3.monthOfYear();
        int int94 = property93.get();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "UTC" + "'", str84, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableInstant10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight2.minusYears(993);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        java.lang.String str23 = mutablePeriod21.toString();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod21, 2022);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime16.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        int int30 = dateMidnight29.getEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateMidnight29.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusDays(9);
        int int35 = dateTime32.getEra();
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime36.getZone();
        long long40 = dateTimeZone37.adjustOffset((long) 5, true);
        mutableDateTime16.setZoneRetainFields(dateTimeZone37);
        java.util.TimeZone timeZone42 = dateTimeZone37.toTimeZone();
        long long44 = dateTimeZone37.convertUTCToLocal(25755235L);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(dateTimeZone37);
        boolean boolean47 = dateTimeZone37.isStandardOffset((long) 25762147);
        org.joda.time.DateMidnight dateMidnight48 = org.joda.time.DateMidnight.now(dateTimeZone37);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.withYearOfEra(25934755);
        org.joda.time.DateMidnight.Property property52 = dateMidnight48.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight48.withMillis((long) 25983438);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.100S" + "'", str23, "PT0.100S");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 5L + "'", long40 == 5L);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight55);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = dateMidnight23.getChronology();
        mutablePeriod16.setPeriod((long) (byte) 100, (long) (byte) -1, chronology25);
        long long30 = chronology25.add((long) 25767397, 1645513759767L, (int) 'u');
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.Duration duration49 = mutablePeriod38.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight33.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDate localDate51 = dateMidnight50.toLocalDate();
        org.joda.time.Period period53 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.Period period57 = period53.withField(durationFieldType54, 2);
        org.joda.time.Period period59 = period57.withMillis((int) '#');
        org.joda.time.LocalDate localDate60 = localDate51.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.LocalDate localDate62 = localDate60.minusYears(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.era();
        boolean boolean64 = localDate62.isSupported(dateTimeFieldType63);
        org.joda.time.LocalDate localDate66 = localDate62.withMonthOfYear(6);
        org.joda.time.LocalDate localDate68 = localDate66.plusWeeks(25762147);
        int[] intArray70 = chronology25.get((org.joda.time.ReadablePartial) localDate66, 604800000L);
        org.joda.time.LocalDate localDate72 = localDate66.plusDays(25812360);
        org.joda.time.LocalDate.Property property73 = localDate72.monthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 192525135660136L + "'", long30 == 192525135660136L);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hours" + "'", str55, "hours");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 8]");
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime34);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime41 = property38.getMutableDateTime();
        java.lang.String str42 = mutableDateTime41.toString();
        java.util.Date date43 = mutableDateTime41.toDate();
        mutableDateTime41.addHours(2021);
        mutableDateTime35.setDate((org.joda.time.ReadableInstant) mutableDateTime41);
        int int47 = mutableDateTime35.getYear();
        mutableDateTime35.addMillis(25862871);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        java.lang.Object obj58 = mutablePeriod57.clone();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        org.joda.time.Duration duration68 = mutablePeriod57.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight52.plus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.LocalDate localDate70 = dateMidnight69.toLocalDate();
        org.joda.time.Period period72 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.hours();
        java.lang.String str74 = durationFieldType73.toString();
        org.joda.time.Period period76 = period72.withField(durationFieldType73, 2);
        org.joda.time.Period period78 = period76.withMillis((int) '#');
        org.joda.time.LocalDate localDate79 = localDate70.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period81 = period78.minusYears(21);
        org.joda.time.Period period83 = period78.minusSeconds((int) (byte) 10);
        mutableDateTime35.add((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period86 = period78.withMinutes(52);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str42, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "PT0.100S");
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hours" + "'", str74, "hours");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.joda.time.Period period1 = new org.joda.time.Period(1645514028466L);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        java.lang.String str23 = mutableDateTime13.toString();
        org.joda.time.DateTime dateTime24 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Interval interval25 = yearMonthDay7.toInterval();
        long long26 = interval25.toDurationMillis();
        long long27 = interval25.getStartMillis();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology31);
        org.joda.time.Interval interval33 = yearMonthDay32.toInterval();
        org.joda.time.Period period34 = interval33.toPeriod();
        java.lang.String str35 = interval33.toString();
        long long36 = interval33.getEndMillis();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology40);
        org.joda.time.Interval interval42 = yearMonthDay41.toInterval();
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology47);
        org.joda.time.Interval interval49 = yearMonthDay48.toInterval();
        org.joda.time.Period period50 = interval49.toPeriod();
        long long51 = interval49.getStartMillis();
        org.joda.time.Interval interval52 = interval42.overlap((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, 100L, periodType58, chronology59);
        java.lang.Object obj61 = mutablePeriod60.clone();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(0L, 100L, periodType64, chronology65);
        mutablePeriod60.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone69);
        org.joda.time.Duration duration71 = mutablePeriod60.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight55.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.LocalDate localDate73 = dateMidnight72.toLocalDate();
        org.joda.time.Chronology chronology74 = localDate73.getChronology();
        java.lang.String str75 = chronology74.toString();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.secondOfDay();
        org.joda.time.Interval interval77 = interval42.withChronology(chronology74);
        org.joda.time.DurationField durationField78 = chronology74.seconds();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = chronology74.era();
        org.joda.time.Interval interval81 = interval33.withChronology(chronology74);
        boolean boolean82 = interval25.overlaps((org.joda.time.ReadableInterval) interval81);
        org.joda.time.Interval interval83 = interval81.toInterval();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86400000L + "'", long26 == 86400000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-61038316800000L) + "'", long27 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str35, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-61038230400000L) + "'", long36 == (-61038230400000L));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-61038316800000L) + "'", long51 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "PT0.100S");
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[UTC]" + "'", str75, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(interval83);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate20.weekyear();
        org.joda.time.LocalDate localDate24 = property22.addToCopy(25755126);
        org.joda.time.LocalDate localDate25 = property22.roundCeilingCopy();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.LocalDate localDate38 = localDate25.minus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.LocalDate.Property property39 = localDate38.weekyear();
        org.joda.time.LocalDate localDate40 = property39.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate42 = property39.addToCopy(53);
        int[] intArray43 = localDate42.getValues();
        org.joda.time.Period period45 = org.joda.time.Period.seconds(1439);
        org.joda.time.LocalDate localDate47 = localDate42.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 198);
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime48.withTime(620, 25859060, 0, 457);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 620 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2024, 1, 1]");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 894);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getHours();
        date3.setTime(0L);
        int int7 = date3.getDate();
        java.util.Calendar.Builder builder8 = builder2.setInstant(date3);
        date3.setMonth(69);
        date3.setYear(72);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromDateFields(date3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Oct 01 00:00:00 UTC 1972");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.hourOfDay();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay1.secondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        org.joda.time.Period period4 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period6 = period4.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(0);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear((int) (short) 10);
        org.joda.time.Duration duration17 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.year();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.withCenturyOfEra(353);
        org.joda.time.DateTime.Property property30 = dateTime26.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime26.withYearOfCentury(120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.addWrapField(993);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Period period35 = period33.withDays((-1));
        org.joda.time.PeriodType periodType36 = period35.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getHours();
        int int40 = mutablePeriod37.getWeeks();
        int int41 = mutablePeriod37.getMinutes();
        mutablePeriod37.setPeriod((long) 99);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval51 = dateMidnight46.toInterval();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L, dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone56);
        int int58 = dateMidnight57.getEra();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        java.lang.Object obj64 = mutablePeriod63.clone();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0L, 100L, periodType67, chronology68);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone72);
        org.joda.time.Duration duration74 = mutablePeriod63.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, (org.joda.time.ReadableDuration) duration74);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, (org.joda.time.ReadableDuration) duration74, periodType76);
        org.joda.time.Interval interval78 = interval51.withDurationAfterStart((org.joda.time.ReadableDuration) duration74);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType80 = periodType79.withSecondsRemoved();
        org.joda.time.Period period81 = interval51.toPeriod(periodType79);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.YearMonthDay yearMonthDay86 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology85);
        org.joda.time.Interval interval87 = yearMonthDay86.toInterval();
        org.joda.time.MutableDateTime mutableDateTime89 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime89.millisOfDay();
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime89.secondOfDay();
        java.lang.String str92 = property91.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime93 = property91.getMutableDateTime();
        boolean boolean94 = interval87.isBefore((org.joda.time.ReadableInstant) mutableDateTime93);
        boolean boolean95 = interval87.containsNow();
        boolean boolean96 = interval51.overlaps((org.joda.time.ReadableInterval) interval87);
        org.joda.time.Period period97 = interval51.toPeriod();
        org.joda.time.Duration duration98 = interval51.toDuration();
        mutablePeriod37.add((org.joda.time.ReadableInterval) interval51);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "PT0.100S");
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(mutableDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0" + "'", str92, "0");
        org.junit.Assert.assertNotNull(mutableDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime22 = dateTime18.withFieldAdded(durationFieldType20, 5);
        int int23 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.withYearOfEra(25851001);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight8.plusDays(66);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.Period period50 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Period period54 = period50.withField(durationFieldType51, 2);
        org.joda.time.Period period56 = period54.withMillis((int) '#');
        org.joda.time.LocalDate localDate57 = localDate48.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period59 = period56.minusYears(21);
        org.joda.time.Period period61 = period56.minusSeconds((int) (byte) 10);
        org.joda.time.Period period63 = period56.plusYears(25795116);
        org.joda.time.Period period65 = period56.plusSeconds((int) 'a');
        org.joda.time.Period period67 = period56.minusYears(25824443);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight8.minus((org.joda.time.ReadablePeriod) period67);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateMidnight68);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((-61057903433957L));
        int int2 = timeOfDay1.getHourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.Interval interval13 = interval5.withEnd((org.joda.time.ReadableInstant) mutableDateTime12);
        java.lang.String str14 = mutableDateTime12.toString();
        mutableDateTime12.setMillisOfDay(653);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(25766043, 19, (int) (short) 1, 52, (int) (byte) 1, 21, 348, 35);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(0L, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableDuration) duration48, periodType50);
        org.joda.time.Period period53 = period51.withMillis(21);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(10, 100, 10, (int) (short) 100, 4, 25755035, (int) ' ', (int) (short) 10);
        org.joda.time.Period period64 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.hours();
        java.lang.String str66 = durationFieldType65.toString();
        org.joda.time.Period period68 = period64.withField(durationFieldType65, 2);
        mutablePeriod62.add(durationFieldType65, 32769);
        boolean boolean71 = period53.isSupported(durationFieldType65);
        mutablePeriod25.set(durationFieldType65, 25790263);
        mutableDateTime12.add(durationFieldType65, (-494561));
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str14, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hours" + "'", str66, "hours");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = localTime15.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay17 = dateTime16.toTimeOfDay();
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Locale.Builder builder55 = builder0.setLocale(locale53);
        java.util.Locale.Builder builder56 = builder0.clear();
        java.util.Locale.Builder builder57 = builder0.clear();
        java.util.Locale.Builder builder59 = builder0.removeUnicodeLocaleAttribute("German");
        java.util.Locale.Builder builder61 = builder59.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder62 = builder59.clear();
        java.util.Locale locale63 = builder62.build();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay4.withFieldAdded(durationFieldType8, 12);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter14.getParser();
        int int16 = dateTimeFormatter14.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        int int51 = mutablePeriod49.getMinutes();
        org.joda.time.Period period53 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.Period period57 = period53.withField(durationFieldType54, 2);
        boolean boolean58 = mutablePeriod49.isSupported(durationFieldType54);
        long long61 = chronology38.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology38.withZone(dateTimeZone62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter14.withChronology(chronology63);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay10.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        int int72 = dateMidnight71.getEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = dateMidnight71.toDateTime(chronology73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime dateTime77 = dateTime74.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone79);
        int int81 = dateMidnight80.getEra();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = dateMidnight80.toDateTime(chronology82);
        org.joda.time.DateTime dateTime85 = dateTime83.plusDays(9);
        int int86 = dateTime83.getEra();
        org.joda.time.DateTime dateTime87 = dateTime83.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime87.getZone();
        java.lang.String str89 = dateTimeZone88.toString();
        org.joda.time.YearMonthDay yearMonthDay90 = new org.joda.time.YearMonthDay(dateTimeZone88);
        org.joda.time.DateMidnight dateMidnight91 = org.joda.time.DateMidnight.now(dateTimeZone88);
        org.joda.time.DateTime dateTime92 = dateTime77.withZoneRetainFields(dateTimeZone88);
        org.joda.time.Instant instant93 = dateTime92.toInstant();
        boolean boolean94 = yearMonthDay68.equals((java.lang.Object) instant93);
        org.joda.time.LocalDate localDate95 = yearMonthDay68.toLocalDate();
        int int96 = yearMonthDay68.getDayOfMonth();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2000 + "'", int16 == 2000);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hours" + "'", str55, "hours");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 25755235L + "'", long61 == 25755235L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "UTC" + "'", str89, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(localDate95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 22 + "'", int96 == 22);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear(25790263);
        boolean boolean8 = dateTimeFormatter5.isPrinter();
        boolean boolean9 = dateTimeFormatter5.isPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter5.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(chronology10);
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(5, (int) (byte) 10);
        int int3 = timeOfDay2.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusHours(0);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay2.minusHours(18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay9 = timeOfDay2.withSecondOfMinute(972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 972 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        int int54 = mutablePeriod52.getMinutes();
        org.joda.time.Period period56 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        java.lang.String str58 = durationFieldType57.toString();
        org.joda.time.Period period60 = period56.withField(durationFieldType57, 2);
        boolean boolean61 = mutablePeriod52.isSupported(durationFieldType57);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) mutablePeriod52, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology41.withZone(dateTimeZone65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 11, chronology66);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay18.plus((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        mutablePeriod77.addMinutes(6);
        org.joda.time.MutablePeriod mutablePeriod80 = mutablePeriod77.copy();
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod77, 0);
        org.joda.time.YearMonthDay.Property property83 = yearMonthDay18.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hours" + "'", str58, "hours");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 25755235L + "'", long64 == 25755235L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(mutablePeriod80);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        org.joda.time.Period period1 = org.joda.time.Period.days(25836647);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTimeISO();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        int int24 = timeZone23.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime22.toMutableDateTime(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval2 = yearMonthDay1.toInterval();
        int int3 = yearMonthDay1.size();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays(111);
        int int6 = yearMonthDay5.getDayOfMonth();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay4.toDateMidnight(dateTimeZone6);
        int int8 = yearMonthDay4.getMonthOfYear();
        org.joda.time.DateTime dateTime9 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.withYear(993);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusYears(25791265);
        org.joda.time.DateTimeField dateTimeField15 = yearMonthDay13.getField(0);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.plusDays(2);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 25833493);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.minus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        boolean boolean33 = localDate31.isSupported(dateTimeFieldType32);
        org.joda.time.LocalDate localDate35 = localDate31.withMonthOfYear(6);
        int int36 = localDate35.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = localDate35.withEra(25839);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25839 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Interval interval23 = interval21.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        boolean boolean25 = interval12.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateMidnight28.toDateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks(0);
        org.joda.time.LocalDate localDate34 = dateTime31.toLocalDate();
        boolean boolean35 = interval23.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime37 = dateTime31.minusSeconds(1969);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear(50400000);
        org.joda.time.DateTime dateTime42 = dateTime37.withDurationAdded((long) 5084899, 25916743);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        int int14 = property13.getMinimumValue();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("1900-01-01");
        java.lang.String str21 = nameProvider15.getName(locale18, "DurationField[seconds]", "May 11, 2022 7:09:54 AM");
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str23 = property13.getAsText(locale18);
        org.joda.time.LocalTime localTime25 = property13.addCopy((-1706));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.secondOfMinute();
        org.joda.time.Chronology chronology44 = chronology37.withUTC();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set("0");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology9);
        java.lang.String str11 = yearMonthDay10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay10.toDateMidnight(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        int int48 = mutablePeriod46.getMinutes();
        org.joda.time.Period period50 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Period period54 = period50.withField(durationFieldType51, 2);
        boolean boolean55 = mutablePeriod46.isSupported(durationFieldType51);
        long long58 = chronology35.add((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology35.withZone(dateTimeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight13, chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.dayOfMonth();
        org.joda.time.DurationField durationField64 = chronology60.millis();
        mutableDateTime5.setChronology(chronology60);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0035-10-10" + "'", str11, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 25755235L + "'", long58 == 25755235L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        long long12 = durationField9.getDifferenceAsLong((long) 47, (long) 19045);
        long long15 = durationField9.getMillis((long) 53, 625L);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType20);
        org.joda.time.PeriodType periodType23 = periodType20.withSecondsRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withYearsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateMidnight30.toDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(0);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime40 = dateTime33.withField(dateTimeFieldType38, 15);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        int int44 = dateMidnight43.getEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateMidnight43.toDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(0);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime50 = dateTime48.toLocalTime();
        org.joda.time.LocalTime localTime52 = localTime50.minusMinutes(3);
        org.joda.time.LocalTime localTime54 = localTime50.minusMillis((-1));
        org.joda.time.DateTime dateTime55 = localTime54.toDateTimeToday();
        org.joda.time.LocalTime localTime57 = localTime54.minusMinutes(2022);
        org.joda.time.Chronology chronology58 = localTime54.getChronology();
        boolean boolean59 = dateTimeFieldType38.isSupported(chronology58);
        org.joda.time.TimeOfDay timeOfDay60 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ', chronology58);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) ' ', chronology58);
        org.joda.time.DateTimeZone dateTimeZone62 = chronology58.getZone();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 25903201, 0L, periodType25, chronology58);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology67);
        int int69 = yearMonthDay68.size();
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(0L, 100L, periodType72, chronology73);
        java.lang.Object obj75 = mutablePeriod74.clone();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(0L, 100L, periodType78, chronology79);
        mutablePeriod74.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay68.plus((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone86);
        int int88 = dateMidnight87.getEra();
        org.joda.time.Chronology chronology89 = dateMidnight87.getChronology();
        mutablePeriod80.setPeriod((long) (byte) 100, (long) (byte) -1, chronology89);
        org.joda.time.DurationField durationField91 = chronology89.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period92 = new org.joda.time.Period((java.lang.Object) 625L, periodType25, chronology89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3180000L + "'", long15 == 3180000L);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(durationField91);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.addToCopy(32769);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        org.joda.time.DateTimeField dateTimeField58 = property54.getField();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        java.lang.Object obj64 = mutablePeriod63.clone();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0L, 100L, periodType67, chronology68);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        int int71 = mutablePeriod69.getMinutes();
        boolean boolean72 = property54.equals((java.lang.Object) mutablePeriod69);
        java.lang.String str73 = property54.getAsString();
        org.joda.time.YearMonthDay yearMonthDay75 = property54.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay77 = property54.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay78 = property54.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField80 = yearMonthDay78.getField((-1970));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1970");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970" + "'", str73, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(2022);
        org.joda.time.LocalTime localTime15 = localTime13.minusHours(8);
        int int16 = localTime13.size();
        org.joda.time.LocalTime localTime18 = localTime13.minusMinutes(644);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((java.lang.Object) localTime18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.Instant instant4 = dateMidnight2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Period period27 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.hours();
        java.lang.String str29 = durationFieldType28.toString();
        org.joda.time.Period period31 = period27.withField(durationFieldType28, 2);
        org.joda.time.Period period33 = period31.withMillis((int) '#');
        org.joda.time.LocalDate localDate34 = localDate25.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.LocalDate localDate36 = localDate34.minusYears(11);
        int int37 = localDate34.getYearOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        int int43 = yearMonthDay42.size();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay42.plus((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = yearMonthDay56.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate34.toDateTimeAtStartOfDay(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = dateTime59.toLocalDate();
        boolean boolean61 = instant4.isEqual((org.joda.time.ReadableInstant) dateTime59);
        int int62 = dateTime59.getHourOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hours" + "'", str29, "hours");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        java.util.Locale.Category category0 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        mutableDateTime4.addWeekyears((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = dateTimeField8.getAsText(25836213, locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514333170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=53,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "25836213" + "'", str12, "25836213");
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        int int13 = property12.get();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(25839);
        org.joda.time.TimeOfDay timeOfDay16 = property12.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.plusMinutes(86399999);
        int int19 = timeOfDay18.getMinuteOfHour();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        date0.setDate((int) (byte) 100);
        java.lang.String str4 = date0.toLocaleString();
        date0.setTime((long) 25774925);
        date0.setSeconds((-17250));
        org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 02:21:30 UTC 1970");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-5-11 7:18:53" + "'", str4, "2022-5-11 7:18:53");
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        java.lang.String str8 = property2.toString();
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withWeekyear(22);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime16 = property14.addWrapFieldToCopy(70653);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[year]" + "'", str8, "Property[year]");
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.year();
        org.joda.time.DurationField durationField48 = chronology46.minutes();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(15);
        org.joda.time.Chronology chronology51 = chronology46.withZone(dateTimeZone50);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(chronology46);
        org.joda.time.DateTimeField dateTimeField53 = chronology46.yearOfEra();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withEra((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        boolean boolean14 = dateTime11.isEqual((long) 32772);
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = property15.setCopy("2022-02-15T07:16:30.723");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:16:30.723\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.dayOfMonth();
        org.joda.time.Chronology chronology25 = yearMonthDay23.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime20.toMutableDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime20.minusMillis(121);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear(674);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMillis(25755126);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.weekyear();
        boolean boolean44 = dateTimeField43.isSupported();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.hourOfDay();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.Chronology chronology56 = null;
        mutablePeriod52.setPeriod((long) 0, (long) 12, chronology56);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime46.plus((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.LocalDateTime.Property property59 = localDateTime46.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime46.minus(readableDuration60);
        int int62 = localDateTime61.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusMillis(122);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(0L, dateTimeZone69);
        org.joda.time.LocalDate localDate71 = dateMidnight70.toLocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusWeeks(100);
        org.joda.time.Chronology chronology74 = localDate71.getChronology();
        org.joda.time.LocalDate.Property property75 = localDate71.yearOfCentury();
        org.joda.time.LocalDate localDate76 = property75.roundCeilingCopy();
        org.joda.time.LocalDate.Property property77 = localDate76.weekyear();
        org.joda.time.LocalDate localDate79 = property77.addWrapFieldToCopy(12);
        org.joda.time.Period period81 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.hours();
        java.lang.String str83 = durationFieldType82.toString();
        org.joda.time.Period period85 = period81.withField(durationFieldType82, 2);
        int int86 = period81.size();
        org.joda.time.MutablePeriod mutablePeriod87 = period81.toMutablePeriod();
        org.joda.time.LocalDate localDate89 = localDate79.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod87, 2740);
        int[] intArray90 = localDate89.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = dateTimeField43.add((org.joda.time.ReadablePartial) localDateTime66, 999, intArray90, 2740);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.012S");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 53 + "'", int62 == 53);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hours" + "'", str83, "hours");
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1982, 1, 7]");
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.Period period8 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        java.lang.String str10 = durationFieldType9.toString();
        org.joda.time.Period period12 = period8.withField(durationFieldType9, 2);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        boolean boolean15 = period8.isSupported(durationFieldType13);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period8, 21);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology21);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        long long32 = interval30.getStartMillis();
        org.joda.time.Interval interval33 = interval23.overlap((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        org.joda.time.Duration duration52 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDate localDate54 = dateMidnight53.toLocalDate();
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        java.lang.String str56 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.secondOfDay();
        org.joda.time.Interval interval58 = interval23.withChronology(chronology55);
        org.joda.time.DurationField durationField59 = chronology55.seconds();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.clockhourOfHalfday();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime4.toMutableDateTime(chronology55);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime4.dayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hours" + "'", str10, "hours");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-61038316800000L) + "'", long32 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight25);
        int int28 = dateMidnight25.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        org.joda.time.Period period1 = org.joda.time.Period.months(1439);
        org.joda.time.Period period2 = new org.joda.time.Period((java.lang.Object) period1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology7);
        org.joda.time.Interval interval9 = yearMonthDay8.toInterval();
        org.joda.time.Period period10 = interval9.toPeriod();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        int int13 = periodType12.size();
        org.joda.time.Period period15 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        java.lang.String str17 = durationFieldType16.toString();
        org.joda.time.Period period19 = period15.withField(durationFieldType16, 2);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        int int54 = mutablePeriod52.getMinutes();
        org.joda.time.Period period56 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        java.lang.String str58 = durationFieldType57.toString();
        org.joda.time.Period period60 = period56.withField(durationFieldType57, 2);
        boolean boolean61 = mutablePeriod52.isSupported(durationFieldType57);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) mutablePeriod52, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology41.withZone(dateTimeZone65);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.DurationField durationField68 = chronology66.halfdays();
        org.joda.time.DurationField durationField69 = durationFieldType16.getField(chronology66);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) interval9, periodType12, chronology66);
        org.joda.time.PeriodType periodType71 = periodType12.withDaysRemoved();
        org.joda.time.PeriodType periodType72 = periodType71.withSecondsRemoved();
        org.joda.time.PeriodType periodType73 = periodType72.withYearsRemoved();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 25795116, periodType72);
        org.joda.time.PeriodType periodType75 = periodType72.withMinutesRemoved();
        org.joda.time.Period period76 = period1.normalizedStandard(periodType75);
        org.joda.time.format.PeriodFormatter periodFormatter77 = null;
        java.lang.String str78 = period1.toString(periodFormatter77);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hours" + "'", str17, "hours");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hours" + "'", str58, "hours");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 25755235L + "'", long64 == 25755235L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "P1439M" + "'", str78, "P1439M");
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval7 = dateMidnight2.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Interval interval34 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Period period37 = interval7.toPeriod(periodType35);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType39 = periodType38.withSecondsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withMillisRemoved();
        org.joda.time.Period period41 = period37.normalizedStandard(periodType40);
        org.joda.time.Period period51 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.hours();
        java.lang.String str53 = durationFieldType52.toString();
        org.joda.time.Period period55 = period51.withField(durationFieldType52, 2);
        org.joda.time.PeriodType periodType56 = period55.getPeriodType();
        org.joda.time.Period period57 = new org.joda.time.Period(32772, 25773844, 0, 25817560, 5, 52, 0, 25804551, periodType56);
        org.joda.time.Period period58 = period41.withPeriodType(periodType56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.dayOfYear();
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = property66.withMaximumValue();
        boolean boolean68 = period41.equals((java.lang.Object) localDateTime67);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hours" + "'", str53, "hours");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(0L, dateTimeZone8);
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks(100);
        org.joda.time.Chronology chronology13 = localDate10.getChronology();
        org.joda.time.LocalDate.Property property14 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate16 = localDate10.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property17 = localDate10.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.roundFloor();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology26);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay27.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) dateMidnight28, periodType32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateMidnight36.toDateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusDays(9);
        int int42 = dateTime39.getEra();
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime43.getZone();
        long long47 = dateTimeZone44.adjustOffset((long) 5, true);
        boolean boolean49 = dateTimeZone44.isStandardOffset((long) 3);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        java.lang.String str52 = dateTimeZone44.getShortName((long) (-292275054));
        org.joda.time.DateMidnight dateMidnight53 = localDate10.toDateMidnight(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(5097600000L, dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(26124860, 25789, (-429), 26045302, (-429), 440, dateTimeZone44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26045302 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 5L + "'", long47 == 5L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight53);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.monthOfYear();
        org.joda.time.DateMidnight dateMidnight34 = property32.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property32.getFieldType();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime27.property(dateTimeFieldType35);
        boolean boolean37 = dateMidnight4.isSupported(dateTimeFieldType35);
        java.lang.String str38 = dateTimeFieldType35.getName();
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay1.property(dateTimeFieldType35);
        int int40 = yearMonthDay1.getYear();
        int int41 = yearMonthDay1.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology45);
        org.joda.time.Interval interval47 = yearMonthDay46.toInterval();
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property50 = dateTime48.property(dateTimeFieldType49);
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateMidnight54.toDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(9);
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTime dateTime64 = dateTime48.toDateTime(dateTimeZone62);
        int int66 = dateTimeZone62.getStandardOffset((-1L));
        int int68 = dateTimeZone62.getStandardOffset((long) 25762033);
        org.joda.time.Interval interval69 = yearMonthDay1.toInterval(dateTimeZone62);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay1.minusDays(26146441);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay1.minusYears(26214236);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "monthOfYear" + "'", str38, "monthOfYear");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundCeiling();
        java.lang.String str5 = property3.getAsString();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundHalfEven();
        int int7 = mutableDateTime6.getMillisOfDay();
        int int8 = mutableDateTime6.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.centuryOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        int int13 = localDate12.getYearOfEra();
        java.lang.String str14 = localDate12.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        int int18 = localDate12.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property19 = localDate12.monthOfYear();
        org.joda.time.LocalDate localDate21 = localDate12.withYear(118);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0035-10-09" + "'", str14, "0035-10-09");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "secondOfDay" + "'", str16, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        mutableDateTime3.setMonthOfYear(11);
        mutableDateTime3.addMonths((-2));
        mutableDateTime3.addSeconds(924);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundFloor();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.weekOfWeekyear();
        int int9 = dateMidnight2.compareTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight12.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDate localDate30 = dateMidnight29.toLocalDate();
        org.joda.time.Period period32 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        java.lang.String str34 = durationFieldType33.toString();
        org.joda.time.Period period36 = period32.withField(durationFieldType33, 2);
        org.joda.time.Period period38 = period36.withMillis((int) '#');
        org.joda.time.LocalDate localDate39 = localDate30.minus((org.joda.time.ReadablePeriod) period38);
        java.lang.String str40 = period38.toString();
        org.joda.time.Duration duration41 = period38.toStandardDuration();
        long long42 = duration41.getMillis();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfFloor();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration41);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance();
        calendar49.setWeekDate(16, (int) (byte) 0, 7);
        int int55 = calendar49.getGreatestMinimum(0);
        calendar49.setMinimalDaysInFirstWeek(8);
        java.time.Instant instant58 = calendar49.toInstant();
        java.time.Instant instant59 = calendar49.toInstant();
        int int61 = calendar49.getLeastMaximum((int) (short) 10);
        calendar49.clear();
        int int63 = calendar49.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.fromCalendarFields(calendar49);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology68);
        int int70 = yearMonthDay69.size();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(0L, 100L, periodType73, chronology74);
        java.lang.Object obj76 = mutablePeriod75.clone();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(0L, 100L, periodType79, chronology80);
        mutablePeriod75.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay69.plus((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime85 = yearMonthDay83.toDateTimeAtCurrentTime(dateTimeZone84);
        int int87 = dateTimeZone84.getOffsetFromLocal(1645513759767L);
        org.joda.time.DateMidnight dateMidnight88 = localDate64.toDateMidnight(dateTimeZone84);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateMidnight88);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hours" + "'", str34, "hours");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT2H0.035S" + "'", str40, "PT2H0.035S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 7200035L + "'", long42 == 7200035L);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=8,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 11 + "'", int61 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateMidnight88);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        int int8 = dateTime5.getYearOfCentury();
        int int9 = dateTime5.getMillisOfDay();
        org.joda.time.DateTime dateTime11 = dateTime5.withSecondOfMinute(16);
        org.joda.time.DateTime dateTime13 = dateTime11.withSecondOfMinute(59);
        org.joda.time.DateTime dateTime15 = dateTime11.minus((long) 202);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        java.util.Date date6 = dateTime5.toDate();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType15 = periodType14.withMillisRemoved();
        int int16 = periodType15.size();
        org.joda.time.Period period18 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        java.lang.String str20 = durationFieldType19.toString();
        org.joda.time.Period period22 = period18.withField(durationFieldType19, 2);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        int int57 = mutablePeriod55.getMinutes();
        org.joda.time.Period period59 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.hours();
        java.lang.String str61 = durationFieldType60.toString();
        org.joda.time.Period period63 = period59.withField(durationFieldType60, 2);
        boolean boolean64 = mutablePeriod55.isSupported(durationFieldType60);
        long long67 = chronology44.add((org.joda.time.ReadablePeriod) mutablePeriod55, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology44.withZone(dateTimeZone68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DurationField durationField71 = chronology69.halfdays();
        org.joda.time.DurationField durationField72 = durationFieldType19.getField(chronology69);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) interval12, periodType15, chronology69);
        mutablePeriod73.addYears(7);
        org.joda.time.DateTime dateTime76 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.DateTime dateTime78 = dateTime76.withWeekOfWeekyear(19);
        org.joda.time.DateTime dateTime79 = dateTime76.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hours" + "'", str61, "hours");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 25755235L + "'", long67 == 25755235L);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        java.util.Date date1 = new java.util.Date((-71366399981L));
        org.junit.Assert.assertEquals(date1.toString(), "Thu Sep 28 00:00:00 UTC 1967");
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone10);
        int int16 = dateTimeZone10.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(25755035);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateMidnight15.toDateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusDays(9);
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        long long26 = dateTimeZone23.adjustOffset((long) 5, true);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone23);
        org.joda.time.DateTime dateTime30 = dateTime11.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime32 = dateTime11.plusMillis(683);
        int int33 = dateTime32.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 5L + "'", long26 == 5L);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 70524 + "'", int33 == 70524);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.Duration duration24 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableDuration) duration45);
        boolean boolean47 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration45);
        java.lang.String str48 = duration45.toString();
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime4.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.addWrapField((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime53 = property50.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = dateMidnight58.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks(0);
        org.joda.time.DateTime dateTime65 = dateTime61.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime68 = dateTime61.withField(dateTimeFieldType66, 15);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        int int72 = dateMidnight71.getEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = dateMidnight71.toDateTime(chronology73);
        org.joda.time.DateTime dateTime76 = dateTime74.minusWeeks(0);
        org.joda.time.DateTime dateTime77 = dateTime76.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime78 = dateTime76.toLocalTime();
        org.joda.time.LocalTime localTime80 = localTime78.minusMinutes(3);
        org.joda.time.LocalTime localTime82 = localTime78.minusMillis((-1));
        org.joda.time.DateTime dateTime83 = localTime82.toDateTimeToday();
        org.joda.time.LocalTime localTime85 = localTime82.minusMinutes(2022);
        org.joda.time.Chronology chronology86 = localTime82.getChronology();
        boolean boolean87 = dateTimeFieldType66.isSupported(chronology86);
        org.joda.time.TimeOfDay timeOfDay88 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ', chronology86);
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime((long) ' ', chronology86);
        org.joda.time.DateTimeZone dateTimeZone90 = chronology86.getZone();
        mutableDateTime53.setZone(dateTimeZone90);
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime53.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime93 = mutableDateTime53.toMutableDateTime();
        mutableDateTime93.addWeeks(25826196);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(timeOfDay88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(mutableDateTime93);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (-14), true);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.Period period26 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        java.lang.String str28 = durationFieldType27.toString();
        org.joda.time.Period period30 = period26.withField(durationFieldType27, 2);
        org.joda.time.Period period32 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        java.lang.String str34 = durationFieldType33.toString();
        org.joda.time.Period period36 = period32.withField(durationFieldType33, 2);
        org.joda.time.Period period37 = period30.minus((org.joda.time.ReadablePeriod) period36);
        int int38 = period37.getYears();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period41 = period37.withFieldAdded(durationFieldType39, 25787857);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime24.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.weekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-14L) + "'", long23 == (-14L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hours" + "'", str34, "hours");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateMidnight14.toString(dateTimeFormatter16);
        int int18 = dateMidnight14.getSecondOfDay();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight14.minus((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.addSeconds(25787857);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology30);
        org.joda.time.Interval interval32 = yearMonthDay31.toInterval();
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology37);
        org.joda.time.Interval interval39 = yearMonthDay38.toInterval();
        org.joda.time.Period period40 = interval39.toPeriod();
        long long41 = interval39.getStartMillis();
        org.joda.time.Interval interval42 = interval32.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        java.lang.Object obj51 = mutablePeriod50.clone();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        mutablePeriod50.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        org.joda.time.Duration duration61 = mutablePeriod50.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight45.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.LocalDate localDate63 = dateMidnight62.toLocalDate();
        org.joda.time.Chronology chronology64 = localDate63.getChronology();
        java.lang.String str65 = chronology64.toString();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.secondOfDay();
        org.joda.time.Interval interval67 = interval32.withChronology(chronology64);
        org.joda.time.DurationField durationField68 = chronology64.minutes();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) 14, chronology64);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.Period period71 = new org.joda.time.Period((-22404962L), chronology64);
        long long75 = chronology64.add((long) 25819244, (long) 25875461, 25804968);
        org.joda.time.DurationField durationField76 = chronology64.years();
        mutablePeriod20.setPeriod((-61567836512760L), chronology64);
        mutablePeriod20.setPeriod((long) 472, (long) (-59));
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT0.100S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str17, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-61038316800000L) + "'", long41 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "PT0.100S");
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[UTC]" + "'", str65, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 667715468909492L + "'", long75 == 667715468909492L);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((int) (short) 0);
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.Period period10 = period6.withField(durationFieldType7, 2);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        int int45 = mutablePeriod43.getMinutes();
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        boolean boolean52 = mutablePeriod43.isSupported(durationFieldType48);
        long long55 = chronology32.add((org.joda.time.ReadablePeriod) mutablePeriod43, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology32.withZone(dateTimeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.DurationField durationField59 = chronology57.halfdays();
        org.joda.time.DurationField durationField60 = durationFieldType7.getField(chronology57);
        mutableDateTime4.setChronology(chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.yearOfEra();
        int int65 = dateTimeField63.getMinimumValue(3692163384000L);
        org.joda.time.DurationField durationField66 = dateTimeField63.getDurationField();
        java.lang.String str67 = dateTimeField63.getName();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 25755235L + "'", long55 == 25755235L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "yearOfEra" + "'", str67, "yearOfEra");
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((-1547876279949L));
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        int int7 = yearMonthDay6.size();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = yearMonthDay20.toDateTimeAtCurrentTime(dateTimeZone21);
        int int24 = dateTimeZone21.getOffsetFromLocal(1645513759767L);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        long long27 = dateTimeZone21.previousTransition((long) 32769);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(dateTimeZone21);
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        int int35 = yearMonthDay34.size();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay34.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTimeAtCurrentTime(dateTimeZone49);
        int int52 = dateTimeZone49.getOffsetFromLocal(1645513759767L);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime54 = localDate28.toDateTime(localTime29, dateTimeZone49);
        int int55 = localDate28.getWeekyear();
        org.joda.time.LocalDate localDate57 = localDate28.withWeekyear(25957658);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = timeOfDay1.isEqual((org.joda.time.ReadablePartial) localDate57);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32769L + "'", long27 == 32769L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfYear();
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate32 = localDate28.minusYears((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime38 = property35.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        org.joda.time.Duration duration59 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight43.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime65 = property63.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime66 = property63.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        int int70 = dateMidnight69.getEra();
        org.joda.time.DateMidnight.Property property71 = dateMidnight69.monthOfYear();
        org.joda.time.DateMidnight dateMidnight73 = property71.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property71.getFieldType();
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime66.property(dateTimeFieldType74);
        boolean boolean76 = dateMidnight43.isSupported(dateTimeFieldType74);
        java.lang.String str77 = dateTimeFieldType74.getName();
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay40.property(dateTimeFieldType74);
        boolean boolean79 = mutableDateTime38.isSupported(dateTimeFieldType74);
        org.joda.time.LocalDate.Property property80 = localDate28.property(dateTimeFieldType74);
        org.joda.time.LocalDate localDate81 = property80.roundCeilingCopy();
        org.joda.time.LocalDate.Property property82 = localDate81.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer7, (org.joda.time.ReadablePartial) localDate81);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "monthOfYear" + "'", str77, "monthOfYear");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        int int6 = timeOfDay2.size();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay2.minusHours(42);
        org.joda.time.DateTime dateTime9 = timeOfDay8.toDateTimeToday();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay8.millisOfSecond();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        int int9 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime5.withMonthOfYear(8);
        org.joda.time.DateTime.Property property12 = dateTime5.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(100L);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        java.lang.String str10 = mutablePeriod8.toString();
        mutableDateTime3.add((org.joda.time.ReadablePeriod) mutablePeriod8, 2022);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime3.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateMidnight16.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusDays(9);
        int int22 = dateTime19.getEra();
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        long long27 = dateTimeZone24.adjustOffset((long) 5, true);
        mutableDateTime3.setZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = localDate1.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean32 = mutableDateTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.Duration duration53 = mutablePeriod42.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime59 = property57.roundFloor();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology63);
        org.joda.time.DateMidnight dateMidnight65 = yearMonthDay64.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight65.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime59, (org.joda.time.ReadableInstant) dateMidnight65, periodType69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight65.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Duration duration74 = duration53.toDuration();
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration74, 197192);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone78);
        int int80 = dateMidnight79.getEra();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = dateMidnight79.toDateTime(chronology81);
        org.joda.time.DateTime dateTime84 = dateTime82.plusDays(9);
        org.joda.time.DateTime.Property property85 = dateTime82.monthOfYear();
        org.joda.time.DateTime dateTime87 = dateTime82.plusDays(0);
        org.joda.time.DateTime dateTime89 = dateTime82.minusWeeks((-292275054));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = null;
        java.lang.String str91 = dateTime82.toString(dateTimeFormatter90);
        java.lang.String str93 = dateTime82.toString("2022-5-11 7:11:54");
        mutableDateTime30.setDate((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime95 = dateTime82.toDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.100S" + "'", str10, "PT0.100S");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 5L + "'", long27 == 5L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str91, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2022-5-11 7:11:54" + "'", str93, "2022-5-11 7:11:54");
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 11, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField50.getAsText(894, locale53);
        java.util.Calendar.Builder builder55 = builder0.setLocale(locale53);
        java.util.Calendar calendar56 = builder55.build();
        calendar56.setMinimalDaysInFirstWeek(885);
        int int59 = calendar56.getWeekYear();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "894" + "'", str54, "894");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=885,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1969 + "'", int59 == 1969);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        int int11 = property10.getMinimumValue();
        org.joda.time.DateTime dateTime12 = property10.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.minusHours(25795164);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay17 = property16.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay18 = property16.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.addToCopy(32769);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        org.joda.time.DateTimeField dateTimeField58 = property54.getField();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        java.lang.Object obj64 = mutablePeriod63.clone();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0L, 100L, periodType67, chronology68);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        int int71 = mutablePeriod69.getMinutes();
        boolean boolean72 = property54.equals((java.lang.Object) mutablePeriod69);
        java.lang.String str73 = property54.getAsString();
        org.joda.time.YearMonthDay yearMonthDay75 = property54.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay75.minusYears(25851001);
        org.joda.time.LocalDate localDate78 = yearMonthDay77.toLocalDate();
        int int79 = localDate78.getWeekOfWeekyear();
        int int80 = localDate78.getWeekyear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970" + "'", str73, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-25849032) + "'", int80 == (-25849032));
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(11);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime21 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.minusSeconds(25956861);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusHours(348);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMillis(25806820);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday();
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(49);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        mutablePeriod16.addMillis(0);
        mutablePeriod16.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.Duration duration50 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight34.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        java.lang.Object obj59 = mutablePeriod58.clone();
        java.lang.String str60 = mutablePeriod58.toString();
        mutableDateTime53.add((org.joda.time.ReadablePeriod) mutablePeriod58, 2022);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInstant) dateMidnight51, (org.joda.time.ReadableInstant) mutableDateTime53);
        mutableDateTime53.addWeekyears((int) (byte) 0);
        mutableDateTime53.setSecondOfMinute(8);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime53.yearOfEra();
        boolean boolean69 = dateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime53);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime53.setDayOfMonth(26147164);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26147164 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.100S" + "'", str60, "PT0.100S");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra(25877966);
        boolean boolean7 = dateTime3.isEqual((long) 202);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        calendar0.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("");
        calendar0.setTimeZone(timeZone10);
        calendar0.set(26164207, 18992, 26041708, 25866219, 298, 455308);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=827993523738388704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=26240040,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=95,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=26,SECOND=28,MILLISECOND=704,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        int int26 = mutablePeriod24.getMinutes();
        org.joda.time.Period period28 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        java.lang.String str30 = durationFieldType29.toString();
        org.joda.time.Period period32 = period28.withField(durationFieldType29, 2);
        boolean boolean33 = mutablePeriod24.isSupported(durationFieldType29);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay13.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay13.plusHours(59);
        org.joda.time.LocalTime localTime37 = timeOfDay13.toLocalTime();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        int int44 = period39.size();
        org.joda.time.MutablePeriod mutablePeriod45 = period39.toMutablePeriod();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(periodType46);
        org.joda.time.Period period48 = period39.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.LocalTime localTime49 = localTime37.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.LocalTime.Property property50 = localTime37.millisOfSecond();
        org.joda.time.DurationField durationField51 = property50.getRangeDurationField();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hours" + "'", str30, "hours");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        boolean boolean8 = interval5.isBeforeNow();
        org.joda.time.DateTime dateTime9 = interval5.getStart();
        org.joda.time.ReadableInterval readableInterval10 = null;
        boolean boolean11 = interval5.overlaps(readableInterval10);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(100L);
        org.joda.time.LocalDate localDate3 = localDate1.plusYears(1434);
        org.joda.time.Interval interval4 = localDate3.toInterval();
        org.joda.time.Interval interval6 = interval4.withStartMillis((long) 51550262);
        boolean boolean7 = interval4.isBeforeNow();
        long long8 = interval4.getEndMillis();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 45252691200000L + "'", long8 == 45252691200000L);
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 25755035, 2);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 11, chronology22);
        org.joda.time.DateTimeField dateTimeField47 = chronology22.secondOfMinute();
        org.joda.time.DurationField durationField48 = chronology22.years();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology52);
        int int54 = yearMonthDay53.size();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay53.plus((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay53.minusDays(11);
        java.lang.String str70 = yearMonthDay53.toString();
        int int71 = yearMonthDay53.getYear();
        org.joda.time.YearMonthDay.Property property72 = yearMonthDay53.year();
        org.joda.time.Chronology chronology73 = yearMonthDay53.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((java.lang.Object) durationField48, chronology73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 25755235L + "'", long45 == 25755235L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0035-10-10" + "'", str70, "0035-10-10");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        java.lang.String str8 = mutablePeriod6.toString();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6, 2022);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        long long25 = dateTimeZone22.adjustOffset((long) 5, true);
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        boolean boolean28 = timeZone27.observesDaylightTime();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone30);
        boolean boolean32 = timeZone27.hasSameRules(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.getName((-61038230400000L));
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        int int40 = dateMidnight39.getEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateMidnight39.toDateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(9);
        int int45 = dateTime42.getEra();
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime();
        int int47 = dateTime42.getWeekOfWeekyear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology51);
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = null;
        org.joda.time.format.DateTimeParser dateTimeParser54 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter53, dateTimeParser54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter55.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        int int61 = dateMidnight60.getEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = dateMidnight60.toDateTime(chronology62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusDays(9);
        int int66 = dateTime63.getEra();
        org.joda.time.DateTime dateTime67 = dateTime63.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime67.getZone();
        java.lang.String str69 = dateTimeZone68.toString();
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay(dateTimeZone68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter55.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = yearMonthDay52.toDateTimeAtMidnight(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime42.toMutableDateTime(dateTimeZone68);
        long long76 = dateTimeZone68.adjustOffset(0L, false);
        long long78 = dateTimeZone33.getMillisKeepLocal(dateTimeZone68, 813140578431660L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5L + "'", long25 == 5L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 813140578431660L + "'", long78 == 813140578431660L);
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = nameProvider0.getName(locale1, "", "0035-10-10");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        java.lang.String str27 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfDay();
        long long30 = dateTimeField28.roundHalfFloor(100L);
        java.util.Locale locale34 = new java.util.Locale("hi!", "");
        java.lang.String str35 = locale34.getDisplayVariant();
        java.lang.String str36 = locale34.getCountry();
        java.lang.String str37 = dateTimeField28.getAsShortText((long) 16, locale34);
        java.lang.String str40 = nameProvider0.getName(locale34, "0", "secondOfDay");
        java.util.Set<java.lang.Character> charSet41 = locale34.getExtensionKeys();
        boolean boolean42 = locale34.hasExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime12 = property8.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra(25816024);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTime.Property property16 = dateTime14.dayOfWeek();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime.Property property8 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusDays(0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(993);
        org.joda.time.DateTime dateTime15 = dateTime11.withMillisOfDay(6);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime11.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        int int18 = property17.get();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        long long21 = dateTimeField19.remainder(1672531200000L);
        org.joda.time.DurationField durationField22 = dateTimeField19.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.Interval interval6 = dateMidnight2.toInterval();
        long long7 = interval6.getStartMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale11 = locale10.stripExtensions();
        int int12 = property8.getMaximumShortTextLength(locale10);
        org.joda.time.DateTime dateTime13 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField14 = property8.getField();
        org.joda.time.DateTime dateTime15 = property8.withMinimumValue();
        org.joda.time.DateTime dateTime16 = property8.roundFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        java.io.IOException iOException1 = new java.io.IOException("2022-01-21T07:11:26.624");
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        date0.setDate((int) (byte) 100);
        java.lang.String str4 = date0.toLocaleString();
        date0.setTime((long) 25774925);
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date0);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        java.lang.String str9 = property8.getName();
        org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 07:09:34 GMT 1970");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-5-11 7:18:54" + "'", str4, "2022-5-11 7:18:54");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfMonth" + "'", str9, "dayOfMonth");
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusDays(1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.withDayOfMonth(26124860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26124860 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.secondOfMinute();
        int int46 = dateTimeField43.getDifference(2015L, (long) 25929306);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-25927) + "'", int46 == (-25927));
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        long long15 = dateTimeZone10.convertLocalToUTC((-61057903814155L), false, (long) 348);
        long long19 = dateTimeZone10.convertLocalToUTC((long) 20, true, (long) 25857530);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61057903814155L) + "'", long15 == (-61057903814155L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 20L + "'", long19 == 20L);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        long long7 = interval5.getStartMillis();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType13 = periodType12.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType12);
        org.joda.time.PeriodType periodType15 = periodType12.withSecondsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 25810113, periodType16);
        org.joda.time.Period period18 = new org.joda.time.Period((long) 33, periodType16);
        org.joda.time.Interval interval19 = interval5.withPeriodAfterStart((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology23);
        org.joda.time.Interval interval25 = yearMonthDay24.toInterval();
        org.joda.time.Period period26 = interval25.toPeriod();
        java.lang.String str27 = interval25.toString();
        long long28 = interval25.toDurationMillis();
        boolean boolean29 = interval5.isBefore((org.joda.time.ReadableInterval) interval25);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-61038316800000L) + "'", long7 == (-61038316800000L));
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str27, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 86400000L + "'", long28 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(0);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundCeilingCopy();
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(0L, dateTimeZone13);
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalDate localDate18 = localDate15.minusDays(169);
        org.joda.time.LocalDate.Property property19 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate21 = localDate15.withYear(1969);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime10, (org.joda.time.ReadablePartial) localDate21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        int int10 = localDate9.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusMonths(25799369);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundFloor();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.weekOfWeekyear();
        int int29 = dateMidnight22.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight22.getZone();
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay19.toDateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withMillis(25866219L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        org.joda.time.Duration duration56 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight40.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDate localDate58 = dateMidnight57.toLocalDate();
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        java.lang.Object obj65 = mutablePeriod64.clone();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        int int72 = mutablePeriod70.getMinutes();
        org.joda.time.Period period74 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.hours();
        java.lang.String str76 = durationFieldType75.toString();
        org.joda.time.Period period78 = period74.withField(durationFieldType75, 2);
        boolean boolean79 = mutablePeriod70.isSupported(durationFieldType75);
        long long82 = chronology59.add((org.joda.time.ReadablePeriod) mutablePeriod70, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Chronology chronology84 = chronology59.withZone(dateTimeZone83);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 11, chronology84);
        org.joda.time.DurationField durationField86 = chronology84.days();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology84);
        org.joda.time.DateTimeField dateTimeField88 = chronology84.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField89 = chronology84.weekyear();
        org.joda.time.DateTimeField dateTimeField90 = chronology84.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight31.withChronology(chronology84);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0.100S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hours" + "'", str76, "hours");
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 25755235L + "'", long82 == 25755235L);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateMidnight91);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getRangeDurationType();
        java.lang.String str4 = durationFieldType3.getName();
        int int5 = periodType1.indexOf(durationFieldType3);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        int int41 = mutablePeriod39.getMinutes();
        org.joda.time.Period period43 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        java.lang.String str45 = durationFieldType44.toString();
        org.joda.time.Period period47 = period43.withField(durationFieldType44, 2);
        boolean boolean48 = mutablePeriod39.isSupported(durationFieldType44);
        long long51 = chronology28.add((org.joda.time.ReadablePeriod) mutablePeriod39, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology28.withZone(dateTimeZone52);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 11, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(100L, periodType1, chronology53);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.hourOfDay();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology53);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "days" + "'", str4, "days");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "PT0.100S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hours" + "'", str45, "hours");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 25755235L + "'", long51 == 25755235L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        long long34 = dateTimeZone31.adjustOffset((long) 5, true);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.Duration duration53 = mutablePeriod42.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight37.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.LocalDate localDate55 = dateMidnight54.toLocalDate();
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        java.lang.Object obj62 = mutablePeriod61.clone();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        int int69 = mutablePeriod67.getMinutes();
        org.joda.time.Period period71 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.hours();
        java.lang.String str73 = durationFieldType72.toString();
        org.joda.time.Period period75 = period71.withField(durationFieldType72, 2);
        boolean boolean76 = mutablePeriod67.isSupported(durationFieldType72);
        long long79 = chronology56.add((org.joda.time.ReadablePeriod) mutablePeriod67, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.Chronology chronology81 = chronology56.withZone(dateTimeZone80);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(chronology81);
        boolean boolean83 = dateTimeZone31.equals((java.lang.Object) localDate82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter2.withZone(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology86 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forOffsetMillis(259);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter2.withZone(dateTimeZone88);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter89.withDefaultYear(2100);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hours" + "'", str73, "hours");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 25755235L + "'", long79 == 25755235L);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.set("2");
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray16 = mutablePeriod15.getValues();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType22 = periodType21.withMillisRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 10, (long) '#', periodType22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType22);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Hours hours26 = period24.toStandardHours();
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period29 = period24.plusSeconds(0);
        org.joda.time.Period period31 = period24.plusMonths(20);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.Duration duration50 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight34.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime57 = property54.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        int int61 = dateMidnight60.getEra();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.monthOfYear();
        org.joda.time.DateMidnight dateMidnight64 = property62.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property62.getFieldType();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime57.property(dateTimeFieldType65);
        boolean boolean67 = dateMidnight34.isSupported(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType65.getDurationType();
        org.joda.time.Chronology chronology69 = null;
        boolean boolean70 = durationFieldType68.isSupported(chronology69);
        boolean boolean71 = period24.isSupported(durationFieldType68);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(18, 25767397, 42, 2022, 14, 31556952, 25762147, 2000);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Period period22 = interval21.toPeriod();
        long long23 = interval21.getStartMillis();
        org.joda.time.Interval interval24 = interval14.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval30.withPeriodBeforeEnd(readablePeriod31);
        boolean boolean33 = interval14.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology37);
        org.joda.time.Interval interval39 = yearMonthDay38.toInterval();
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean42 = interval39.isAfter(100L);
        boolean boolean43 = interval32.isAfter((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Interval interval44 = interval32.toInterval();
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone62);
        org.joda.time.Duration duration64 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight48.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.LocalDate localDate66 = dateMidnight65.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Interval interval68 = localDate66.toInterval(dateTimeZone67);
        java.lang.String str69 = interval68.toString();
        long long70 = interval68.toDurationMillis();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology74);
        org.joda.time.Interval interval76 = yearMonthDay75.toInterval();
        org.joda.time.Period period77 = interval76.toPeriod();
        long long78 = interval76.getStartMillis();
        boolean boolean79 = interval68.isBefore((org.joda.time.ReadableInterval) interval76);
        org.joda.time.DateTime dateTime80 = interval76.getStart();
        boolean boolean81 = interval44.contains((org.joda.time.ReadableInterval) interval76);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval44);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61038316800000L) + "'", long23 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str69, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 86400000L + "'", long70 == 86400000L);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-61038316800000L) + "'", long78 == (-61038316800000L));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 25755035, 2);
        boolean boolean46 = durationFieldType0.isSupported(chronology22);
        org.joda.time.DateTimeZone dateTimeZone47 = chronology22.getZone();
        long long51 = chronology22.add((long) 6, (long) ' ', 0);
        org.joda.time.DurationField durationField52 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField53 = chronology22.minuteOfHour();
        org.joda.time.DurationField durationField54 = chronology22.centuries();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 25755235L + "'", long45 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 6L + "'", long51 == 6L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.Interval interval13 = interval5.withEnd((org.joda.time.ReadableInstant) mutableDateTime12);
        boolean boolean15 = interval5.isAfter((long) (byte) 0);
        boolean boolean17 = interval5.isAfter(3155760000000L);
        org.joda.time.Period period18 = interval5.toPeriod();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        org.joda.time.Period period3 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        java.lang.String str5 = durationFieldType4.toString();
        org.joda.time.Period period7 = period3.withField(durationFieldType4, 2);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        int int42 = mutablePeriod40.getMinutes();
        org.joda.time.Period period44 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        java.lang.String str46 = durationFieldType45.toString();
        org.joda.time.Period period48 = period44.withField(durationFieldType45, 2);
        boolean boolean49 = mutablePeriod40.isSupported(durationFieldType45);
        long long52 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod40, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology29.withZone(dateTimeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DurationField durationField56 = chronology54.halfdays();
        org.joda.time.DurationField durationField57 = durationFieldType4.getField(chronology54);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 11, chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(32400491L, chronology54);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hours" + "'", str5, "hours");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours" + "'", str46, "hours");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 25755235L + "'", long52 == 25755235L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateMidnight9.toDateTimeISO();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        java.lang.String str17 = yearMonthDay16.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay16.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        int int54 = mutablePeriod52.getMinutes();
        org.joda.time.Period period56 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        java.lang.String str58 = durationFieldType57.toString();
        org.joda.time.Period period60 = period56.withField(durationFieldType57, 2);
        boolean boolean61 = mutablePeriod52.isSupported(durationFieldType57);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) mutablePeriod52, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology41.withZone(dateTimeZone65);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight19, chronology66);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(obj11, chronology66);
        org.joda.time.DateTime dateTime70 = dateTime10.withChronology(chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0035-10-10" + "'", str17, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hours" + "'", str58, "hours");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 25755235L + "'", long64 == 25755235L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.contains((long) 4);
        org.joda.time.Period period10 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        java.lang.String str12 = durationFieldType11.toString();
        org.joda.time.Period period14 = period10.withField(durationFieldType11, 2);
        org.joda.time.Period period16 = period14.withMillis((int) '#');
        org.joda.time.Interval interval17 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime43 = property40.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        int int47 = dateMidnight46.getEra();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.monthOfYear();
        org.joda.time.DateMidnight dateMidnight50 = property48.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property48.getFieldType();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime43.property(dateTimeFieldType51);
        boolean boolean53 = dateMidnight20.isSupported(dateTimeFieldType51);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight20.minusWeeks(16);
        int int56 = dateMidnight55.getDayOfMonth();
        org.joda.time.Interval interval57 = dateMidnight55.toInterval();
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.Interval interval59 = interval57.toInterval();
        boolean boolean60 = interval5.overlaps((org.joda.time.ReadableInterval) interval57);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hours" + "'", str12, "hours");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = date1.getHours();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromDateFields(date1);
        java.lang.String str6 = localTime4.toString("86399");
        org.joda.time.LocalTime.Property property7 = localTime4.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = property7.setCopy(25824226);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25824226 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "86399" + "'", str6, "86399");
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        date0.setDate((int) (byte) 100);
        java.lang.String str4 = date0.toLocaleString();
        date0.setTime((long) 25774925);
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date0);
        date0.setMinutes((int) '4');
        org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 07:52:34 GMT 1970");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-5-11 7:18:55" + "'", str4, "2022-5-11 7:18:55");
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        int int52 = yearMonthDay3.getYear();
        org.joda.time.Period period57 = new org.joda.time.Period(51, 25773761, 14, 48);
        org.joda.time.Period period59 = period57.withMinutes(25755035);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay3.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        int int10 = timeOfDay9.size();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.plusMinutes(292269054);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusMinutes((-429));
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusHours(25790484);
        int int17 = timeOfDay14.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = timeOfDay14.withSecondOfMinute(26029914);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26029914 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 45 + "'", int17 == 45);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay4.minusDays(11);
        int int21 = yearMonthDay20.size();
        java.lang.String str22 = yearMonthDay20.toString();
        org.joda.time.Interval interval23 = yearMonthDay20.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0035-09-29" + "'", str22, "0035-09-29");
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.Period period46 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        java.lang.String str48 = durationFieldType47.toString();
        org.joda.time.Period period50 = period46.withField(durationFieldType47, 2);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        boolean boolean53 = period46.isSupported(durationFieldType51);
        java.lang.String str54 = durationFieldType51.getName();
        int int55 = mutablePeriod32.indexOf(durationFieldType51);
        mutablePeriod32.addDays(2021);
        mutablePeriod32.setWeeks(571);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hours" + "'", str48, "hours");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        org.joda.time.Period period42 = period40.withMillis((int) '#');
        org.joda.time.LocalDate localDate43 = localDate34.minus((org.joda.time.ReadablePeriod) period42);
        int int44 = period42.getMonths();
        org.joda.time.Period period46 = period42.minusMinutes(8);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadablePeriod) period42);
        java.util.Date date48 = mutableDateTime4.toDate();
        int int49 = date48.getDate();
        org.joda.time.YearMonthDay yearMonthDay50 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.plusMonths(87);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology56);
        org.joda.time.format.DateTimePrinter dateTimePrinter58 = null;
        org.joda.time.format.DateTimeParser dateTimeParser59 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter58, dateTimeParser59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter60.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone64);
        int int66 = dateMidnight65.getEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = dateMidnight65.toDateTime(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(9);
        int int71 = dateTime68.getEra();
        org.joda.time.DateTime dateTime72 = dateTime68.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime72.getZone();
        java.lang.String str74 = dateTimeZone73.toString();
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay(dateTimeZone73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter60.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime77 = yearMonthDay57.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now(dateTimeZone73);
        org.joda.time.Interval interval79 = yearMonthDay52.toInterval(dateTimeZone73);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Mon Jan 09 00:00:00 GMT 2023");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(interval79);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        mutablePeriod4.addMillis(0);
        mutablePeriod4.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        java.lang.String str48 = mutablePeriod46.toString();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46, 2022);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime41.toMutableDateTime();
        int int53 = mutableDateTime41.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime41.getZone();
        int int55 = mutableDateTime41.getDayOfWeek();
        mutableDateTime41.setWeekyear(86375307);
        org.joda.time.DateTimeField dateTimeField58 = mutableDateTime41.getRoundingField();
        int int59 = mutableDateTime41.getEra();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime8.withZoneRetainFields(dateTimeZone19);
        int int24 = dateTime8.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime8.minusHours(12);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = property51.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime53 = property51.roundFloor();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology57);
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay58.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) dateMidnight59, periodType63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight59.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Duration duration68 = duration47.toDuration();
        org.joda.time.DateTime dateTime69 = dateTime8.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone74);
        int int76 = dateMidnight75.getEra();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateMidnight75.toDateTime(chronology77);
        org.joda.time.DateTime dateTime80 = dateTime78.plusDays(9);
        int int81 = dateTime78.getEra();
        org.joda.time.DateTime dateTime82 = dateTime78.toDateTime();
        org.joda.time.DateTime.Property property83 = dateTime82.secondOfDay();
        org.joda.time.DateTime dateTime84 = property83.roundCeilingCopy();
        mutableDateTime72.setDate((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(0L, 100L, periodType88, chronology89);
        java.lang.Object obj91 = mutablePeriod90.clone();
        org.joda.time.Chronology chronology94 = null;
        mutablePeriod90.setPeriod((long) 0, (long) 12, chronology94);
        mutableDateTime72.add((org.joda.time.ReadablePeriod) mutablePeriod90);
        int int97 = mutableDateTime72.getWeekyear();
        int int98 = dateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime72);
        java.lang.String str99 = dateTime8.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "PT0.012S");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1970 + "'", int97 == 1970);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "1970-01-01T00:00:00.100Z" + "'", str99, "1970-01-01T00:00:00.100Z");
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.TimeOfDay timeOfDay28 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay29 = property8.withMaximumValue();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.minusHours(26180017);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(292269054);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology(chronology7);
        boolean boolean9 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withDefaultYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 964);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType9 = periodType8.withMillisRemoved();
        int int10 = periodType9.size();
        org.joda.time.Period period12 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        org.joda.time.Period period16 = period12.withField(durationFieldType13, 2);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        int int51 = mutablePeriod49.getMinutes();
        org.joda.time.Period period53 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.Period period57 = period53.withField(durationFieldType54, 2);
        boolean boolean58 = mutablePeriod49.isSupported(durationFieldType54);
        long long61 = chronology38.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology38.withZone(dateTimeZone62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        org.joda.time.DurationField durationField66 = durationFieldType13.getField(chronology63);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) interval6, periodType9, chronology63);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) '#', chronology63);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = property69.getField();
        java.lang.String str71 = dateTimeField70.getName();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.year();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.plusYears(25945297);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone78);
        int int80 = dateMidnight79.getEra();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = dateMidnight79.toDateTime(chronology81);
        java.util.Date date83 = dateTime82.toDate();
        org.joda.time.YearMonthDay yearMonthDay84 = org.joda.time.YearMonthDay.fromDateFields(date83);
        int[] intArray85 = yearMonthDay84.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField70.addWrapField((org.joda.time.ReadablePartial) localDateTime72, 26306179, intArray85, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26306179");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hours" + "'", str55, "hours");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 25755235L + "'", long61 == 25755235L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "secondOfMinute" + "'", str71, "secondOfMinute");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1970, 1, 1]");
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.era();
        int int16 = dateMidnight14.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.plusWeeks(70);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.year();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.DateMidnight dateMidnight21 = property19.getDateMidnight();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateMidnight32.toDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusDays(9);
        int int38 = dateTime35.getEra();
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime39.getZone();
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.Chronology chronology42 = chronology29.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField43 = chronology29.year();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight21.withChronology(chronology29);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(813869065699200000L, chronology29);
        org.joda.time.Period period46 = new org.joda.time.Period(6652800005L, 2575642908L, chronology29);
        org.joda.time.DateTimeField dateTimeField47 = chronology29.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(23, 769, 25810041, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 769 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(324, 1982, 366, 25944538);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 324 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        int int16 = mutablePeriod4.getYears();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        int int26 = periodType25.size();
        org.joda.time.Period period28 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        java.lang.String str30 = durationFieldType29.toString();
        org.joda.time.Period period32 = period28.withField(durationFieldType29, 2);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int67 = mutablePeriod65.getMinutes();
        org.joda.time.Period period69 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.hours();
        java.lang.String str71 = durationFieldType70.toString();
        org.joda.time.Period period73 = period69.withField(durationFieldType70, 2);
        boolean boolean74 = mutablePeriod65.isSupported(durationFieldType70);
        long long77 = chronology54.add((org.joda.time.ReadablePeriod) mutablePeriod65, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.Chronology chronology79 = chronology54.withZone(dateTimeZone78);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.DurationField durationField81 = chronology79.halfdays();
        org.joda.time.DurationField durationField82 = durationFieldType29.getField(chronology79);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) interval22, periodType25, chronology79);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval22);
        int int85 = mutablePeriod4.size();
        int int86 = mutablePeriod4.getYears();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P1D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P1D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P1D");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hours" + "'", str30, "hours");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hours" + "'", str71, "hours");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 25755235L + "'", long77 == 25755235L);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight19 = dateTime18.toDateMidnight();
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.era();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight22 = property20.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight24 = property20.addWrapFieldToCopy(25824083);
        boolean boolean25 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateTime dateTime27 = dateTime5.withMillisOfDay(25885);
        org.joda.time.DateTime dateTime28 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(0L, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableDuration) duration51, periodType53);
        org.joda.time.Period period56 = period54.withMillis(21);
        org.joda.time.Seconds seconds57 = period56.toStandardSeconds();
        org.joda.time.DateTime dateTime58 = dateTime5.minus((org.joda.time.ReadablePeriod) seconds57);
        org.joda.time.LocalTime localTime59 = dateTime5.toLocalTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(25762033, 21, 32769);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int15 = property13.getMaximumTextLength(locale14);
        java.util.Calendar.Builder builder16 = builder0.setLocale(locale14);
        java.util.Calendar calendar17 = builder16.build();
        calendar17.set(169, 70, (int) (short) -1, 70, 20);
        java.lang.String str24 = calendar17.getCalendarType();
        calendar17.setFirstDayOfWeek(52);
        int int27 = calendar17.getWeeksInWeekYear();
        calendar17.set(25880429, 25773844, 25778198, 25797133, 25893152);
        boolean boolean35 = calendar17.after((java.lang.Object) 1645514199069L);
        int int36 = calendar17.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=52,minimalDaysInFirstWeek=1,ERA=1,YEAR=25880429,MONTH=25773844,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=25778198,DAY_OF_YEAR=171,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=25797133,MINUTE=25893152,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gregory" + "'", str24, "gregory");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod7.setPeriod((long) 0, (long) 12, chronology11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime.Property property14 = localDateTime1.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime1.minus(readableDuration15);
        int int17 = localDateTime16.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(25755126);
        int int23 = localDateTime16.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withYearOfEra(53);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.minusMillis(506);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType29 = localDateTime16.getFieldType(28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 28");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.012S");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 56 + "'", int17 == 56);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 215 + "'", int23 == 215);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 10, (long) '#', periodType8);
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType8);
        org.joda.time.PeriodType periodType11 = periodType8.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(32769L, periodType8);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) 1, periodType8);
        org.joda.time.Period period14 = new org.joda.time.Period((long) 30, periodType8);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setWeekDate(16, (int) (byte) 0, 7);
        calendar15.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date24 = calendar15.getTime();
        java.lang.String str25 = calendar15.getCalendarType();
        java.time.Instant instant26 = calendar15.toInstant();
        java.util.Date date27 = java.util.Date.from(instant26);
        boolean boolean28 = period14.equals((java.lang.Object) date27);
        int int29 = date27.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromDateFields(date27);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minusMillis(327);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-61830837663764,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=56,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 31 07:18:56 GMT 10");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 31 07:18:56 GMT 10");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 25811620, chronology38);
        org.joda.time.DurationField durationField46 = chronology38.hours();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.property(dateTimeFieldType13);
        java.lang.String str15 = mutableDateTime5.toString();
        mutableDateTime5.setMillisOfDay((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime5.secondOfMinute();
        int int20 = property19.getMinimumValueOverall();
        int int21 = property19.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str15, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getRangeDurationType();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.LocalDate localDate10 = localDate3.withFieldAdded(durationFieldType7, 2022);
        org.joda.time.LocalDate.Property property11 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate13 = localDate3.withWeekyear(0);
        org.joda.time.LocalDate localDate15 = localDate13.minusDays(1439);
        int int16 = localDate13.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "days" + "'", str8, "days");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        int int14 = yearMonthDay13.size();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay13.plus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = yearMonthDay27.toDateTimeAtCurrentTime(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal(1645513759767L);
        org.joda.time.DateTime dateTime32 = localDate8.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime.Property property33 = dateTime32.monthOfYear();
        int int34 = dateTime32.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1);
        boolean boolean15 = dateMidnight12.isEqual((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.plusYears(25762033);
        org.joda.time.DateMidnight.Property property18 = dateMidnight14.dayOfWeek();
        java.util.Locale locale22 = new java.util.Locale("52", "0135-01-14");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight23 = property18.setCopy("2022-02-15T07:12:47.519Z", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:12:47.519Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals(locale22.toString(), "52_0135-01-14");
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(0L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        int int7 = dateMidnight6.getEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration23, periodType25);
        org.joda.time.Period period28 = period26.withMillis(21);
        org.joda.time.Period period30 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        java.lang.String str32 = durationFieldType31.toString();
        org.joda.time.Period period34 = period30.withField(durationFieldType31, 2);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        java.lang.String str36 = durationFieldType35.toString();
        boolean boolean37 = period30.isSupported(durationFieldType35);
        java.lang.String str38 = durationFieldType35.getName();
        org.joda.time.Period period40 = period26.withField(durationFieldType35, (int) (short) 1);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        java.lang.String str43 = periodType42.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        int int47 = dateMidnight46.getEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateMidnight46.toDateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks(0);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime53 = dateTime51.toLocalTime();
        org.joda.time.LocalTime localTime55 = localTime53.minusMinutes(3);
        org.joda.time.LocalTime localTime57 = localTime53.minusMillis((-1));
        org.joda.time.DateTime dateTime58 = localTime57.toDateTimeToday();
        org.joda.time.LocalTime localTime60 = localTime57.minusMinutes(2022);
        org.joda.time.Chronology chronology61 = localTime57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 348, periodType42, chronology61);
        boolean boolean63 = durationFieldType35.isSupported(chronology61);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.halfdayOfDay();
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1890), chronology61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay((java.lang.Object) (-1890));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hours" + "'", str32, "hours");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hours" + "'", str36, "hours");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[Time]" + "'", str43, "PeriodType[Time]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localTime67);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.era();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray53 = mutablePeriod52.getValues();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType59 = periodType58.withMillisRemoved();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 10, (long) '#', periodType59);
        org.joda.time.Period period61 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType59);
        mutablePeriod52.add((org.joda.time.ReadablePeriod) period61);
        int[] intArray64 = chronology37.get((org.joda.time.ReadablePeriod) mutablePeriod52, (long) 25787004);
        long long68 = chronology37.add(0L, 2650838400000L, 0);
        org.joda.time.DateMidnight dateMidnight69 = org.joda.time.DateMidnight.now(chronology37);
        org.joda.time.DateTimeField dateTimeField70 = chronology37.era();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 7, 9, 47, 4]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        java.lang.String str6 = mutableDateTime5.toString();
        mutableDateTime5.addSeconds((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) 25755035, dateTimeZone12);
        mutableDateTime5.setZoneRetainFields(dateTimeZone12);
        mutableDateTime5.setTime((long) (-54));
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateMidnight19.toDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusDays(9);
        mutableDateTime5.setTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfDay();
        org.joda.time.DateTime.Property property36 = dateTime32.monthOfYear();
        org.joda.time.DateTime dateTime37 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime39 = dateTime37.withMillis(1076829407550L);
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str6, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-15T07:15:02.179");
        java.util.Locale locale2 = locale1.stripExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDate.Property property13 = localDate11.property(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withFields(readablePartial18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L, dateTimeZone21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks(100);
        org.joda.time.Chronology chronology26 = localDate23.getChronology();
        org.joda.time.LocalDate.Property property27 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate29 = localDate23.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property30 = localDate23.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime57 = property55.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime58 = property55.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone60);
        int int62 = dateMidnight61.getEra();
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.monthOfYear();
        org.joda.time.DateMidnight dateMidnight65 = property63.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property63.getFieldType();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime58.property(dateTimeFieldType66);
        boolean boolean68 = dateMidnight35.isSupported(dateTimeFieldType66);
        java.lang.String str69 = dateTimeFieldType66.getName();
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay32.property(dateTimeFieldType66);
        java.lang.String str71 = dateTimeFieldType66.toString();
        org.joda.time.LocalDate.Property property72 = localDate23.property(dateTimeFieldType66);
        org.joda.time.DateMidnight.Property property73 = dateMidnight19.property(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "monthOfYear" + "'", str69, "monthOfYear");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "monthOfYear" + "'", str71, "monthOfYear");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay4.toDateMidnight(dateTimeZone6);
        int int8 = yearMonthDay4.getMonthOfYear();
        org.joda.time.DateTime dateTime9 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.withYear(993);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusYears(25791265);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = new java.util.Locale("", "ISOChronology[UTC]");
        java.util.Locale.setDefault(category15, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setWeekDate(16, (int) (byte) 0, 7);
        calendar21.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date30 = calendar21.getTime();
        java.lang.String str31 = calendar21.getCalendarType();
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale.setDefault(category34, locale36);
        java.util.Map<java.lang.String, java.lang.Integer> strMap39 = calendar21.getDisplayNames(3, (int) (short) 1, locale36);
        java.lang.String str40 = locale36.getVariant();
        java.util.Locale.setDefault(category15, locale36);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = null;
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter44.withPivotYear((int) (byte) 10);
        boolean boolean47 = dateTimeFormatter46.isParser();
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.000Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter46.withLocale(locale49);
        java.lang.String str51 = locale49.getDisplayLanguage();
        java.lang.String str52 = locale49.getDisplayName();
        java.util.Locale.setDefault(category15, locale49);
        java.util.Locale locale54 = java.util.Locale.getDefault(category15);
        java.util.Locale locale55 = java.util.Locale.getDefault(category15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = yearMonthDay11.toString("2022-02-15T07:13:29.401Z", locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale18.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61830837663495,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=56,MILLISECOND=505,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 31 07:18:56 UTC 10");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "gregory" + "'", str31, "gregory");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, 100L, periodType3, chronology4);
        java.lang.Object obj6 = mutablePeriod5.clone();
        mutablePeriod5.addHours(5);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod5.copy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks(0);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime21 = dateTime19.toLocalTime();
        org.joda.time.LocalTime localTime23 = localTime21.minusMinutes(3);
        org.joda.time.LocalTime.Property property24 = localTime21.minuteOfHour();
        org.joda.time.LocalTime.Property property25 = localTime21.millisOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        org.joda.time.LocalTime localTime27 = property25.withMinimumValue();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        mutablePeriod9.setPeriod((-22404962L), 6652800005L, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfWeek();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((long) (-14), chronology28);
        int int32 = timeOfDay31.getHourOfDay();
        org.joda.time.TimeOfDay.Property property33 = timeOfDay31.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay31.minusHours(26047387);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime38 = localTime36.plusHours(12);
        org.joda.time.LocalTime localTime40 = localTime36.withMinuteOfHour(14);
        org.joda.time.LocalTime.Property property41 = localTime40.hourOfDay();
        org.joda.time.LocalTime.Property property42 = localTime40.millisOfDay();
        int int43 = property42.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay46 = timeOfDay31.withField(dateTimeFieldType44, 27971406);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "P2M2W4DT6H13M24.967S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "P2M2W4DT6H13M24.967S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "P2M2W4DT6H13M24.967S");
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Interval interval9 = interval7.withEndMillis((long) 2);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Period period23 = interval22.toPeriod();
        long long24 = interval22.getStartMillis();
        org.joda.time.Interval interval25 = interval15.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.Duration duration44 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight28.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.LocalDate localDate46 = dateMidnight45.toLocalDate();
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        java.lang.String str48 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.secondOfDay();
        org.joda.time.Interval interval50 = interval15.withChronology(chronology47);
        org.joda.time.DurationField durationField51 = chronology47.minutes();
        org.joda.time.Interval interval52 = interval9.withChronology(chronology47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 26239640, (long) 401, chronology47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-61038316800000L) + "'", long24 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.100S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(interval52);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        mutableDateTime3.setMonthOfYear(11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.set("0");
        org.joda.time.MutableDateTime mutableDateTime14 = property10.add((long) 25788046);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        int int27 = mutablePeriod25.getMinutes();
        int[] intArray28 = mutablePeriod25.getValues();
        org.joda.time.PeriodType periodType29 = mutablePeriod25.getPeriodType();
        mutableDateTime14.add((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime57 = property55.roundFloor();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology61);
        org.joda.time.DateMidnight dateMidnight63 = yearMonthDay62.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, (org.joda.time.ReadableInstant) dateMidnight63, periodType67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight63.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.Duration duration72 = duration51.toDuration();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType76 = periodType75.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType75);
        org.joda.time.PeriodType periodType78 = periodType75.withSecondsRemoved();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableDuration) duration51, periodType78);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration51);
        mutableDateTime3.addSeconds(794);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType78);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        date0.setDate((int) (byte) 100);
        java.lang.String str4 = date0.toLocaleString();
        date0.setTime((long) 25774925);
        date0.setMonth(2021);
        date0.setTime((long) 42);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromDateFields(date0);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "May 11, 2022 7:18:56 AM" + "'", str4, "May 11, 2022 7:18:56 AM");
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(9, 0, 25755035, (int) (byte) 1, 3, 7, (int) (short) 0, 21);
        java.lang.String str24 = mutablePeriod23.toString();
        org.joda.time.LocalTime localTime25 = localTime13.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod23.add(durationFieldType26, 25773761);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        mutablePeriod34.addHours(5);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod34.copy();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        int int44 = dateMidnight43.getEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateMidnight43.toDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(0);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime50 = dateTime48.toLocalTime();
        org.joda.time.LocalTime localTime52 = localTime50.minusMinutes(3);
        org.joda.time.LocalTime.Property property53 = localTime50.minuteOfHour();
        org.joda.time.LocalTime.Property property54 = localTime50.millisOfDay();
        org.joda.time.LocalTime localTime55 = property54.withMinimumValue();
        org.joda.time.LocalTime localTime56 = property54.withMinimumValue();
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        mutablePeriod38.setPeriod((-22404962L), 6652800005L, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfWeek();
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay((long) (-14), chronology57);
        org.joda.time.DurationField durationField61 = chronology57.hours();
        boolean boolean62 = durationFieldType26.isSupported(chronology57);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P9Y25755035W1DT3H7M0.021S" + "'", str24, "P9Y25755035W1DT3H7M0.021S");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "P2M2W4DT6H13M24.967S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "P2M2W4DT6H13M24.967S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "P2M2W4DT6H13M24.967S");
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        java.util.Date date6 = new java.util.Date((int) (short) 10, 32769, 9, 9, 22, 21);
        date6.setYear(4);
        int int9 = date6.getMinutes();
        date6.setSeconds(26183686);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Aug 08 10:36:46 UTC 1905");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Duration duration6 = interval5.toDuration();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundFloor();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay42.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateMidnight43, periodType47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight43.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Period period52 = duration31.toPeriod();
        mutablePeriod11.setPeriod((org.joda.time.ReadableDuration) duration31);
        java.lang.Object obj54 = null;
        boolean boolean55 = duration31.equals(obj54);
        org.joda.time.Interval interval56 = interval5.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight59.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval64 = dateMidnight59.toInterval();
        org.joda.time.Interval interval66 = interval64.withStartMillis(7200035L);
        org.joda.time.Interval interval67 = interval56.overlap((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology71);
        org.joda.time.Interval interval73 = yearMonthDay72.toInterval();
        org.joda.time.Period period74 = interval73.toPeriod();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology78);
        org.joda.time.Interval interval80 = yearMonthDay79.toInterval();
        org.joda.time.Period period81 = interval80.toPeriod();
        long long82 = interval80.getStartMillis();
        org.joda.time.Interval interval83 = interval73.overlap((org.joda.time.ReadableInterval) interval80);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology87);
        org.joda.time.Interval interval89 = yearMonthDay88.toInterval();
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Interval interval91 = interval89.withPeriodBeforeEnd(readablePeriod90);
        boolean boolean92 = interval73.overlaps((org.joda.time.ReadableInterval) interval91);
        org.joda.time.Interval interval93 = interval73.toInterval();
        long long94 = interval73.getStartMillis();
        boolean boolean95 = interval56.isAfter((org.joda.time.ReadableInterval) interval73);
        long long96 = interval56.toDurationMillis();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNull(interval67);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-61038316800000L) + "'", long82 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-61038316800000L) + "'", long94 == (-61038316800000L));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 100L + "'", long96 == 100L);
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        org.joda.time.Period period42 = period40.withMillis((int) '#');
        org.joda.time.LocalDate localDate43 = localDate34.minus((org.joda.time.ReadablePeriod) period42);
        int int44 = period42.getMonths();
        org.joda.time.Period period46 = period42.minusMinutes(8);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        mutablePeriod53.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        java.lang.Object obj65 = mutablePeriod64.clone();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone73);
        org.joda.time.Duration duration75 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableDuration) duration75);
        mutablePeriod53.add((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval78 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration75);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone80);
        int int82 = dateMidnight81.getEra();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = dateMidnight81.toDateTime(chronology83);
        org.joda.time.DateTime dateTime86 = dateTime84.plusDays(9);
        org.joda.time.DateTime.Property property87 = dateTime84.monthOfYear();
        org.joda.time.DateTime dateTime89 = dateTime84.plusDays(0);
        org.joda.time.DateTime dateTime90 = dateTime89.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime92 = dateTime90.plusYears(993);
        boolean boolean93 = interval47.isAfter((org.joda.time.ReadableInstant) dateTime90);
        long long94 = interval47.toDurationMillis();
        org.joda.time.Interval interval95 = interval47.toInterval();
        long long96 = interval47.getStartMillis();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT0.100S");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 7200035L + "'", long94 == 7200035L);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1673222400000L + "'", long96 == 1673222400000L);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        java.util.Locale locale11 = new java.util.Locale("hi!", "");
        java.lang.String str12 = property8.getAsShortText(locale11);
        org.joda.time.TimeOfDay timeOfDay14 = property8.addWrapFieldToCopy((-5087));
        org.joda.time.TimeOfDay timeOfDay16 = property8.addWrapFieldToCopy(25799369);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withDayOfYear(52);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(9);
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.Duration duration39 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = localDate41.toInterval(dateTimeZone42);
        boolean boolean44 = dateTime16.equals((java.lang.Object) dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        int int48 = dateMidnight47.getEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateMidnight47.toDateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusDays(9);
        int int53 = dateTime50.getEra();
        org.joda.time.DateTime dateTime54 = dateTime50.toDateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.secondOfDay();
        boolean boolean56 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property57 = dateTime16.dayOfWeek();
        int int58 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime16);
        int int59 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime dateTime61 = dateTime16.withHourOfDay(0);
        int int62 = dateTime61.getEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.hours();
        java.lang.String str7 = durationFieldType6.toString();
        boolean boolean8 = period1.isSupported(durationFieldType6);
        java.lang.String str9 = durationFieldType6.getName();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = interval15.withPeriodBeforeEnd(readablePeriod16);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Chronology chronology19 = mutableInterval18.getChronology();
        boolean boolean20 = durationFieldType6.isSupported(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.seconds();
        java.lang.String str22 = durationField21.getName();
        java.lang.String str23 = durationField21.getName();
        boolean boolean24 = durationField21.isPrecise();
        long long27 = durationField21.add((long) 734, 219);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hours" + "'", str7, "hours");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hours" + "'", str9, "hours");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "seconds" + "'", str22, "seconds");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "seconds" + "'", str23, "seconds");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 219734L + "'", long27 == 219734L);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(100);
        int int6 = localDateTime5.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear(15);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.minuteOfHour();
        int int10 = localDateTime5.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withMillisOfDay(31556952);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMonths(100800);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 14 + "'", int6 == 14);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        int int9 = timeOfDay7.getMinuteOfHour();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay7.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = timeOfDay7.getFieldType(25968047);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25968047");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property13.addCopy((long) 10);
        org.joda.time.LocalTime localTime18 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime20 = property13.addWrapFieldToCopy(25811620);
        org.joda.time.LocalTime localTime21 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime23 = property13.addCopy(30);
        java.util.Date date25 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromDateFields(date25);
        int int27 = timeOfDay26.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.minusMinutes(6);
        int int30 = timeOfDay26.size();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay26.minusHours(42);
        org.joda.time.DateTime dateTime33 = timeOfDay32.toDateTimeToday();
        org.joda.time.TimeOfDay.Property property34 = timeOfDay32.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay36 = property34.addToCopy(81);
        org.joda.time.TimeOfDay timeOfDay37 = property34.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property34.getFieldType();
        int int39 = localTime23.get(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology36);
        int int38 = yearMonthDay37.size();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay37.plus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime53 = yearMonthDay51.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localDate29.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear(344);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, readableDuration57);
        boolean boolean60 = interval58.isBefore(14515200000L);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfCeilingCopy();
        java.lang.String str9 = property4.getName();
        org.joda.time.DateMidnight dateMidnight10 = property4.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight12 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight13 = property4.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay23.dayOfMonth();
        org.joda.time.Chronology chronology25 = yearMonthDay23.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime20.toMutableDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime20.minusMillis(121);
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime.Property property30 = dateTime28.dayOfWeek();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime33 = dateTime31.minusYears(25757096);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property13.addCopy((-61662790239443L));
        org.joda.time.LocalTime localTime19 = property13.setCopy(8);
        org.joda.time.LocalTime localTime20 = property13.withMinimumValue();
        org.joda.time.LocalTime.Property property21 = localTime20.hourOfDay();
        org.joda.time.LocalTime localTime22 = property21.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime23 = property21.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime24 = property21.withMinimumValue();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = nameProvider26.getName(locale27, "", "0035-10-10");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime31 = property21.setCopy("2022-5-11 7:15:58", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-5-11 7:15:58\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getWeekOfWeekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology14);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter18.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = yearMonthDay15.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime5.toMutableDateTime(dateTimeZone31);
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.Duration duration57 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight41.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDate localDate59 = dateMidnight58.toLocalDate();
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        java.lang.String str61 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfDay();
        long long64 = dateTimeField62.roundHalfFloor(100L);
        java.util.Locale locale68 = new java.util.Locale("hi!", "");
        java.lang.String str69 = locale68.getDisplayVariant();
        java.lang.String str70 = locale68.getCountry();
        java.lang.String str71 = dateTimeField62.getAsShortText((long) 16, locale68);
        java.lang.String str72 = locale38.getDisplayLanguage(locale68);
        java.lang.String str73 = dateTimeZone31.getName((long) 25791265, locale38);
        long long75 = dateTimeZone31.convertUTCToLocal((long) 25767397);
        java.util.Locale locale78 = new java.util.Locale("");
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = locale78.getDisplayCountry(locale79);
        java.lang.String str81 = dateTimeZone31.getName(0L, locale78);
        org.joda.time.MutableDateTime mutableDateTime82 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.weekyear();
        mutableDateTime82.addWeekyears((-23));
        mutableDateTime82.addDays(28);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Japanese" + "'", str72, "Japanese");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 25767397L + "'", long75 == 25767397L);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.withMinimumValue();
        int int6 = property4.getMaximumValue();
        boolean boolean7 = property4.isLeap();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        long long11 = dateTimeField9.remainder((long) 18992);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 18992L + "'", long11 == 18992L);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        long long17 = interval15.getStartMillis();
        org.joda.time.Interval interval18 = interval8.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.Interval interval43 = interval8.withChronology(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((-4190400000L), chronology40);
        long long51 = chronology40.add((long) 2022, (long) 25810041, 476);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.Period period53 = new org.joda.time.Period((long) 34841, chronology40);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(86182012800035L, chronology40);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61038316800000L) + "'", long17 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 12285581538L + "'", long51 == 12285581538L);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime localTime14 = localTime11.withSecondOfMinute(35);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int7 = calendar0.getMaximum(1);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        boolean boolean10 = calendar0.isSet((int) (short) 1);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61662789662934,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=57,MILLISECOND=66,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278994 + "'", int7 == 292278994);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.Period period8 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        java.lang.String str10 = durationFieldType9.toString();
        org.joda.time.Period period12 = period8.withField(durationFieldType9, 2);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        boolean boolean15 = period8.isSupported(durationFieldType13);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period8, 21);
        mutableDateTime4.addMillis((-292275054));
        int int20 = mutableDateTime4.getRoundingMode();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hours" + "'", str10, "hours");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        int int14 = property13.getMinimumValue();
        org.joda.time.LocalTime localTime15 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime18 = property13.addWrapFieldToCopy(25906893);
        org.joda.time.LocalTime localTime20 = property13.addCopy(2232721955414998L);
        org.joda.time.LocalTime localTime21 = property13.roundHalfEvenCopy();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 25770065);
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.LocalTime localTime25 = localTime21.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(10);
        org.joda.time.DateTime dateTime8 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonthDay4.getFieldTypes();
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay4.monthOfYear();
        org.joda.time.DurationField durationField11 = property10.getRangeDurationField();
        boolean boolean12 = durationField11.isPrecise();
        long long14 = durationField11.getMillis((-23));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-725809896000L) + "'", long14 == (-725809896000L));
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        int int21 = dateMidnight19.getWeekyear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.withWeekOfWeekyear(21);
        org.joda.time.DateMidnight.Property property24 = dateMidnight19.weekOfWeekyear();
        org.joda.time.DateMidnight.Property property25 = dateMidnight19.yearOfCentury();
        boolean boolean26 = property25.isLeap();
        org.joda.time.DateMidnight dateMidnight28 = property25.addToCopy((long) 25804968);
        org.joda.time.DateMidnight dateMidnight29 = property25.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfMonth();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.LocalDate.Property property33 = localDate29.dayOfWeek();
        org.joda.time.LocalDate localDate34 = property33.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate36 = localDate34.withWeekyear(26045302);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay59 = property54.addToCopy(32);
        org.joda.time.YearMonthDay yearMonthDay61 = property54.addWrapFieldToCopy(25755126);
        org.joda.time.YearMonthDay yearMonthDay63 = property54.setCopy(885);
        org.joda.time.YearMonthDay yearMonthDay65 = property54.addWrapFieldToCopy(740);
        org.joda.time.YearMonthDay yearMonthDay67 = property54.setCopy(25810041);
        int int68 = property54.getMinimumValueOverall();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-292275054) + "'", int68 == (-292275054));
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy(959);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        org.joda.time.YearMonthDay yearMonthDay58 = property54.addToCopy(7);
        org.joda.time.YearMonthDay yearMonthDay60 = property54.addToCopy((int) (short) 1);
        org.joda.time.DurationField durationField61 = property54.getDurationField();
        java.lang.String str62 = property54.getAsShortText();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        int int8 = dateTime7.getCenturyOfEra();
        int int9 = dateTime7.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod7.setPeriod((long) 0, (long) 12, chronology11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int14 = localDateTime13.getYearOfCentury();
        int int15 = localDateTime13.getWeekOfWeekyear();
        int int16 = localDateTime13.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = property17.withMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.012S");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay((-3L), chronology1);
        org.junit.Assert.assertNotNull(timeOfDay2);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.TimeOfDay timeOfDay13 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = property8.withMaximumValue();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.hourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy(4000L);
        org.joda.time.LocalDateTime localDateTime23 = property20.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMinutes(25831764);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = timeOfDay14.compareTo((org.joda.time.ReadablePartial) localDateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType17 = periodType16.withMillisRemoved();
        org.joda.time.Period period18 = interval15.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = interval15.getEnd();
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.property(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(21);
        mutableDateTime16.setWeekyear(0);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.monthOfYear();
        org.joda.time.DateMidnight dateMidnight21 = property20.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = property20.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight24 = property20.addToCopy(31556952);
        int int25 = dateMidnight24.getEra();
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean27 = mutableDateTime16.isAfterNow();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        java.lang.String str41 = interval5.toString();
        org.joda.time.MutableInterval mutableInterval42 = interval5.toMutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        int int45 = periodType44.size();
        org.joda.time.PeriodType periodType46 = periodType44.withSecondsRemoved();
        org.joda.time.PeriodType periodType47 = periodType46.withMonthsRemoved();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        org.joda.time.Period period49 = mutableInterval42.toPeriod(periodType47);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str41, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(292269054);
        boolean boolean8 = dateTimeFormatter7.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("26135124", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        java.lang.String str23 = interval22.toString();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        long long32 = interval30.getStartMillis();
        boolean boolean33 = interval22.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime34 = interval30.getStart();
        org.joda.time.Period period44 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        java.lang.String str46 = durationFieldType45.toString();
        org.joda.time.Period period48 = period44.withField(durationFieldType45, 2);
        org.joda.time.PeriodType periodType49 = period48.getPeriodType();
        org.joda.time.Period period50 = new org.joda.time.Period(32772, 25773844, 0, 25817560, 5, 52, 0, 25804551, periodType49);
        org.joda.time.Period period51 = interval30.toPeriod(periodType49);
        org.joda.time.Period period53 = period51.plusMinutes(42);
        org.joda.time.Period period55 = period53.withDays(26033818);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str23, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86400000L + "'", long24 == 86400000L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-61038316800000L) + "'", long32 == (-61038316800000L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours" + "'", str46, "hours");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.contains((long) 4);
        org.joda.time.Period period10 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        java.lang.String str12 = durationFieldType11.toString();
        org.joda.time.Period period14 = period10.withField(durationFieldType11, 2);
        org.joda.time.Period period16 = period14.withMillis((int) '#');
        org.joda.time.Interval interval17 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology21);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.Interval interval25 = interval23.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval25.withPeriodBeforeEnd(readablePeriod27);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval5.isBefore((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = dateMidnight45.toString(dateTimeFormatter47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        int int52 = dateMidnight51.getEra();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateMidnight51.toDateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks(0);
        org.joda.time.DateTime dateTime57 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime59 = dateTime56.minusYears(25756429);
        org.joda.time.DateTime dateTime61 = dateTime56.plusYears(25767397);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int63 = dateTime56.get(dateTimeFieldType62);
        org.joda.time.DateMidnight.Property property64 = dateMidnight45.property(dateTimeFieldType62);
        org.joda.time.DateTime dateTime65 = dateMidnight45.toDateTime();
        boolean boolean66 = interval5.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hours" + "'", str12, "hours");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str48, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.withMinimumValue();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale.setDefault(category20, locale22);
        java.util.Locale locale25 = java.util.Locale.getDefault(category20);
        java.util.Locale locale28 = new java.util.Locale("hi!", "");
        java.lang.String str29 = locale28.getDisplayVariant();
        java.lang.String str30 = locale28.getCountry();
        java.lang.String str31 = locale25.getDisplayScript(locale28);
        java.util.Set<java.lang.String> strSet32 = locale28.getUnicodeLocaleKeys();
        java.lang.String str33 = property18.getAsText(locale28);
        org.joda.time.DateTimeField dateTimeField34 = property18.getField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (China)" + "'", str23, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "14" + "'", str33, "14");
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateMidnight3.toLocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks(100);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate.Property property8 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate10 = localDate4.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundFloor();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableInstant) dateMidnight22, periodType26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateMidnight30.toDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays(9);
        int int36 = dateTime33.getEra();
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        long long41 = dateTimeZone38.adjustOffset((long) 5, true);
        boolean boolean43 = dateTimeZone38.isStandardOffset((long) 3);
        mutableDateTime16.setZoneRetainFields(dateTimeZone38);
        java.lang.String str46 = dateTimeZone38.getShortName((long) (-292275054));
        org.joda.time.DateMidnight dateMidnight47 = localDate4.toDateMidnight(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(5097600000L, dateTimeZone38);
        java.util.TimeZone timeZone49 = dateTimeZone38.toTimeZone();
        int int51 = timeZone49.getOffset((-51L));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5L + "'", long41 == 5L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime14 = property12.withMaximumValue();
        org.joda.time.LocalTime localTime15 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = localTime15.minusMinutes(19);
        org.joda.time.LocalTime.Property property18 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        long long17 = interval15.getStartMillis();
        org.joda.time.Interval interval18 = interval8.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.Interval interval43 = interval8.withChronology(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.centuryOfEra();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 1, periodType1, chronology40);
        int int47 = period46.size();
        org.joda.time.Period period48 = period46.normalizedStandard();
        org.joda.time.Minutes minutes49 = period46.toStandardMinutes();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61038316800000L) + "'", long17 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(minutes49);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(2731L);
        org.joda.time.DateTime dateTime12 = property9.getDateTime();
        int int13 = dateTime12.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime34);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime41 = property38.getMutableDateTime();
        java.lang.String str42 = mutableDateTime41.toString();
        java.util.Date date43 = mutableDateTime41.toDate();
        mutableDateTime41.addHours(2021);
        mutableDateTime35.setDate((org.joda.time.ReadableInstant) mutableDateTime41);
        int int47 = mutableDateTime35.getYear();
        mutableDateTime35.addMillis(25862871);
        org.joda.time.DurationFieldType durationFieldType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime35.add(durationFieldType50, 731);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str42, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        org.joda.time.Period period8 = new org.joda.time.Period(25845824, 1439, 1977, 25773761, 51, 25889819, 25794115, 25855302);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType17 = periodType16.withMillisRemoved();
        int int18 = periodType17.size();
        org.joda.time.Period period20 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        java.lang.String str22 = durationFieldType21.toString();
        org.joda.time.Period period24 = period20.withField(durationFieldType21, 2);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        java.lang.Object obj52 = mutablePeriod51.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod57);
        int int59 = mutablePeriod57.getMinutes();
        org.joda.time.Period period61 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        java.lang.String str63 = durationFieldType62.toString();
        org.joda.time.Period period65 = period61.withField(durationFieldType62, 2);
        boolean boolean66 = mutablePeriod57.isSupported(durationFieldType62);
        long long69 = chronology46.add((org.joda.time.ReadablePeriod) mutablePeriod57, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology46.withZone(dateTimeZone70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology71);
        org.joda.time.DurationField durationField73 = chronology71.halfdays();
        org.joda.time.DurationField durationField74 = durationFieldType21.getField(chronology71);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((java.lang.Object) interval14, periodType17, chronology71);
        org.joda.time.PeriodType periodType76 = periodType17.withDaysRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withSecondsRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.months();
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval82 = yearMonthDay81.toInterval();
        int int83 = yearMonthDay81.size();
        org.joda.time.Period period85 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.hours();
        java.lang.String str87 = durationFieldType86.toString();
        org.joda.time.Period period89 = period85.withField(durationFieldType86, 2);
        int int90 = period85.size();
        org.joda.time.MutablePeriod mutablePeriod91 = period85.toMutablePeriod();
        org.joda.time.ReadableDuration readableDuration92 = null;
        mutablePeriod91.add(readableDuration92);
        org.joda.time.YearMonthDay yearMonthDay94 = yearMonthDay81.plus((org.joda.time.ReadablePeriod) mutablePeriod91);
        java.lang.String str95 = yearMonthDay81.toString();
        org.joda.time.Chronology chronology96 = yearMonthDay81.getChronology();
        boolean boolean97 = durationFieldType79.isSupported(chronology96);
        boolean boolean98 = periodType78.isSupported(durationFieldType79);
        int int99 = period8.get(durationFieldType79);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hours" + "'", str22, "hours");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hours" + "'", str63, "hours");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 25755235L + "'", long69 == 25755235L);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hours" + "'", str87, "hours");
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod91);
        org.junit.Assert.assertNotNull(yearMonthDay94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1970-01-01" + "'", str95, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1439 + "'", int99 == 1439);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        org.joda.time.Period period7 = period1.minusSeconds(2);
        int int8 = period7.getSeconds();
        org.joda.time.Period period10 = period7.plusDays(25756429);
        org.joda.time.MutablePeriod mutablePeriod11 = period7.toMutablePeriod();
        mutablePeriod11.add(25831764, 25896112, 25806823, 162799854, 25773844, 25849993, 25918840, 335);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-2) + "'", int8 == (-2));
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(25762033, 21, 32769);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int15 = property13.getMaximumTextLength(locale14);
        java.util.Calendar.Builder builder16 = builder0.setLocale(locale14);
        java.util.Calendar calendar17 = builder16.build();
        calendar17.set(169, 70, (int) (short) -1, 70, 20);
        java.lang.String str24 = calendar17.getCalendarType();
        calendar17.setFirstDayOfWeek(52);
        java.util.Date date27 = calendar17.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar17.roll(26014602, 26099197);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-56649980400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=52,minimalDaysInFirstWeek=1,ERA=1,YEAR=174,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=305,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=20,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gregory" + "'", str24, "gregory");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Mon Nov 01 22:20:00 UTC 174");
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        int int10 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime5.toTimeOfDay();
        org.joda.time.DateTime.Property property13 = dateTime5.year();
        int int14 = dateTime5.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.Duration duration17 = mutablePeriod6.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight16);
        mutablePeriod6.addMillis(0);
        mutablePeriod6.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight24.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        java.lang.String str50 = mutablePeriod48.toString();
        mutableDateTime43.add((org.joda.time.ReadablePeriod) mutablePeriod48, 2022);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInstant) dateMidnight41, (org.joda.time.ReadableInstant) mutableDateTime43);
        mutableDateTime43.addWeekyears((int) (byte) 0);
        mutableDateTime43.setSecondOfMinute(8);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        int int61 = dateMidnight60.getEra();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.monthOfYear();
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType64 = periodType63.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime43, (org.joda.time.ReadableInstant) dateMidnight60, periodType63);
        org.joda.time.PeriodType periodType66 = periodType63.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(0L, 100L, periodType72, chronology73);
        java.lang.Object obj75 = mutablePeriod74.clone();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(0L, 100L, periodType78, chronology79);
        mutablePeriod74.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone83);
        org.joda.time.Duration duration85 = mutablePeriod74.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight84);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight69.plus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.LocalDate localDate87 = dateMidnight86.toLocalDate();
        org.joda.time.Chronology chronology88 = localDate87.getChronology();
        java.lang.String str89 = chronology88.toString();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.minuteOfHour();
        java.lang.String str91 = chronology88.toString();
        org.joda.time.DateTimeField dateTimeField92 = chronology88.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime93 = new org.joda.time.MutableDateTime(chronology88);
        org.joda.time.DateMidnight dateMidnight94 = new org.joda.time.DateMidnight(chronology88);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod(255139200000L, 813140510434860993L, periodType66, chronology88);
        org.joda.time.DateTimeField dateTimeField96 = chronology88.yearOfEra();
        long long98 = dateTimeField96.roundHalfCeiling((-1640993820000L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.100S" + "'", str50, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "PT0.100S");
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ISOChronology[UTC]" + "'", str89, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ISOChronology[UTC]" + "'", str91, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-1640995200000L) + "'", long98 == (-1640995200000L));
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        org.joda.time.DateTime dateTime11 = dateTime6.withEarlierOffsetAtOverlap();
        int int12 = dateTime6.getMillisOfDay();
        int int13 = dateTime6.getYearOfEra();
        org.joda.time.DateTime.Property property14 = dateTime6.year();
        int int15 = dateTime6.getYear();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime22 = dateTime18.withFieldAdded(durationFieldType20, 5);
        int int23 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime22.minusHours(25762147);
        org.joda.time.DateTime.Property property27 = dateTime22.dayOfMonth();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        int int44 = mutablePeriod32.getYears();
        org.joda.time.DateTime dateTime45 = dateTime22.minus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime47 = dateTime22.minusMillis(25836213);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone64);
        org.joda.time.Duration duration66 = mutablePeriod55.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight50.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.LocalDate localDate68 = dateMidnight67.toLocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.dayOfYear();
        org.joda.time.DateTime dateTime70 = localDate68.toDateTimeAtMidnight();
        boolean boolean71 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology72 = dateTime22.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.halfdays();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0.100S");
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology6);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        long long17 = interval15.getStartMillis();
        org.joda.time.Interval interval18 = interval8.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.Interval interval43 = interval8.withChronology(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfMonth();
        org.joda.time.Period period45 = new org.joda.time.Period((long) (-292275054), periodType2, chronology40);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        int int49 = dateMidnight48.getEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateMidnight48.toDateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(0);
        int int54 = dateTime51.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime51.getZone();
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone55.getName(1L, locale57);
        org.joda.time.Chronology chronology59 = chronology40.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField60 = chronology40.clockhourOfHalfday();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((java.lang.Object) "2004", chronology40);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61038316800000L) + "'", long17 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = localDate28.toInterval(dateTimeZone29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology34);
        org.joda.time.Interval interval36 = yearMonthDay35.toInterval();
        org.joda.time.Interval interval38 = interval36.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfDay();
        boolean boolean41 = localDate28.equals((java.lang.Object) property40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property40.getFieldType();
        org.joda.time.DateTime.Property property43 = dateTime7.property(dateTimeFieldType42);
        org.joda.time.DateTime.Property property44 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = property44.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.LocalDate localDate33 = localDate29.minusMonths(32772);
        java.lang.String str35 = localDate33.toString("weeks");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate37 = localDate33.withMonthOfYear(56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd\ufffd" + "'", str35, "\ufffd\ufffd");
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateMidnight dateMidnight8 = dateTime6.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
        java.util.Date date12 = new java.util.Date((long) 0);
        int int13 = date12.getDay();
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromDateFields(date12);
        int int15 = yearMonthDay14.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        int int28 = dateMidnight27.getEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateMidnight27.toDateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusDays(9);
        int int33 = dateTime30.getEra();
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime21.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay14.toDateMidnight(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 48, dateTimeZone35);
        org.joda.time.LocalDate localDate40 = localDate38.minusDays(27);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = property9.compareTo((org.joda.time.ReadablePartial) localDate40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime4 = timeOfDay3.toDateTimeToday();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("894");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        int int37 = dateMidnight36.getEra();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.Duration duration53 = mutablePeriod42.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, (org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration53);
        java.lang.String str56 = duration53.toString();
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology61);
        org.joda.time.Interval interval63 = yearMonthDay62.toInterval();
        org.joda.time.DateTime dateTime64 = yearMonthDay62.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property66 = dateTime64.property(dateTimeFieldType65);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType68 = periodType67.withSecondsRemoved();
        java.lang.String str69 = periodType68.toString();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime64, periodType68);
        org.joda.time.DateTime dateTime71 = dateTime64.toDateTime();
        org.joda.time.ReadableDateTime[] readableDateTimeArray72 = new org.joda.time.ReadableDateTime[] { dateTime7, dateTime64 };
        org.joda.time.ReadableDateTime[] readableDateTimeArray73 = strSet6.toArray(readableDateTimeArray72);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = strSet6.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514337773,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=57,MILLISECOND=773,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.100S" + "'", str56, "PT0.100S");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PeriodType[SecondsNoSeconds]" + "'", str69, "PeriodType[SecondsNoSeconds]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(readableDateTimeArray72);
        org.junit.Assert.assertNotNull(readableDateTimeArray73);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.minusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.DateMidnight dateMidnight16 = property15.roundHalfCeilingCopy();
        int int17 = dateMidnight16.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusDays(9);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra(2022);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(23, (int) (short) 0, (int) (short) 100, 70);
        org.joda.time.DateTime dateTime35 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, 50400000);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime28.getZone();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight16.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray48 = mutablePeriod47.getValues();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType54 = periodType53.withMillisRemoved();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 10, (long) '#', periodType54);
        org.joda.time.Period period56 = new org.joda.time.Period((long) (short) 10, (long) 25756429, periodType54);
        mutablePeriod47.add((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period59 = period56.plusYears(69);
        java.util.Date date61 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay62 = org.joda.time.TimeOfDay.fromDateFields(date61);
        int int63 = timeOfDay62.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay62.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property68 = timeOfDay67.secondOfMinute();
        org.joda.time.DurationField durationField69 = property68.getRangeDurationField();
        long long72 = durationField69.getDifferenceAsLong((long) 47, (long) 19045);
        org.joda.time.DurationFieldType durationFieldType73 = durationField69.getType();
        int int74 = period59.get(durationFieldType73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight37.withFieldAdded(durationFieldType73, 25910588);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period59);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateMidnight76);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        calendar0.set((int) (byte) 10, 8, (int) (short) 0);
        java.util.Date date9 = calendar0.getTime();
        java.lang.String str10 = calendar0.getCalendarType();
        java.time.Instant instant11 = calendar0.toInstant();
        int int12 = calendar0.getWeeksInWeekYear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61830837662158,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=57,MILLISECOND=842,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 31 07:18:57 UTC 10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfDay();
        org.joda.time.DateTime dateTime22 = property20.setCopy(121);
        org.joda.time.DateTime dateTime24 = dateTime22.minus(1645513814998L);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(25766043);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(25762216);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusSeconds(604);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusYears(160);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withYear(86399);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay4.withFieldAdded(durationFieldType8, 12);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        java.lang.String str12 = property11.toString();
        org.joda.time.DurationField durationField13 = property11.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.addWrapFieldToCopy(25957658);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[year]" + "'", str12, "Property[year]");
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateMidnight14.toString(dateTimeFormatter16);
        int int18 = dateMidnight14.getSecondOfDay();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight14.minus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime22 = dateMidnight21.toDateTimeISO();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology26);
        org.joda.time.Interval interval28 = yearMonthDay27.toInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Interval interval30 = interval28.withPeriodBeforeEnd(readablePeriod29);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        org.joda.time.Chronology chronology32 = mutableInterval31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime22.toDateTime(chronology32);
        org.joda.time.Period period39 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period41 = period39.plusDays(1970);
        org.joda.time.MutablePeriod mutablePeriod42 = period39.toMutablePeriod();
        org.joda.time.DateTime dateTime43 = dateTime22.minus((org.joda.time.ReadablePeriod) period39);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT0.100S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str17, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-22404962L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(25862871);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.minusSeconds((-292275054));
        org.joda.time.DateTime dateTime6 = timeOfDay5.toDateTimeToday();
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval2 = yearMonthDay1.toInterval();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime8 = property5.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = property5.addWrapField(993);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        int int21 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTime dateTime23 = dateTime17.withEra(0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        int int27 = dateMidnight26.getEra();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology34);
        int int36 = yearMonthDay35.size();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        mutablePeriod47.setPeriod((long) (byte) 100, (long) (byte) -1, chronology56);
        org.joda.time.Period period58 = new org.joda.time.Period(1645513759767L, periodType30, chronology56);
        long long63 = chronology56.getDateTimeMillis((-292275054), 5, 14, 11);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight26.withChronology(chronology56);
        org.joda.time.DateTime dateTime65 = dateTime23.toDateTime(chronology56);
        org.joda.time.DateTime.Property property66 = dateTime23.secondOfDay();
        boolean boolean67 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = dateTime23.withMonthOfYear((-1641746940));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1641746940 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-9223372005551999989L) + "'", long63 == (-9223372005551999989L));
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology20 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter23.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimePrinter24);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        java.util.Locale locale11 = new java.util.Locale("hi!", "");
        java.lang.String str12 = property8.getAsShortText(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.util.Locale locale16 = locale13.stripExtensions();
        java.lang.String str18 = locale16.getExtension('u');
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        int int9 = periodType8.size();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.halfdays();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology62);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, periodType8, chronology62);
        org.joda.time.DateTime dateTime67 = interval5.getStart();
        org.joda.time.DateTime dateTime68 = dateTime67.withEarlierOffsetAtOverlap();
        int int69 = dateTime68.getMinuteOfDay();
        java.util.Date date70 = dateTime68.toDate();
        int int71 = dateTime68.getSecondOfMinute();
        org.joda.time.DateTime.Property property72 = dateTime68.dayOfMonth();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25755235L + "'", long60 == 25755235L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(date70);
// flaky:         org.junit.Assert.assertEquals(date70.toString(), "Wed Oct 12 00:00:00 UTC 35");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.DurationField durationField47 = chronology46.years();
        org.joda.time.DurationField durationField48 = chronology46.millis();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfDay();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.set("2");
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        java.lang.String str33 = chronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfDay();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(0L, (long) 1, chronology32);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(10L);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) yearMonthDay37, (long) 8);
        org.joda.time.DateTimeField dateTimeField40 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology32.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period42 = new org.joda.time.Period((java.lang.Object) mutableDateTime8, chronology32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 8L + "'", long39 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 6);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        boolean boolean10 = interval7.contains((long) 4);
        org.joda.time.Period period12 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        org.joda.time.Period period16 = period12.withField(durationFieldType13, 2);
        org.joda.time.Period period18 = period16.withMillis((int) '#');
        org.joda.time.Interval interval19 = interval7.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.parse("2022-02-15T07:10:01.832");
        org.joda.time.Period period27 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period29 = period27.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateMidnight32.toDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks(0);
        org.joda.time.DateTime dateTime39 = dateTime35.withYear((int) (short) 10);
        org.joda.time.Duration duration40 = period27.toDurationTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = period27.withPeriodType(periodType41);
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period43.withWeeks((-2));
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.months();
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval49 = yearMonthDay48.toInterval();
        int int50 = yearMonthDay48.size();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        int int57 = period52.size();
        org.joda.time.MutablePeriod mutablePeriod58 = period52.toMutablePeriod();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutablePeriod58.add(readableDuration59);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay48.plus((org.joda.time.ReadablePeriod) mutablePeriod58);
        java.lang.String str62 = yearMonthDay48.toString();
        org.joda.time.Chronology chronology63 = yearMonthDay48.getChronology();
        boolean boolean64 = durationFieldType46.isSupported(chronology63);
        int int65 = period45.get(durationFieldType46);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight22.withFieldAdded(durationFieldType46, 0);
        mutablePeriod1.set(durationFieldType46, 26248059);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime8.withZoneRetainFields(dateTimeZone19);
        int int24 = dateTime8.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime8.minusHours(12);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDate localDate49 = dateMidnight48.toLocalDate();
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        int int63 = mutablePeriod61.getMinutes();
        org.joda.time.Period period65 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.hours();
        java.lang.String str67 = durationFieldType66.toString();
        org.joda.time.Period period69 = period65.withField(durationFieldType66, 2);
        boolean boolean70 = mutablePeriod61.isSupported(durationFieldType66);
        long long73 = chronology50.add((org.joda.time.ReadablePeriod) mutablePeriod61, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = chronology50.withZone(dateTimeZone74);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 11, chronology75);
        org.joda.time.DateTime dateTime77 = dateTime8.minus((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateTime dateTime79 = dateTime77.plus((long) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hours" + "'", str67, "hours");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 25755235L + "'", long73 == 25755235L);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.monthOfYear();
        org.joda.time.DateMidnight dateMidnight34 = property32.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property32.getFieldType();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime27.property(dateTimeFieldType35);
        boolean boolean37 = dateMidnight4.isSupported(dateTimeFieldType35);
        java.lang.String str38 = dateTimeFieldType35.getName();
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay1.property(dateTimeFieldType35);
        org.joda.time.DurationField durationField40 = property39.getDurationField();
        boolean boolean41 = durationField40.isPrecise();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "monthOfYear" + "'", str38, "monthOfYear");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay16 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay17 = property8.withMaximumValue();
        java.lang.String str18 = property8.getName();
        int int19 = property8.getMaximumValue();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "secondOfMinute" + "'", str18, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.DurationField durationField14 = property8.getRangeDurationField();
        int int15 = property8.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay17 = property8.addWrapFieldToCopy(25951193);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        long long29 = dateTimeZone26.adjustOffset((long) 5, true);
        boolean boolean31 = dateTimeZone26.isStandardOffset((long) 3);
        mutableDateTime4.setZoneRetainFields(dateTimeZone26);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.LocalDate.Property property34 = localDate33.weekOfWeekyear();
        org.joda.time.LocalDate localDate36 = localDate33.minusWeeks(0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5L + "'", long29 == 5L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        java.util.Locale locale1 = new java.util.Locale("2022-02-15T07:10:55.663Z");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-15t07:10:55.663z");
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = timeOfDay25.getFieldType(0);
        int[] intArray30 = timeOfDay25.getValues();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 5, 0, 0]");
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("days");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = locale4.getDisplayName(locale6);
        java.lang.String str10 = locale0.getDisplayScript(locale6);
        java.lang.String str11 = locale0.getDisplayVariant();
        java.util.Set<java.lang.String> strSet12 = locale0.getUnicodeLocaleKeys();
        java.lang.String str13 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "days");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str7, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "days" + "'", str9, "days");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CN" + "'", str13, "CN");
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(dateTimeZone20);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal(0L);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone20);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone20.getName((long) 483, locale29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime8, dateTimeZone20);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(obj2, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) 25964944, dateTimeZone20);
        long long36 = dateTimeZone20.adjustOffset(26411098L, false);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 26258728, dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 26411098L + "'", long36 == 26411098L);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        org.joda.time.DateMidnight dateMidnight12 = localDate11.toDateMidnight();
        org.joda.time.LocalDate.Property property13 = localDate11.dayOfWeek();
        boolean boolean14 = property13.isLeap();
        org.joda.time.LocalDate localDate15 = property13.roundCeilingCopy();
        org.joda.time.LocalDate localDate17 = localDate15.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime39 = dateMidnight20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight20.getZone();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        long long43 = dateTimeZone40.nextTransition((-62135596800000L));
        int int45 = dateTimeZone40.getOffset((long) 353);
        org.joda.time.DateMidnight dateMidnight46 = localDate17.toDateMidnight(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        int int50 = dateMidnight49.getEra();
        int int51 = dateMidnight49.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight49.withField(dateTimeFieldType52, 3);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight49.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableInstant57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight49.withWeekyear(598);
        org.joda.time.YearMonthDay yearMonthDay61 = dateMidnight60.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.minusMonths(53327);
        int int64 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateMidnight63);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-62135596800000L) + "'", long43 == (-62135596800000L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(0L, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableDuration) duration28, periodType30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        java.lang.Object obj62 = mutablePeriod61.clone();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        org.joda.time.Duration duration72 = mutablePeriod61.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, (org.joda.time.ReadableDuration) duration72);
        boolean boolean74 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration72);
        java.lang.String str75 = duration72.toString();
        boolean boolean76 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration72);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration28, 9);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime5.era();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime5.dayOfYear();
        long long81 = property80.remainder();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT0.100S");
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0.100S" + "'", str75, "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 903L + "'", long81 == 903L);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Appendable appendable6 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusDays(1);
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay11.minusYears(431);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(appendable6, (org.joda.time.ReadablePartial) yearMonthDay11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        java.util.Locale locale0 = java.util.Locale.PRC;
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundFloor();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology9);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) dateMidnight11, periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(0L, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        int int39 = dateMidnight38.getEra();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        java.lang.Object obj45 = mutablePeriod44.clone();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        org.joda.time.Duration duration55 = mutablePeriod44.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, (org.joda.time.ReadableDuration) duration55, periodType57);
        boolean boolean59 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime5.yearOfCentury();
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = new java.util.Locale("", "ISOChronology[UTC]");
        java.util.Locale.setDefault(category62, locale65);
        java.util.Locale locale67 = java.util.Locale.getDefault(category62);
        int int68 = property61.getMaximumShortTextLength(locale67);
        java.lang.String str69 = locale0.getDisplayLanguage(locale67);
        java.lang.String str70 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "PT0.100S");
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale65.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Chinese" + "'", str69, "Chinese");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CN" + "'", str70, "CN");
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay3 = property1.addNoWrapToCopy(22);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.parse("2022-02-15T07:09:25.633");
        int int6 = mutableDateTime5.getDayOfYear();
        mutableDateTime5.setMinuteOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime5.toMutableDateTime();
        org.joda.time.DateTime dateTime10 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period15 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period17 = period15.plusDays(1970);
        org.joda.time.Period period19 = period15.plusSeconds(70);
        org.joda.time.Period period21 = period15.withMonths((int) (short) 1);
        mutableDateTime5.add((org.joda.time.ReadablePeriod) period15, 0);
        int int24 = mutableDateTime5.getYear();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 46 + "'", int6 == 46);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(70);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMinutes(6);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime13.withHourOfDay(14);
        java.lang.String str18 = dateTime13.toString("\u4e2d\u6587");
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime13.plusYears(566);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.DateTimeField dateTimeField28 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay29 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateMidnight32.toDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks(0);
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime39 = dateTime37.toLocalTime();
        org.joda.time.LocalTime localTime41 = localTime39.minusMinutes(3);
        org.joda.time.LocalTime localTime43 = localTime39.minusMillis((-1));
        org.joda.time.DateTime dateTime44 = localTime43.toDateTimeToday();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(9, 0, 25755035, (int) (byte) 1, 3, 7, (int) (short) 0, 21);
        java.lang.String str54 = mutablePeriod53.toString();
        org.joda.time.LocalTime localTime55 = localTime43.minus((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.Chronology chronology56 = localTime43.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) property8, chronology56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.TimeOfDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "P9Y25755035W1DT3H7M0.021S" + "'", str54, "P9Y25755035W1DT3H7M0.021S");
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setYears(11);
        int int3 = mutablePeriod0.getMillis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology7);
        org.joda.time.Interval interval9 = yearMonthDay8.toInterval();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableDuration) duration32, periodType34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        int int39 = dateMidnight38.getEra();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        java.lang.Object obj45 = mutablePeriod44.clone();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        org.joda.time.Duration duration55 = mutablePeriod44.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        int int60 = dateMidnight59.getEra();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        java.lang.Object obj66 = mutablePeriod65.clone();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, 100L, periodType69, chronology70);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone74);
        org.joda.time.Duration duration76 = mutablePeriod65.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight59, (org.joda.time.ReadableDuration) duration76);
        boolean boolean78 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration76);
        java.lang.String str79 = duration76.toString();
        boolean boolean80 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Interval interval81 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Interval interval82 = interval9.toInterval();
        mutablePeriod0.add((org.joda.time.ReadableInterval) interval82);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "PT0.100S");
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "PT0.100S");
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT0.100S" + "'", str79, "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(interval82);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        mutablePeriod4.addHours(5);
        mutablePeriod4.add((long) 25790263);
        int int10 = mutablePeriod4.getSeconds();
        mutablePeriod4.setMinutes(26115188);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT12H26115188M50.363S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT12H26115188M50.363S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT12H26115188M50.363S");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withCenturyOfEra(8);
        org.joda.time.DateMidnight.Property property15 = dateMidnight10.centuryOfEra();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder16.setDate(25762033, 21, 32769);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder22 = builder20.setLocale(locale21);
        boolean boolean23 = locale21.hasExtensions();
        int int24 = property15.getMaximumTextLength(locale21);
        org.joda.time.DateMidnight dateMidnight25 = property15.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 25762147);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(693);
        org.joda.time.LocalTime localTime4 = localTime1.minus((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period6 = period3.minusSeconds(5);
        org.joda.time.Period period7 = period6.toPeriod();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        java.util.Locale locale11 = new java.util.Locale("hi!", "");
        java.lang.String str12 = property8.getAsShortText(locale11);
        org.joda.time.TimeOfDay timeOfDay14 = property8.addWrapFieldToCopy((-5087));
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusMillis(41);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.hourOfDay();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        long long6 = java.util.Date.UTC(1, 654, 22, 26285741, 25810041, 26296277);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 95747633537000L + "'", long6 == 95747633537000L);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        int int9 = property8.get();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        mutablePeriod14.addMillis(0);
        mutablePeriod14.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        java.lang.String str58 = mutablePeriod56.toString();
        mutableDateTime51.add((org.joda.time.ReadablePeriod) mutablePeriod56, 2022);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addWeekyears((int) (byte) 0);
        mutableDateTime51.setSecondOfMinute(8);
        int int66 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeField dateTimeField67 = property8.getField();
        org.joda.time.DateTimeField dateTimeField68 = property8.getField();
        long long70 = dateTimeField68.roundCeiling((long) 25755000);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0.100S" + "'", str58, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 25755000L + "'", long70 == 25755000L);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        int int6 = period1.size();
        org.joda.time.MutablePeriod mutablePeriod7 = period1.toMutablePeriod();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(periodType8);
        org.joda.time.Period period10 = period1.plus((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Period period12 = period10.minusMillis(3);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateMidnight15.toDateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(0);
        int int21 = dateTime20.getYearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime20.withCenturyOfEra(16);
        org.joda.time.Duration duration24 = period12.toDurationFrom((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getDayOfMonth();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 70 + "'", int21 == 70);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-22404962L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(25862871);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.minusSeconds((-292275054));
        org.joda.time.DateTime dateTime6 = timeOfDay5.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.plusHours((-1706));
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) 25790263);
        int int11 = localTime10.getMinuteOfHour();
        org.joda.time.LocalTime.Property property12 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy(25849993);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean16 = localTime14.isSupported(dateTimeFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = timeOfDay5.withField(dateTimeFieldType15, 604);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 604 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((-1));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMinutes(3);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(348);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withYear(25768718);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(25816024);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds(84378000);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        java.lang.String str5 = locale3.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 18);
        int int9 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withZoneUTC();
        java.lang.StringBuffer stringBuffer11 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(9);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        java.lang.String str33 = dateTimeZone32.toString();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = yearMonthDay16.toDateTimeAtMidnight(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(stringBuffer11, (org.joda.time.ReadablePartial) yearMonthDay16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514339162,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=59,MILLISECOND=162,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2000 + "'", int9 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.minusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = property16.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight19 = property16.addToCopy((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        int int23 = dateMidnight22.getEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateMidnight22.toDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime29 = dateTime27.toLocalTime();
        org.joda.time.LocalTime localTime31 = localTime29.minusMinutes(3);
        org.joda.time.LocalTime.Property property32 = localTime29.minuteOfHour();
        org.joda.time.LocalTime.Property property33 = localTime29.millisOfDay();
        org.joda.time.LocalTime localTime34 = property33.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime36 = localTime34.plusHours(525);
        org.joda.time.LocalTime localTime38 = localTime36.withMillisOfDay(20);
        java.util.Date date40 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay41 = org.joda.time.TimeOfDay.fromDateFields(date40);
        int int42 = timeOfDay41.getSecondOfMinute();
        org.joda.time.LocalTime localTime43 = timeOfDay41.toLocalTime();
        org.joda.time.LocalTime localTime45 = localTime43.withHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        org.joda.time.Period period54 = period52.withMillis((int) '#');
        org.joda.time.LocalTime localTime56 = localTime43.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 32770);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        int int60 = dateMidnight59.getEra();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateMidnight59.toDateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.withHourOfDay(21);
        org.joda.time.DateTime dateTime66 = dateTime62.plusMinutes(25770065);
        boolean boolean67 = localTime43.equals((java.lang.Object) dateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str69 = dateTimeFieldType68.getName();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType68.getRangeDurationType();
        int int71 = localTime43.get(dateTimeFieldType68);
        org.joda.time.LocalTime localTime73 = localTime36.withField(dateTimeFieldType68, 66);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight19.withField(dateTimeFieldType68, 964);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "secondOfDay" + "'", str69, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(dateMidnight75);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property8.getFieldType();
        org.joda.time.TimeOfDay timeOfDay16 = property8.setCopy((int) (byte) 0);
        org.joda.time.DurationField durationField17 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField18 = property8.getField();
        int int19 = property8.get();
        org.joda.time.DateTimeField dateTimeField20 = property8.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField20.getType();
        java.lang.String str22 = dateTimeFieldType21.toString();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        java.lang.String str27 = durationFieldType26.getName();
        int int28 = periodType24.indexOf(durationFieldType26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDate localDate50 = dateMidnight49.toLocalDate();
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(0L, 100L, periodType60, chronology61);
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        int int64 = mutablePeriod62.getMinutes();
        org.joda.time.Period period66 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.hours();
        java.lang.String str68 = durationFieldType67.toString();
        org.joda.time.Period period70 = period66.withField(durationFieldType67, 2);
        boolean boolean71 = mutablePeriod62.isSupported(durationFieldType67);
        long long74 = chronology51.add((org.joda.time.ReadablePeriod) mutablePeriod62, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.Chronology chronology76 = chronology51.withZone(dateTimeZone75);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 11, chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(100L, periodType24, chronology76);
        long long83 = chronology76.add(1673222400000L, (long) (-46800000), 713);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeFieldType21, chronology76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "secondOfMinute" + "'", str22, "secondOfMinute");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "days" + "'", str27, "days");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hours" + "'", str68, "hours");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 25755235L + "'", long74 == 25755235L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1639854000000L + "'", long83 == 1639854000000L);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay2.toDateTimeToday(dateTimeZone6);
        int int8 = dateTime7.getMonthOfYear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        org.joda.time.LocalTime localTime16 = localTime13.minusMinutes(2022);
        org.joda.time.Chronology chronology17 = localTime13.getChronology();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType22 = periodType21.withMillisRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 10, (long) '#', periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withSecondsRemoved();
        org.joda.time.Period period26 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        java.lang.String str28 = durationFieldType27.toString();
        org.joda.time.Period period30 = period26.withField(durationFieldType27, 2);
        boolean boolean31 = periodType22.isSupported(durationFieldType27);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) (short) 1, periodType22);
        org.joda.time.LocalTime localTime33 = localTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        boolean boolean26 = interval24.equals((java.lang.Object) filteringMode25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        java.lang.Object obj55 = mutablePeriod54.clone();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, 100L, periodType58, chronology59);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        int int62 = mutablePeriod60.getMinutes();
        org.joda.time.Period period64 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.hours();
        java.lang.String str66 = durationFieldType65.toString();
        org.joda.time.Period period68 = period64.withField(durationFieldType65, 2);
        boolean boolean69 = mutablePeriod60.isSupported(durationFieldType65);
        long long72 = chronology49.add((org.joda.time.ReadablePeriod) mutablePeriod60, (long) 25755035, 2);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 11, chronology49);
        org.joda.time.DateTimeField dateTimeField74 = chronology49.secondOfMinute();
        org.joda.time.Interval interval75 = interval24.withChronology(chronology49);
        org.joda.time.DateTimeField dateTimeField76 = chronology49.era();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(4000L, chronology49);
        org.joda.time.Period period78 = new org.joda.time.Period((long) (short) 100, chronology49);
        org.joda.time.Hours hours79 = period78.toStandardHours();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hours" + "'", str66, "hours");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 25755235L + "'", long72 == 25755235L);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(hours79);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("50");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.addWrapField((int) (short) 0);
        org.joda.time.Period period7 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        java.lang.String str9 = durationFieldType8.toString();
        org.joda.time.Period period11 = period7.withField(durationFieldType8, 2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight14.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateMidnight31.toLocalDate();
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        int int46 = mutablePeriod44.getMinutes();
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        boolean boolean53 = mutablePeriod44.isSupported(durationFieldType49);
        long long56 = chronology33.add((org.joda.time.ReadablePeriod) mutablePeriod44, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology33.withZone(dateTimeZone57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.DurationField durationField60 = chronology58.halfdays();
        org.joda.time.DurationField durationField61 = durationFieldType8.getField(chronology58);
        mutableDateTime5.setChronology(chronology58);
        org.joda.time.DurationField durationField63 = chronology58.minutes();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) ' ', chronology58);
        org.joda.time.Period period66 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.hours();
        java.lang.String str68 = durationFieldType67.toString();
        org.joda.time.Period period70 = period66.withField(durationFieldType67, 2);
        org.joda.time.Period period72 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.hours();
        java.lang.String str74 = durationFieldType73.toString();
        org.joda.time.Period period76 = period72.withField(durationFieldType73, 2);
        org.joda.time.Period period77 = period70.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period79 = period76.withDays(25770065);
        int int80 = period79.size();
        long long83 = chronology58.add((org.joda.time.ReadablePeriod) period79, (long) 48, 46);
        org.joda.time.Period period85 = period79.plusWeeks((-1970));
        int int86 = period79.size();
        org.joda.time.Period period88 = period79.minusMinutes(794);
        org.joda.time.Period period90 = period79.minusHours(25836647);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hours" + "'", str9, "hours");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 25755235L + "'", long56 == 25755235L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hours" + "'", str68, "hours");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hours" + "'", str74, "hours");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 102420546667204648L + "'", long83 == 102420546667204648L);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        org.joda.time.Period period8 = new org.joda.time.Period(25871120, 25902750, 25859094, 53, 25880429, 25950, 26005485, 25886961);
        org.joda.time.Period period10 = period8.minusMinutes(976);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        java.util.Date date9 = new java.util.Date((long) 0);
        int int10 = date9.getDay();
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromDateFields(date9);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.LocalDate localDate33 = dateMidnight32.toLocalDate();
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        int int47 = mutablePeriod45.getMinutes();
        org.joda.time.Period period49 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.Period period53 = period49.withField(durationFieldType50, 2);
        boolean boolean54 = mutablePeriod45.isSupported(durationFieldType50);
        long long57 = chronology34.add((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 25755035, 2);
        boolean boolean58 = durationFieldType12.isSupported(chronology34);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay11.withChronologyRetainFields(chronology34);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property62 = yearMonthDay59.year();
        org.joda.time.YearMonthDay yearMonthDay64 = property62.setCopy(21);
        int int65 = property62.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay67 = property62.addToCopy(32);
        org.joda.time.YearMonthDay yearMonthDay69 = property62.addWrapFieldToCopy(25755126);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = localDateTime6.compareTo((org.joda.time.ReadablePartial) yearMonthDay69);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hours" + "'", str51, "hours");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 25755235L + "'", long57 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-292275054) + "'", int65 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay4.withFieldAdded(durationFieldType8, 12);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTimeAtCurrentTime();
        int int13 = yearMonthDay10.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(26214236, 0, 26191, 26127376, 23016, 2005, 0, 188);
        boolean boolean23 = yearMonthDay10.equals((java.lang.Object) 26127376);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getRangeDurationType();
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        boolean boolean15 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.year();
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.minusHours(2740);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withTime(693, 261, 26155678, (-38084));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 693 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withChronology(chronology18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        boolean boolean26 = dateMidnight17.equals((java.lang.Object) mutablePeriod24);
        boolean boolean27 = property8.equals((java.lang.Object) dateMidnight17);
        org.joda.time.TimeOfDay timeOfDay28 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay29 = property8.withMaximumValue();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType31 = periodType30.withMonthsRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType33 = periodType31.withDaysRemoved();
        org.joda.time.PeriodType periodType34 = periodType31.withMillisRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withMinutesRemoved();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.year();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        int int47 = dateMidnight46.getEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateMidnight46.toDateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusDays(9);
        int int52 = dateTime49.getEra();
        org.joda.time.DateTime dateTime53 = dateTime49.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.Chronology chronology56 = chronology43.withZone(dateTimeZone54);
        long long60 = chronology43.add(5L, 0L, 1);
        org.joda.time.DateTimeField dateTimeField61 = chronology43.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField62 = chronology43.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight63 = org.joda.time.DateMidnight.now(chronology43);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology43);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.DateTimeField dateTimeField66 = chronology43.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period67 = new org.joda.time.Period((java.lang.Object) timeOfDay29, periodType35, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 5L + "'", long60 == 5L);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.minutes();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 14, chronology38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology38);
        int int45 = dateMidnight44.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight44.withFieldAdded(durationFieldType47, 25896112);
        org.joda.time.Period period51 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.hours();
        java.lang.String str53 = durationFieldType52.toString();
        org.joda.time.Period period55 = period51.withField(durationFieldType52, 2);
        int int56 = period51.size();
        org.joda.time.MutablePeriod mutablePeriod57 = period51.toMutablePeriod();
        org.joda.time.PeriodType periodType58 = mutablePeriod57.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(periodType58);
        org.joda.time.Period period61 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        java.lang.String str63 = durationFieldType62.toString();
        org.joda.time.Period period65 = period61.withField(durationFieldType62, 2);
        org.joda.time.Period period67 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.hours();
        java.lang.String str69 = durationFieldType68.toString();
        org.joda.time.Period period71 = period67.withField(durationFieldType68, 2);
        org.joda.time.Period period72 = period65.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.MutablePeriod mutablePeriod73 = period65.toMutablePeriod();
        boolean boolean74 = periodType58.equals((java.lang.Object) mutablePeriod73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight44.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod73, 0);
        int int77 = dateMidnight76.getMinuteOfDay();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53 + "'", int45 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hours" + "'", str53, "hours");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hours" + "'", str63, "hours");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hours" + "'", str69, "hours");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.year();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateMidnight31.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusDays(9);
        int int37 = dateTime34.getEra();
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.Chronology chronology41 = chronology28.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.year();
        java.util.Locale locale48 = new java.util.Locale("hi!", "");
        java.lang.String str49 = property45.getAsText(locale48);
        org.joda.time.LocalDateTime localDateTime50 = property45.withMaximumValue();
        int int52 = localDateTime50.getValue(3);
        boolean boolean53 = dateTimeZone42.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight3.withZoneRetainFields(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(16010L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight57 = org.joda.time.DateMidnight.now(dateTimeZone42);
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = null;
        org.joda.time.format.DateTimeParser dateTimeParser60 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter59, dateTimeParser60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter61.withPivotYear((int) (byte) 10);
        boolean boolean64 = dateTimeFormatter63.isParser();
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.000Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter63.withLocale(locale66);
        java.lang.String str68 = locale66.getVariant();
        java.lang.String str69 = dateTimeZone42.getShortName(1645513921177L, locale66);
        long long71 = dateTimeZone42.previousTransition(255139200000L);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone42);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 26339548 + "'", int52 == 26339548);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 255139200000L + "'", long71 == 255139200000L);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        int int13 = property12.get();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addToCopy(25839);
        int int16 = property12.getMaximumValue();
        int int17 = property12.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = property12.setCopy(28187252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28187252 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.dayOfWeek();
        long long46 = dateTimeField43.getDifferenceAsLong((long) 86399, (long) 8);
        java.lang.String str48 = dateTimeField43.getAsShortText(1222905600000L);
        java.lang.String str50 = dateTimeField43.getAsText((long) 874);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u661f\u671f\u56db" + "'", str48, "\u661f\u671f\u56db");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u661f\u671f\u56db" + "'", str50, "\u661f\u671f\u56db");
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        boolean boolean8 = interval5.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight14.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateMidnight31.toLocalDate();
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        int int46 = mutablePeriod44.getMinutes();
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        boolean boolean53 = mutablePeriod44.isSupported(durationFieldType49);
        long long56 = chronology33.add((org.joda.time.ReadablePeriod) mutablePeriod44, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology33.withZone(dateTimeZone57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 11, chronology58);
        org.joda.time.DurationField durationField60 = chronology58.days();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology58);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        int int65 = dateMidnight64.getEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateMidnight64.toDateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks(0);
        org.joda.time.Interval interval70 = interval61.withStart((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean71 = interval5.overlaps((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Interval interval72 = interval5.toInterval();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 25755235L + "'", long56 == 25755235L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(25887018);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int43 = mutablePeriod41.getMinutes();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType46);
        long long53 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 25755035, 2);
        org.joda.time.LocalDate localDate54 = localDate8.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.LocalDate.Property property55 = localDate8.dayOfWeek();
        java.lang.String str56 = localDate8.toString();
        org.joda.time.LocalDate.Property property57 = localDate8.era();
        int int58 = property57.getMaximumValueOverall();
        org.joda.time.LocalDate localDate59 = property57.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate60 = property57.getLocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.centuryOfEra();
        java.lang.String str62 = property61.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 25755235L + "'", long53 == 25755235L);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1900-01-01" + "'", str56, "1900-01-01");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Property[centuryOfEra]" + "'", str62, "Property[centuryOfEra]");
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("halfdays", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        int int12 = dateMidnight10.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withField(dateTimeFieldType13, 3);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight10.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableInstant18);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        java.lang.String str21 = period19.toString();
        boolean boolean22 = strSet6.contains((java.lang.Object) period19);
        java.util.stream.Stream<java.lang.String> strStream23 = strSet6.parallelStream();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime29 = property26.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.DateMidnight.Property property34 = dateMidnight32.monthOfYear();
        org.joda.time.DateMidnight dateMidnight36 = property34.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property34.getFieldType();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime29.property(dateTimeFieldType37);
        java.lang.String str39 = mutableDateTime29.toString();
        mutableDateTime29.setMillisOfDay((int) (byte) 10);
        int int42 = mutableDateTime29.getSecondOfDay();
        int int43 = mutableDateTime29.getCenturyOfEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology47);
        org.joda.time.Interval interval49 = yearMonthDay48.toInterval();
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology54);
        org.joda.time.Interval interval56 = yearMonthDay55.toInterval();
        org.joda.time.Period period57 = interval56.toPeriod();
        long long58 = interval56.getStartMillis();
        org.joda.time.Interval interval59 = interval49.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType61 = periodType60.withMillisRemoved();
        org.joda.time.Period period62 = interval59.toPeriod(periodType61);
        org.joda.time.DateTime dateTime63 = interval59.getEnd();
        org.joda.time.DateTime dateTime64 = dateTime63.toDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean66 = strSet6.contains((java.lang.Object) mutablePeriod65);
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.Locale.LanguageRange[] languageRangeArray68 = strSet6.toArray(languageRangeArray67);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutablePeriod20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P52Y1M3WT7H18M59.723S" + "'", str21, "P52Y1M3WT7H18M59.723S");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str39, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-61038316800000L) + "'", long58 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray17 = mutablePeriod16.getValues();
        int int18 = mutablePeriod16.getYears();
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod16.copy();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight2.minus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight20);
        int int22 = localTime21.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval2 = yearMonthDay1.toInterval();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime8 = property5.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = property5.addWrapField(993);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology22);
        org.joda.time.Interval interval24 = yearMonthDay23.toInterval();
        org.joda.time.Period period25 = interval24.toPeriod();
        long long26 = interval24.getStartMillis();
        org.joda.time.Interval interval27 = interval17.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        java.lang.String str50 = chronology49.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfDay();
        org.joda.time.Interval interval52 = interval17.withChronology(chronology49);
        org.joda.time.DurationField durationField53 = chronology49.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology49.era();
        mutableDateTime10.setChronology(chronology49);
        mutableDateTime10.addYears(26030181);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setDateTime(257892, 26130, (-17639), 45, 26266802, (-1706), 26094629);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61038316800000L) + "'", long26 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[UTC]" + "'", str50, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        int int9 = periodType8.size();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.halfdays();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology62);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, periodType8, chronology62);
        org.joda.time.DateTime dateTime67 = interval5.getStart();
        org.joda.time.DateTime dateTime68 = dateTime67.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime69 = dateTime67.toDateTime();
        org.joda.time.DateTime dateTime71 = dateTime67.plusWeeks(25774925);
        int int72 = dateTime71.getMinuteOfHour();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25755235L + "'", long60 == 25755235L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        java.lang.String str4 = property3.getName();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfEven();
        boolean boolean7 = mutableDateTime5.equals((java.lang.Object) (-968L));
        mutableDateTime5.setMillis((long) 26);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        int int15 = dateMidnight13.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withField(dateTimeFieldType16, 3);
        org.joda.time.LocalTime localTime20 = localTime10.withField(dateTimeFieldType16, 993);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int22 = localTime10.indexOf(dateTimeFieldType21);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime28 = property25.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime30 = property25.addWrapField(993);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property25.getFieldType();
        org.joda.time.LocalTime localTime33 = localTime10.withField(dateTimeFieldType31, 80);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime5.property(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "secondOfDay" + "'", str4, "secondOfDay");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1 Jan 1970 00:02:00 GMT");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Interval interval9 = interval7.withEndMillis((long) 2);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology13);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Period period23 = interval22.toPeriod();
        long long24 = interval22.getStartMillis();
        org.joda.time.Interval interval25 = interval15.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.Duration duration44 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight28.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.LocalDate localDate46 = dateMidnight45.toLocalDate();
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        java.lang.String str48 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.secondOfDay();
        org.joda.time.Interval interval50 = interval15.withChronology(chronology47);
        org.joda.time.DurationField durationField51 = chronology47.minutes();
        org.joda.time.Interval interval52 = interval9.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField53 = chronology47.dayOfYear();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        int int55 = dateTimeField53.getMaximumShortTextLength(locale54);
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone1, locale54);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-61038316800000L) + "'", long24 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.100S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645514339928,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=59,MILLISECOND=928,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = strSet0.add("25791265");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = date1.getHours();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromDateFields(date1);
        java.lang.String str6 = localTime4.toString("86399");
        org.joda.time.LocalTime localTime8 = localTime4.withMillisOfDay(25785);
        org.joda.time.LocalTime.Property property9 = localTime4.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime4.withMinuteOfHour(25902750);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25902750 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "86399" + "'", str6, "86399");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property8.getFieldType();
        org.joda.time.TimeOfDay timeOfDay16 = property8.setCopy((int) (byte) 0);
        org.joda.time.DurationField durationField17 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField18 = property8.getField();
        int int19 = property8.get();
        org.joda.time.TimeOfDay timeOfDay21 = property8.setCopy(55);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusMinutes((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay21.plusHours(123);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology26);
        org.joda.time.Interval interval28 = yearMonthDay27.toInterval();
        org.joda.time.Interval interval30 = interval28.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.DateTime.Property property32 = dateTime31.secondOfDay();
        boolean boolean33 = localDate20.equals((java.lang.Object) property32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property32.getFieldType();
        org.joda.time.DateTime dateTime35 = property32.roundFloorCopy();
        java.lang.String str36 = property32.getAsString();
        org.joda.time.DateTime dateTime38 = property32.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.weekOfWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime38.withDurationAdded((long) 50, 464);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        int int3 = dateTimeZone1.getStandardOffset(1222905600000L);
        long long5 = dateTimeZone1.previousTransition((long) 50);
        long long8 = dateTimeZone1.adjustOffset((long) 25813919, false);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(3600041L, dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 50L + "'", long5 == 50L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 25813919L + "'", long8 == 25813919L);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 56);
        java.util.Locale locale21 = dateTimeFormatter18.getLocale();
        org.joda.time.Chronology chronology22 = dateTimeFormatter18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval25 = yearMonthDay24.toInterval();
        int int26 = yearMonthDay24.size();
        org.joda.time.Period period28 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        java.lang.String str30 = durationFieldType29.toString();
        org.joda.time.Period period32 = period28.withField(durationFieldType29, 2);
        int int33 = period28.size();
        org.joda.time.MutablePeriod mutablePeriod34 = period28.toMutablePeriod();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutablePeriod34.add(readableDuration35);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay24.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        java.lang.String str38 = yearMonthDay24.toString();
        org.joda.time.Chronology chronology39 = yearMonthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter18.withChronology(chronology39);
        java.lang.Appendable appendable42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.year();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.yearOfCentury();
        org.joda.time.Interval interval52 = property51.toInterval();
        org.joda.time.MutableInterval mutableInterval53 = interval52.toMutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone56);
        int int58 = dateMidnight57.getEra();
        org.joda.time.DateMidnight.Property property59 = dateMidnight57.monthOfYear();
        org.joda.time.DateMidnight dateMidnight60 = property59.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight61 = property59.roundCeilingCopy();
        int int62 = dateMidnight61.getSecondOfMinute();
        boolean boolean63 = mutableInterval53.contains((org.joda.time.ReadableInstant) dateMidnight61);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(appendable42, (org.joda.time.ReadableInstant) dateMidnight61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hours" + "'", str30, "hours");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 31536000000L + "'", long54 == 31536000000L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 0, periodType1, chronology23);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology53);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay54.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight55.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus((long) (byte) -1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight60, chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight60.withCenturyOfEra(8);
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight64.toMutableDateTimeISO();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology69);
        org.joda.time.Interval interval71 = yearMonthDay70.toInterval();
        org.joda.time.Period period72 = interval71.toPeriod();
        org.joda.time.Period period74 = period72.withSeconds((int) '#');
        org.joda.time.Period period76 = period72.minusHours(25758818);
        org.joda.time.Period period78 = period76.withDays(31);
        mutableDateTime65.add((org.joda.time.ReadablePeriod) period76, (-5087));
        org.joda.time.Period period81 = period49.minus((org.joda.time.ReadablePeriod) period76);
        int int82 = period76.getMillis();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25755235L + "'", long46 == 25755235L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate20.weekyear();
        org.joda.time.LocalDate localDate24 = property22.addToCopy(25755126);
        org.joda.time.LocalDate localDate25 = property22.roundCeilingCopy();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.LocalDate localDate38 = localDate25.minus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.LocalDate.Property property39 = localDate38.weekyear();
        org.joda.time.LocalDate localDate41 = property39.setCopy(0);
        org.joda.time.LocalDate localDate42 = property39.getLocalDate();
        org.joda.time.DateTime dateTime43 = localDate42.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        java.util.Date date8 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromDateFields(date8);
        int int10 = timeOfDay9.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay17 = property15.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay18 = property15.withMaximumValue();
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay20 = property15.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property15.getFieldType();
        org.joda.time.TimeOfDay timeOfDay23 = property15.setCopy((int) (byte) 0);
        int int24 = timeOfDay23.getSecondOfMinute();
        java.lang.String str25 = timeOfDay23.toString();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.monthOfYear();
        org.joda.time.DateMidnight dateMidnight28 = property27.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = property27.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight31 = property27.addToCopy((long) 6);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone32);
        int int35 = dateTimeZone32.getOffset(4L);
        org.joda.time.DateTime dateTime36 = timeOfDay23.toDateTimeToday(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(26054709, 604, 25924452, 861, 26050903, 25970777, 259287, dateTimeZone32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 861 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "T23:00:00.000" + "'", str25, "T23:00:00.000");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.DurationField durationField26 = property8.getDurationField();
        int int27 = property8.get();
        org.joda.time.TimeOfDay timeOfDay29 = property8.addWrapFieldToCopy(69);
        int int30 = timeOfDay29.getMinuteOfHour();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay29.hourOfDay();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = period28.plusSeconds(4);
        org.joda.time.Period period33 = period28.plusMillis(25880638);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        org.joda.time.Duration duration52 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = property56.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime59 = property56.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        int int63 = dateMidnight62.getEra();
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.monthOfYear();
        org.joda.time.DateMidnight dateMidnight66 = property64.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property64.getFieldType();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime59.property(dateTimeFieldType67);
        boolean boolean69 = dateMidnight36.isSupported(dateTimeFieldType67);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType67.getDurationType();
        org.joda.time.Chronology chronology71 = null;
        boolean boolean72 = durationFieldType70.isSupported(chronology71);
        org.joda.time.Period period74 = period33.withFieldAdded(durationFieldType70, 58);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        boolean boolean9 = dateMidnight8.isBeforeNow();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withYearOfEra(1972);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundFloor();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableInstant) mutableDateTime16);
        boolean boolean19 = interval18.isAfterNow();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.io.IOException iOException3 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException5 = new java.io.IOException("PT0.100S");
        java.lang.Exception[] exceptionArray6 = new java.lang.Exception[] { iOException3, iOException5 };
        java.lang.Exception[] exceptionArray7 = strSet1.toArray(exceptionArray6);
        strSet1.clear();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.io.IOException iOException21 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException23 = new java.io.IOException("PT0.100S");
        java.lang.Exception[] exceptionArray24 = new java.lang.Exception[] { iOException21, iOException23 };
        java.lang.Exception[] exceptionArray25 = strSet19.toArray(exceptionArray24);
        strSet19.clear();
        strSet19.clear();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet19);
        boolean boolean29 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet1.spliterator();
        int int31 = strSet1.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = strSet1.add("1 Aug 2721 23:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(exceptionArray6);
        org.junit.Assert.assertNotNull(exceptionArray7);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(exceptionArray24);
        org.junit.Assert.assertNotNull(exceptionArray25);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(26045302, 26209054, (-5));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26045302 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay10 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        java.lang.String str12 = property8.getAsText();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.weekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology37.halfdayOfDay();
        boolean boolean46 = dateTimeField45.isLenient();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.setCopy(11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(9);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        java.lang.String str33 = dateTimeZone32.toString();
        org.joda.time.DateTime dateTime34 = dateTime18.toDateTime(dateTimeZone32);
        int int36 = dateTimeZone32.getStandardOffset((-1L));
        int int38 = dateTimeZone32.getStandardOffset((long) 25762033);
        org.joda.time.DateTime dateTime39 = localDate11.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        java.lang.String str31 = chronology23.toString();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology23.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = chronology23.secondOfMinute();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        int int10 = property7.getLeapAmount();
        org.joda.time.LocalDate localDate12 = property7.addToCopy(7);
        org.joda.time.LocalDate localDate13 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate15 = property7.addToCopy(8);
        org.joda.time.LocalDate localDate16 = property7.getLocalDate();
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtMidnight();
        int int18 = localDate16.getEra();
        org.joda.time.LocalDate localDate20 = localDate16.withWeekyear(26028277);
        org.joda.time.LocalDate.Property property21 = localDate16.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        java.util.Date date6 = dateTime5.toDate();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date6);
        int int8 = date6.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.addDays(86399);
        int int18 = mutablePeriod14.size();
        int int19 = mutablePeriod14.getDays();
        mutablePeriod14.addHours(85);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86403 + "'", int19 == 86403);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = nameProvider0.getName(locale1, "", "0035-10-10");
        java.util.Locale locale7 = new java.util.Locale("hi!", "");
        java.lang.String str8 = locale7.getDisplayVariant();
        java.lang.String str11 = nameProvider0.getName(locale7, "Wed Nov 23 07:10:36 GMT 2738", "centuryOfEra");
        java.lang.String str12 = locale7.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.secondOfDay();
        org.joda.time.DateTime dateTime27 = property26.roundCeilingCopy();
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.Chronology chronology37 = null;
        mutablePeriod33.setPeriod((long) 0, (long) 12, chronology37);
        mutableDateTime15.add((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime15.secondOfMinute();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("days");
        java.util.Calendar calendar43 = mutableDateTime15.toCalendar(locale42);
        java.lang.String str44 = locale7.getDisplayVariant(locale42);
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale42.getDisplayCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.012S");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "days");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=47,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=47,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.addWrapField(993);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Period period35 = period33.withDays((-1));
        org.joda.time.PeriodType periodType36 = period35.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime7.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.millisOfDay();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime41.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime49 = property48.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.roundFloor();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology54);
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay55.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight56.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime50, (org.joda.time.ReadableInstant) dateMidnight56, periodType60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        int int65 = dateMidnight64.getEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateMidnight64.toDateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusDays(9);
        int int70 = dateTime67.getEra();
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime71.getZone();
        long long75 = dateTimeZone72.adjustOffset((long) 5, true);
        boolean boolean77 = dateTimeZone72.isStandardOffset((long) 3);
        mutableDateTime50.setZoneRetainFields(dateTimeZone72);
        java.lang.String str80 = dateTimeZone72.getShortName((long) (-292275054));
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((-196577279999999990L), dateTimeZone72);
        mutableDateTime44.setZone(dateTimeZone72);
        org.joda.time.DateTime dateTime83 = mutableDateTime7.toDateTime(dateTimeZone72);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 5L + "'", long75 == 5L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        boolean boolean8 = interval5.isAfter(100L);
        org.joda.time.DateTime dateTime9 = interval5.getEnd();
        int int10 = dateTime9.getYearOfEra();
        org.joda.time.DateTime.Property property11 = dateTime9.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(9);
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone31);
        int int36 = dateTime20.getYearOfCentury();
        org.joda.time.DateTime dateTime37 = dateTime20.toDateTimeISO();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology42);
        org.joda.time.Interval interval44 = yearMonthDay43.toInterval();
        org.joda.time.Period period45 = interval44.toPeriod();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology49);
        org.joda.time.Interval interval51 = yearMonthDay50.toInterval();
        org.joda.time.Period period52 = interval51.toPeriod();
        long long53 = interval51.getStartMillis();
        org.joda.time.Interval interval54 = interval44.overlap((org.joda.time.ReadableInterval) interval51);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType56 = periodType55.withMillisRemoved();
        org.joda.time.Period period57 = interval54.toPeriod(periodType56);
        org.joda.time.PeriodType periodType58 = periodType56.withSecondsRemoved();
        org.joda.time.Period period59 = interval38.toPeriod(periodType56);
        org.joda.time.PeriodType periodType60 = periodType56.withDaysRemoved();
        java.lang.String str61 = periodType60.getName();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 70 + "'", int36 == 70);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-61038316800000L) + "'", long53 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "YearMonthDayNoDays" + "'", str61, "YearMonthDayNoDays");
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateMidnight3.toLocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks(100);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate.Property property8 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate10 = localDate4.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundFloor();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableInstant) dateMidnight22, periodType26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateMidnight30.toDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays(9);
        int int36 = dateTime33.getEra();
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        long long41 = dateTimeZone38.adjustOffset((long) 5, true);
        boolean boolean43 = dateTimeZone38.isStandardOffset((long) 3);
        mutableDateTime16.setZoneRetainFields(dateTimeZone38);
        java.lang.String str46 = dateTimeZone38.getShortName((long) (-292275054));
        org.joda.time.DateMidnight dateMidnight47 = localDate4.toDateMidnight(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(30412L, dateTimeZone38);
        int int49 = mutableDateTime48.getYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime48.setDate(48, 26156297, 25816024);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26156297 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5L + "'", long41 == 5L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        int int9 = periodType8.size();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.halfdays();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology62);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, periodType8, chronology62);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, 100L, periodType69, chronology70);
        java.lang.Object obj72 = mutablePeriod71.clone();
        org.joda.time.Interval interval73 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Interval interval74 = interval5.toInterval();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone76);
        int int78 = dateMidnight77.getEra();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = dateMidnight77.toDateTime(chronology79);
        org.joda.time.DateTime dateTime82 = dateTime80.plusDays(9);
        org.joda.time.DateTime.Property property83 = dateTime80.monthOfYear();
        org.joda.time.DateTime dateTime85 = dateTime80.plusDays(0);
        boolean boolean86 = interval74.isAfter((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Period period87 = interval74.toPeriod();
        int int88 = period87.getYears();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25755235L + "'", long60 == 25755235L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "PT0.100S");
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.Period period4 = new org.joda.time.Period(14010L, (long) 25768718);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight0.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period7 = org.joda.time.Period.days(1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.DateTime dateTime13 = yearMonthDay12.toDateTimeAtCurrentTime();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        org.joda.time.Period period44 = period42.withMillis((int) '#');
        org.joda.time.LocalDate localDate45 = localDate36.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period47 = period44.minusYears(21);
        org.joda.time.Period period49 = period44.minusSeconds((int) (byte) 10);
        org.joda.time.Period period51 = period44.plusYears(25795116);
        boolean boolean52 = gregorianCalendar14.before((java.lang.Object) period51);
        org.joda.time.Period period54 = period51.minusWeeks(25787857);
        org.joda.time.Period period55 = period7.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = period4.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period58 = period56.withSeconds(1973);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) yearMonthDay4);
        org.joda.time.LocalDate localDate21 = localDate19.minusDays(25768718);
        int int22 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate.Property property23 = localDate19.yearOfCentury();
        org.joda.time.LocalDate.Property property24 = localDate19.monthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        java.lang.String str23 = mutableDateTime13.toString();
        org.joda.time.DateTime dateTime24 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Interval interval25 = yearMonthDay7.toInterval();
        long long26 = interval25.toDurationMillis();
        boolean boolean28 = interval25.isBefore((long) 707);
        org.joda.time.MutableInterval mutableInterval29 = interval25.toMutableInterval();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86400000L + "'", long26 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableInterval29);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("P52Y1M3WT7H18M20.826S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P52Y1M3WT7H18M20.826S\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMaximumValue();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 53);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime1.add(durationFieldType2, 24);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(0);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime14.withCenturyOfEra(70);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMinutes(6);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime18.withHourOfDay(14);
        org.joda.time.DateTime dateTime23 = dateTime18.minusHours(353);
        int int24 = dateTime23.getMillisOfSecond();
        int int25 = dateTime23.getYearOfCentury();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        int int30 = dateMidnight29.getEra();
        int int31 = dateMidnight29.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withField(dateTimeFieldType32, 3);
        org.joda.time.LocalTime localTime36 = localTime26.withField(dateTimeFieldType32, 993);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int38 = localTime26.indexOf(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime44 = property41.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime46 = property41.addWrapField(993);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property41.getFieldType();
        org.joda.time.LocalTime localTime49 = localTime26.withField(dateTimeFieldType47, 80);
        int int50 = dateTime23.get(dateTimeFieldType47);
        boolean boolean51 = mutableDateTime1.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 25560000 + "'", int50 == 25560000);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Interval interval24 = interval22.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        boolean boolean26 = interval13.contains((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology30);
        org.joda.time.Interval interval32 = yearMonthDay31.toInterval();
        org.joda.time.DateTime dateTime33 = yearMonthDay31.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property35 = dateTime33.property(dateTimeFieldType34);
        org.joda.time.DateTime.Property property36 = dateTime33.minuteOfDay();
        org.joda.time.DateTime.Property property37 = dateTime33.monthOfYear();
        org.joda.time.DateTime.Property property38 = dateTime33.centuryOfEra();
        org.joda.time.LocalDate localDate39 = dateTime33.toLocalDate();
        boolean boolean40 = interval24.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology41 = dateTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 25935133, chronology41);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        org.joda.time.DateMidnight dateMidnight10 = property9.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        org.joda.time.DateMidnight dateMidnight12 = property9.roundHalfFloorCopy();
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider14);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("1900-01-01");
        java.lang.String str20 = nameProvider14.getName(locale17, "DurationField[seconds]", "May 11, 2022 7:09:54 AM");
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight22 = property9.setCopy("2022-02-15T07:15:48.307", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:15:48.307\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        java.lang.String str23 = mutableDateTime13.toString();
        org.joda.time.DateTime dateTime24 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Interval interval25 = yearMonthDay7.toInterval();
        org.joda.time.Interval interval26 = yearMonthDay7.toInterval();
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval26.withPeriodAfterStart(readablePeriod28);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str23, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight23 = property21.setCopy(16);
        org.joda.time.DateMidnight dateMidnight25 = property21.addWrapFieldToCopy(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.era();
        org.joda.time.LocalDate localDate9 = localDate3.plusWeeks(8);
        org.joda.time.LocalDate localDate11 = localDate3.plusDays(25910291);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        java.lang.String str16 = durationFieldType15.getName();
        int int17 = periodType13.indexOf(durationFieldType15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        int int53 = mutablePeriod51.getMinutes();
        org.joda.time.Period period55 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.hours();
        java.lang.String str57 = durationFieldType56.toString();
        org.joda.time.Period period59 = period55.withField(durationFieldType56, 2);
        boolean boolean60 = mutablePeriod51.isSupported(durationFieldType56);
        long long63 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod51, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology40.withZone(dateTimeZone64);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 11, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(100L, periodType13, chronology65);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology65);
        mutableDateTime69.setMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone73);
        int int75 = dateMidnight74.getEra();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = dateMidnight74.toDateTime(chronology76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusDays(9);
        int int80 = dateTime77.getEra();
        org.joda.time.DateTime dateTime81 = dateTime77.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone82 = dateTime81.getZone();
        java.lang.String str83 = dateTimeZone82.toString();
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay(dateTimeZone82);
        mutableDateTime69.setZone(dateTimeZone82);
        org.joda.time.LocalDate localDate86 = org.joda.time.LocalDate.now(dateTimeZone82);
        org.joda.time.DateTime dateTime87 = localDate3.toDateTimeAtCurrentTime(dateTimeZone82);
        int int88 = dateTime87.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "days" + "'", str16, "days");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hours" + "'", str57, "hours");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 25755235L + "'", long63 == 25755235L);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 70 + "'", int88 == 70);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        int int7 = yearMonthDay6.size();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        int int26 = dateMidnight25.getEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        mutablePeriod18.setPeriod((long) (byte) 100, (long) (byte) -1, chronology27);
        org.joda.time.Period period29 = new org.joda.time.Period(1645513759767L, periodType1, chronology27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.Period period32 = new org.joda.time.Period((long) 25770065);
        org.joda.time.Period period34 = period32.minusWeeks(25756429);
        org.joda.time.Period period36 = period32.minusMonths(25766043);
        org.joda.time.DateTime dateTime37 = dateTime30.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(0L, dateTimeZone39);
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusWeeks(100);
        org.joda.time.Chronology chronology44 = localDate41.getChronology();
        org.joda.time.LocalDate.Property property45 = localDate41.yearOfCentury();
        org.joda.time.LocalDate localDate46 = property45.roundCeilingCopy();
        org.joda.time.LocalDate localDate47 = property45.roundFloorCopy();
        int int48 = property45.getLeapAmount();
        org.joda.time.LocalDate localDate50 = property45.addToCopy(7);
        org.joda.time.LocalDate localDate51 = property45.roundCeilingCopy();
        org.joda.time.LocalDate localDate53 = property45.addToCopy(8);
        org.joda.time.LocalDate localDate54 = property45.getLocalDate();
        org.joda.time.LocalDate localDate55 = property45.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.monthOfYear();
        org.joda.time.DateMidnight dateMidnight62 = property60.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property60.getFieldType();
        boolean boolean64 = localDate55.isSupported(dateTimeFieldType63);
        int int65 = dateTime30.get(dateTimeFieldType63);
        org.joda.time.Chronology chronology66 = null;
        boolean boolean67 = dateTimeFieldType63.isSupported(chronology66);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType63.getDurationType();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(durationFieldType68);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = chronology26.withZone(dateTimeZone50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 11, chronology51);
        org.joda.time.DurationField durationField53 = chronology51.days();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology51);
        org.joda.time.DateTimeField dateTimeField55 = chronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.weekyear();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(9226891L, (long) 26215633, chronology51);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        java.util.Locale locale11 = new java.util.Locale("hi!", "");
        java.lang.String str12 = property8.getAsShortText(locale11);
        org.joda.time.TimeOfDay timeOfDay14 = property8.addNoWrapToCopy(0);
        org.joda.time.TimeOfDay timeOfDay15 = property8.withMaximumValue();
        org.joda.time.DateTime dateTime16 = timeOfDay15.toDateTimeToday();
        org.joda.time.LocalTime localTime17 = timeOfDay15.toLocalTime();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMonths(32);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMillis((int) (short) 0);
        boolean boolean18 = dateTime14.isBefore(14400000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime.Property property20 = dateTime14.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(1977);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime22.withDayOfYear(25887224);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25887224 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(36, 25827480, 1434, 283);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter18.getParser();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter18.withZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatter21.getParser();
        java.io.Writer writer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(writer24, 25801L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertNull(dateTimeParser23);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.Period period8 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        java.lang.String str10 = durationFieldType9.toString();
        org.joda.time.Period period12 = period8.withField(durationFieldType9, 2);
        org.joda.time.Period period14 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        java.lang.String str16 = durationFieldType15.toString();
        org.joda.time.Period period18 = period14.withField(durationFieldType15, 2);
        org.joda.time.Period period19 = period12.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = period19.getYears();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period23 = period19.withFieldAdded(durationFieldType21, 25787857);
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period23, (long) 25805812);
        org.joda.time.DateTimeField dateTimeField26 = chronology6.clockhourOfDay();
        org.joda.time.DurationField durationField27 = chronology6.millis();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight28.toYearMonthDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hours" + "'", str10, "hours");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hours" + "'", str16, "hours");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 7, 10, 5, 812]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime11 = dateTime7.withFieldAdded(durationFieldType9, 5);
        org.joda.time.TimeOfDay timeOfDay12 = dateTime7.toTimeOfDay();
        org.joda.time.Instant instant13 = dateTime7.toInstant();
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTimeISO();
        mutableDateTime14.addSeconds(19);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate8.minusMonths(283);
        org.joda.time.LocalDate.Property property14 = localDate13.weekyear();
        int int15 = localDate13.getMonthOfYear();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add((long) 3);
        mutableDateTime20.setDayOfMonth((int) (byte) 10);
        mutableDateTime20.add((long) 6);
        java.lang.Object obj25 = mutableDateTime20.clone();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime20.hourOfDay();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime20.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime29.property(dateTimeFieldType30);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(10L);
        org.joda.time.Interval interval34 = yearMonthDay33.toInterval();
        int int35 = yearMonthDay33.size();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        int int42 = period37.size();
        org.joda.time.MutablePeriod mutablePeriod43 = period37.toMutablePeriod();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutablePeriod43.add(readableDuration44);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay33.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        java.lang.String str47 = yearMonthDay33.toString();
        org.joda.time.Chronology chronology48 = yearMonthDay33.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfWeek();
        boolean boolean51 = dateTimeFieldType30.isSupported(chronology48);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType30.getDurationType();
        boolean boolean53 = localDate13.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "2022-01-10T00:00:00.009Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01" + "'", str47, "1970-01-01");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.centuryOfEra();
        org.joda.time.LocalDate localDate23 = property21.addWrapFieldToCopy(2022);
        org.joda.time.LocalDate localDate25 = property21.addWrapFieldToCopy(21);
        org.joda.time.LocalDate localDate26 = property21.withMaximumValue();
        org.joda.time.LocalDate localDate27 = property21.withMinimumValue();
        org.joda.time.LocalDate localDate28 = property21.getLocalDate();
        org.joda.time.LocalDate localDate29 = property21.roundCeilingCopy();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.Duration duration54 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration54, periodType56);
        boolean boolean58 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime4.yearOfCentury();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime4.dayOfMonth();
        mutableDateTime4.addHours(292278994);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone65);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, 100L, periodType69, chronology70);
        java.lang.Object obj72 = mutablePeriod71.clone();
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(0L, 100L, periodType75, chronology76);
        mutablePeriod71.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod77);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone80);
        org.joda.time.Duration duration82 = mutablePeriod71.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight81);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight66.plus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.LocalDate localDate84 = dateMidnight83.toLocalDate();
        org.joda.time.Period period86 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType87 = org.joda.time.DurationFieldType.hours();
        java.lang.String str88 = durationFieldType87.toString();
        org.joda.time.Period period90 = period86.withField(durationFieldType87, 2);
        org.joda.time.Period period92 = period90.withMillis((int) '#');
        org.joda.time.LocalDate localDate93 = localDate84.minus((org.joda.time.ReadablePeriod) period92);
        int int94 = period92.getMonths();
        org.joda.time.Duration duration95 = period92.toStandardDuration();
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration95);
        int int97 = mutableDateTime4.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "PT0.100S");
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hours" + "'", str88, "hours");
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.addDays(86399);
        int int18 = mutablePeriod14.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology22);
        org.joda.time.Interval interval24 = yearMonthDay23.toInterval();
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.joda.time.Period period32 = interval31.toPeriod();
        long long33 = interval31.getStartMillis();
        org.joda.time.Interval interval34 = interval24.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTime dateTime35 = interval31.getEnd();
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval31);
        mutablePeriod14.setWeeks(816);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-61038316800000L) + "'", long33 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology37.seconds();
        org.joda.time.DurationField durationField44 = chronology37.centuries();
        org.joda.time.DurationField durationField45 = chronology37.seconds();
        org.joda.time.DurationFieldType durationFieldType46 = durationField45.getType();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationFieldType46);
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        int int8 = localDateTime7.getEra();
        int int9 = localDateTime7.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withWeekyear(25762033);
        int int12 = localDateTime7.size();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusDays(25805812);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusMillis((-278));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime8.withZoneRetainFields(dateTimeZone19);
        int int24 = dateTime8.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime8.minusHours(12);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = property51.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime53 = property51.roundFloor();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology57);
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay58.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) dateMidnight59, periodType63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight59.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Duration duration68 = duration47.toDuration();
        org.joda.time.DateTime dateTime69 = dateTime8.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone74);
        int int76 = dateMidnight75.getEra();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateMidnight75.toDateTime(chronology77);
        org.joda.time.DateTime dateTime80 = dateTime78.plusDays(9);
        int int81 = dateTime78.getEra();
        org.joda.time.DateTime dateTime82 = dateTime78.toDateTime();
        org.joda.time.DateTime.Property property83 = dateTime82.secondOfDay();
        org.joda.time.DateTime dateTime84 = property83.roundCeilingCopy();
        mutableDateTime72.setDate((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(0L, 100L, periodType88, chronology89);
        java.lang.Object obj91 = mutablePeriod90.clone();
        org.joda.time.Chronology chronology94 = null;
        mutablePeriod90.setPeriod((long) 0, (long) 12, chronology94);
        mutableDateTime72.add((org.joda.time.ReadablePeriod) mutablePeriod90);
        int int97 = mutableDateTime72.getWeekyear();
        int int98 = dateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.DateTime.Property property99 = dateTime8.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "PT0.012S");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1970 + "'", int97 == 1970);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate20.weekyear();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfYear();
        org.joda.time.LocalDate localDate25 = property24.roundFloorCopy();
        org.joda.time.LocalDate localDate26 = property24.withMaximumValue();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        long long16 = interval14.getStartMillis();
        org.joda.time.Interval interval17 = interval7.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfDay();
        org.joda.time.Interval interval42 = interval7.withChronology(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfMonth();
        org.joda.time.Period period44 = new org.joda.time.Period((long) (-292275054), periodType1, chronology39);
        int int45 = period44.getMillis();
        org.joda.time.Period period47 = period44.plusHours(25756429);
        org.joda.time.Period period49 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.Period period53 = period49.withField(durationFieldType50, 2);
        org.joda.time.Period period55 = period49.minusSeconds(2);
        java.lang.String str56 = period49.toString();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        int int60 = dateMidnight59.getEra();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateMidnight59.toDateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusDays(9);
        org.joda.time.DateTime.Property property65 = dateTime62.monthOfYear();
        org.joda.time.DateTime dateTime67 = dateTime62.plusDays(0);
        org.joda.time.DateTime dateTime68 = dateTime67.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        int int72 = dateMidnight71.getEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = dateMidnight71.toDateTime(chronology73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusDays(9);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis(6);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period49, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period81 = period44.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period82 = period81.negated();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61038316800000L) + "'", long16 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-54) + "'", int45 == (-54));
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hours" + "'", str51, "hours");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.100S" + "'", str56, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period82);
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList18);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet22);
        boolean boolean24 = strSet10.containsAll((java.util.Collection<java.lang.String>) strSet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet22.spliterator();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMillis((int) (short) 10);
        java.lang.String str33 = localDateTime32.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.year();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withYearOfCentury(4);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        int int46 = dateMidnight45.getEra();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        java.lang.Object obj52 = mutablePeriod51.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone60);
        org.joda.time.Duration duration62 = mutablePeriod51.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight45, (org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone65);
        int int67 = dateMidnight66.getEra();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(0L, 100L, periodType70, chronology71);
        java.lang.Object obj73 = mutablePeriod72.clone();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(0L, 100L, periodType76, chronology77);
        mutablePeriod72.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone81);
        org.joda.time.Duration duration83 = mutablePeriod72.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight82);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight66, (org.joda.time.ReadableDuration) duration83);
        boolean boolean85 = duration62.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime42.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (short) 10);
        boolean boolean89 = strSet22.equals((java.lang.Object) localDateTime32);
        java.util.Locale locale90 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet91 = locale90.getUnicodeLocaleAttributes();
        java.io.IOException iOException93 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException95 = new java.io.IOException("PT0.100S");
        java.lang.Exception[] exceptionArray96 = new java.lang.Exception[] { iOException93, iOException95 };
        java.lang.Exception[] exceptionArray97 = strSet91.toArray(exceptionArray96);
        strSet91.clear();
        boolean boolean99 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet91);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-15T07:19:01.163" + "'", str33, "2022-02-15T07:19:01.163");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0.100S");
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "PT0.100S");
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(exceptionArray96);
        org.junit.Assert.assertNotNull(exceptionArray97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 3);
        mutableDateTime15.setDayOfMonth((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusDays(9);
        int int26 = dateTime23.getEra();
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = localDate48.toInterval(dateTimeZone49);
        boolean boolean51 = dateTime23.equals((java.lang.Object) dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateMidnight54.toDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(9);
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.secondOfDay();
        boolean boolean63 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property64 = dateTime61.weekOfWeekyear();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Instant instant66 = dateTime61.toInstant();
        boolean boolean67 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime68 = dateTime61.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) (short) 10);
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYearOfCentury(4);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        int int41 = dateMidnight40.getEra();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.Duration duration57 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadableDuration) duration57);
        boolean boolean59 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime16.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusDays(1970);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.yearOfEra();
        int int66 = localDateTime64.getDayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-15T07:19:01.250" + "'", str7, "2022-02-15T07:19:01.250");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology37.seconds();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = localDate44.toDateMidnight(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtMidnight();
        int int48 = localDate44.getCenturyOfEra();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        long long12 = durationField9.getDifferenceAsLong((long) 47, (long) 19045);
        long long15 = durationField9.getMillis((-35796902400000L), (long) 25877966);
        long long18 = durationField9.add(2228365296000787L, (long) 31556952);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2147814144000000000L) + "'", long15 == (-2147814144000000000L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2230258713120787L + "'", long18 == 2230258713120787L);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableDuration) duration36);
        boolean boolean38 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateMidnight19);
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Calendar calendar40 = dateMidnight19.toCalendar(locale39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight19.withYearOfEra(42);
        org.joda.time.Interval interval43 = dateMidnight19.toInterval();
        org.joda.time.DateMidnight.Property property44 = dateMidnight19.year();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Duration duration6 = interval5.toDuration();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundFloor();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay42.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateMidnight43, periodType47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight43.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Period period52 = duration31.toPeriod();
        mutablePeriod11.setPeriod((org.joda.time.ReadableDuration) duration31);
        java.lang.Object obj54 = null;
        boolean boolean55 = duration31.equals(obj54);
        org.joda.time.Interval interval56 = interval5.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight59.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval64 = dateMidnight59.toInterval();
        org.joda.time.Interval interval66 = interval64.withStartMillis(7200035L);
        org.joda.time.Interval interval67 = interval56.overlap((org.joda.time.ReadableInterval) interval64);
        // The following exception was thrown during execution in test generation
        try {
            long long68 = interval67.getEndMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNull(interval67);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(0L, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateMidnight3.toLocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks(100);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate.Property property8 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        int int11 = property8.getLeapAmount();
        org.joda.time.LocalDate localDate13 = property8.addToCopy(7);
        org.joda.time.LocalDate localDate14 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = property8.addToCopy(8);
        org.joda.time.LocalDate localDate17 = property8.getLocalDate();
        org.joda.time.LocalDate localDate18 = property8.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.roundFloor();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology27);
        org.joda.time.DateMidnight dateMidnight29 = yearMonthDay28.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateMidnight29, periodType33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateMidnight37.toDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusDays(9);
        int int43 = dateTime40.getEra();
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime44.getZone();
        long long48 = dateTimeZone45.adjustOffset((long) 5, true);
        boolean boolean50 = dateTimeZone45.isStandardOffset((long) 3);
        mutableDateTime23.setZoneRetainFields(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(dateTimeZone45);
        org.joda.time.Interval interval54 = localDate18.toInterval(dateTimeZone45);
        java.lang.String str55 = dateTimeZone45.toString();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 26224975, dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 5L + "'", long48 == 5L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(interval54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime dateTime11 = property8.addToCopy((long) 25774925);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        int int17 = yearMonthDay16.getDayOfMonth();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(periodType18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, 25755035);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.withYear(18);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime29 = property26.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.DateMidnight.Property property34 = dateMidnight32.monthOfYear();
        org.joda.time.DateMidnight dateMidnight36 = property34.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property34.getFieldType();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime29.property(dateTimeFieldType37);
        java.lang.String str39 = mutableDateTime29.toString();
        mutableDateTime29.setMillisOfDay((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime29.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime29.setZone(dateTimeZone43);
        org.joda.time.Interval interval45 = yearMonthDay21.toInterval(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime11.withZoneRetainFields(dateTimeZone43);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone43.getShortName((long) 25888624, locale48);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str39, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(70);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMinutes(6);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.secondOfDay();
        org.joda.time.DateTime dateTime30 = property29.roundCeilingCopy();
        mutableDateTime18.setDate((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.Chronology chronology40 = null;
        mutablePeriod36.setPeriod((long) 0, (long) 12, chronology40);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int43 = mutableDateTime18.getHourOfDay();
        int int44 = mutableDateTime18.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime18.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField47.getType();
        boolean boolean49 = dateTime15.isSupported(dateTimeFieldType48);
        java.lang.String str50 = dateTimeFieldType48.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.012S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "yearOfEra" + "'", str50, "yearOfEra");
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval16 = interval6.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) 25790484, chronology38);
        org.joda.time.LocalDate localDate44 = yearMonthDay43.toLocalDate();
        int int45 = localDate44.getCenturyOfEra();
        int int46 = localDate44.getYearOfCentury();
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant48 = dateTime47.toInstant();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61038316800000L) + "'", long15 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 70 + "'", int46 == 70);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant48);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("P52Y1M3WT7H16M22.422S");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear(7);
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology27);
        org.joda.time.Interval interval29 = yearMonthDay28.toInterval();
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property32 = dateTime30.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = property32.getDateTime();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        int int36 = property32.getMaximumShortTextLength(locale34);
        java.lang.String str39 = nameProvider23.getName(locale34, "", "ISOChronology[UTC]");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter20.withLocale(locale34);
        boolean boolean41 = duration15.equals((java.lang.Object) locale34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) boolean41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT0.100S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(nameProvider23);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        org.joda.time.Period period7 = period1.minusSeconds(2);
        java.lang.String str8 = period1.toString();
        org.joda.time.Period period9 = period1.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod10 = period1.toMutablePeriod();
        org.joda.time.Period period12 = period1.minusHours(33);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology16);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay17.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((long) (byte) -1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight23, chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.withCenturyOfEra(8);
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTimeISO();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) mutableDateTime28);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getRangeDurationType();
        int int14 = localDateTime9.indexOf(dateTimeFieldType12);
        boolean boolean15 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.plusDays((-1));
        int int18 = localDateTime9.getYearOfEra();
        java.lang.String str20 = localDateTime9.toString("2");
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.millisOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.secondOfDay();
        java.lang.String str25 = property24.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundHalfEven();
        int int27 = mutableDateTime26.getYear();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        java.lang.String str30 = durationFieldType29.toString();
        mutablePeriod28.set(durationFieldType29, 9);
        mutableDateTime26.add(durationFieldType29, 6);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime9.withFieldAdded(durationFieldType29, 1977);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property45.getFieldType();
        boolean boolean47 = localDateTime9.isSupported(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2021 + "'", int18 == 2021);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hours" + "'", str30, "hours");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType9 = periodType8.withMillisRemoved();
        int int10 = periodType9.size();
        org.joda.time.Period period12 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        org.joda.time.Period period16 = period12.withField(durationFieldType13, 2);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        int int51 = mutablePeriod49.getMinutes();
        org.joda.time.Period period53 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.Period period57 = period53.withField(durationFieldType54, 2);
        boolean boolean58 = mutablePeriod49.isSupported(durationFieldType54);
        long long61 = chronology38.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology38.withZone(dateTimeZone62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        org.joda.time.DurationField durationField66 = durationFieldType13.getField(chronology63);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) interval6, periodType9, chronology63);
        org.joda.time.PeriodType periodType68 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType69 = periodType9.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(96305874810000L, periodType69);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hours" + "'", str55, "hours");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 25755235L + "'", long61 == 25755235L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("1AM19700");
        java.util.Locale.Builder builder4 = builder2.setRegion("AM");
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.Builder builder7 = builder4.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguageTag("Property[era]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Property[era] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "German" + "'", str6, "German");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(0L, (long) 1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(10L);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) yearMonthDay29, (long) 8);
        org.joda.time.DateTimeField dateTimeField32 = chronology24.secondOfDay();
        org.joda.time.DurationField durationField33 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField34 = chronology24.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.Duration duration53 = mutablePeriod42.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight37.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.LocalDate localDate55 = dateMidnight54.toLocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.dayOfYear();
        org.joda.time.LocalDate localDate57 = property56.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate59 = localDate57.withWeekyear(11);
        long long61 = chronology24.set((org.joda.time.ReadablePartial) localDate57, (-604800001L));
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(0L, dateTimeZone63);
        org.joda.time.LocalDate localDate65 = dateMidnight64.toLocalDate();
        int int66 = localDate65.getDayOfYear();
        org.joda.time.LocalDate localDate68 = localDate65.minusDays(169);
        java.lang.String str69 = localDate68.toString();
        long long71 = chronology24.set((org.joda.time.ReadablePartial) localDate68, (-1L));
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(0L, chronology24);
        org.joda.time.YearMonthDay yearMonthDay73 = new org.joda.time.YearMonthDay(chronology24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray74 = yearMonthDay73.getFieldTypes();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 8L + "'", long31 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 86399999L + "'", long61 == 86399999L);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1969-07-16" + "'", str69, "1969-07-16");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-14515200001L) + "'", long71 == (-14515200001L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray74);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addToCopy(34739);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek(25871120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25871120 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight2 = property1.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight4 = property1.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((-8639999985L));
        org.joda.time.Period period11 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period13 = period11.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateMidnight16.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks(0);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear((int) (short) 10);
        org.joda.time.Duration duration24 = period11.toDurationTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology35);
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.Period period38 = interval37.toPeriod();
        long long39 = interval37.getStartMillis();
        org.joda.time.Interval interval40 = interval30.overlap((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology44);
        org.joda.time.Interval interval46 = yearMonthDay45.toInterval();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Interval interval48 = interval46.withPeriodBeforeEnd(readablePeriod47);
        boolean boolean49 = interval30.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        int int53 = dateMidnight52.getEra();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        java.lang.Object obj59 = mutablePeriod58.clone();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        org.joda.time.Duration duration69 = mutablePeriod58.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, (org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone72);
        int int74 = dateMidnight73.getEra();
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, 100L, periodType77, chronology78);
        java.lang.Object obj80 = mutablePeriod79.clone();
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(0L, 100L, periodType83, chronology84);
        mutablePeriod79.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod85);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone88);
        org.joda.time.Duration duration90 = mutablePeriod79.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight73, (org.joda.time.ReadableDuration) duration90);
        boolean boolean92 = duration69.isLongerThan((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Interval interval93 = interval30.withDurationAfterStart((org.joda.time.ReadableDuration) duration69);
        int int94 = duration24.compareTo((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Interval interval96 = dateMidnight4.toInterval();
        org.joda.time.DateMidnight.Property property97 = dateMidnight4.monthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-61038316800000L) + "'", long39 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT0.100S");
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "PT0.100S");
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime18 = property16.withMaximumValue();
        org.joda.time.LocalTime localTime19 = property16.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.joda.time.LocalTime localTime22 = property16.addCopy(26041116);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.LocalDate.Property property13 = localDate12.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(0);
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        int int18 = dateTimeField16.getLeapAmount((long) 25851001);
        long long20 = dateTimeField16.roundHalfCeiling(7827816495816002451L);
        int int22 = dateTimeField16.getMinimumValue((long) 66);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 7827816495312000000L + "'", long20 == 7827816495312000000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        java.util.Locale locale3 = new java.util.Locale("26062756", "P25762033Y59M10WT1H-1M120.021S", "+00:00");
        java.lang.String str4 = locale3.getScript();
        org.junit.Assert.assertEquals(locale3.toString(), "26062756_P25762033Y59M10WT1H-1M120.021S_+00:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter7.getZone();
        boolean boolean10 = dateTimeFormatter7.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 7, chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter7.withChronology(chronology18);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((-2208988800000L), chronology18);
        java.util.Date date25 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromDateFields(date25);
        int int27 = timeOfDay26.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.withMinuteOfHour(0);
        java.lang.String str32 = timeOfDay29.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        int int36 = dateMidnight35.getEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateMidnight35.toDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks(0);
        int int41 = dateTime38.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime38.getZone();
        org.joda.time.DateTime dateTime43 = timeOfDay29.toDateTimeToday(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localTime23.toDateTimeToday(dateTimeZone42);
        org.joda.time.LocalTime.Property property45 = localTime23.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        int int49 = dateMidnight48.getEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateMidnight48.toDateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(0);
        org.joda.time.LocalDate localDate54 = dateTime51.toLocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(0L, 100L, periodType60, chronology61);
        java.lang.Object obj63 = mutablePeriod62.clone();
        java.lang.String str64 = mutablePeriod62.toString();
        mutableDateTime57.add((org.joda.time.ReadablePeriod) mutablePeriod62, 2022);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime57.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone69);
        int int71 = dateMidnight70.getEra();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = dateMidnight70.toDateTime(chronology72);
        org.joda.time.DateTime dateTime75 = dateTime73.plusDays(9);
        int int76 = dateTime73.getEra();
        org.joda.time.DateTime dateTime77 = dateTime73.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime77.getZone();
        long long81 = dateTimeZone78.adjustOffset((long) 5, true);
        mutableDateTime57.setZoneRetainFields(dateTimeZone78);
        java.util.TimeZone timeZone83 = dateTimeZone78.toTimeZone();
        long long85 = dateTimeZone78.convertUTCToLocal(25755235L);
        java.lang.String str87 = dateTimeZone78.getShortName(31556952000L);
        java.lang.String str89 = dateTimeZone78.getNameKey(10L);
        java.lang.String str91 = dateTimeZone78.getNameKey(2203200000L);
        org.joda.time.LocalDateTime localDateTime92 = null;
        boolean boolean93 = dateTimeZone78.isLocalDateTimeGap(localDateTime92);
        org.joda.time.DateMidnight dateMidnight94 = localDate54.toDateMidnight(dateTimeZone78);
        org.joda.time.LocalDate localDate96 = localDate54.withYear(25762309);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period97 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localDate54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "T23:54:00.000" + "'", str32, "T23:54:00.000");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0.100S" + "'", str64, "PT0.100S");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 5L + "'", long81 == 5L);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 25755235L + "'", long85 == 25755235L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "UTC" + "'", str89, "UTC");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "UTC" + "'", str91, "UTC");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(localDate96);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.property(dateTimeFieldType13);
        mutableDateTime5.setMinuteOfHour(46);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology27);
        org.joda.time.Interval interval29 = yearMonthDay28.toInterval();
        org.joda.time.Period period30 = interval29.toPeriod();
        long long31 = interval29.getStartMillis();
        org.joda.time.Interval interval32 = interval22.overlap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        java.lang.String str55 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfDay();
        org.joda.time.Interval interval57 = interval22.withChronology(chronology54);
        org.joda.time.DurationField durationField58 = chronology54.minutes();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.secondOfMinute();
        long long63 = chronology54.add(31556952000L, (-61662790239443L), 0);
        mutableDateTime5.setChronology(chronology54);
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now(chronology54);
        org.joda.time.DurationField durationField66 = chronology54.hours();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-61038316800000L) + "'", long31 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 31556952000L + "'", long63 == 31556952000L);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        org.joda.time.LocalTime localTime16 = localTime13.minusMinutes(2022);
        org.joda.time.DateTime dateTime17 = localTime16.toDateTimeToday();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add((long) 3);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        int int26 = dateMidnight25.getEra();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        int int47 = dateMidnight46.getEra();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        org.joda.time.Duration duration63 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableDuration) duration63);
        boolean boolean65 = duration42.isLongerThan((org.joda.time.ReadableDuration) duration63);
        java.lang.String str66 = duration63.toString();
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.format.PeriodFormatter periodFormatter69 = null;
        java.lang.String str70 = period68.toString(periodFormatter69);
        java.lang.String str71 = period68.toString();
        int int72 = period68.getMinutes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.100S");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0.100S" + "'", str66, "PT0.100S");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT0.100S" + "'", str70, "PT0.100S");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT0.100S" + "'", str71, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Interval interval23 = interval21.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        boolean boolean25 = interval12.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfDay();
        org.joda.time.DateTime.Property property36 = dateTime32.monthOfYear();
        org.joda.time.DateTime.Property property37 = dateTime32.centuryOfEra();
        org.joda.time.LocalDate localDate38 = dateTime32.toLocalDate();
        boolean boolean39 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology40 = dateTime32.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withDayOfYear(26085778);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26085778 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(25762033, 21, 32769);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int15 = property13.getMaximumTextLength(locale14);
        java.util.Calendar.Builder builder16 = builder0.setLocale(locale14);
        java.util.Calendar calendar17 = builder16.build();
        calendar17.set(169, 70, (int) (short) -1, 70, 20);
        java.lang.String str24 = calendar17.getCalendarType();
        boolean boolean25 = calendar17.isWeekDateSupported();
        java.lang.String str26 = calendar17.toString();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=169,MONTH=70,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=-1,DAY_OF_YEAR=171,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=70,MINUTE=20,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gregory" + "'", str24, "gregory");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=169,MONTH=70,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=-1,DAY_OF_YEAR=171,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=70,MINUTE=20,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str26, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=169,MONTH=70,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=-1,DAY_OF_YEAR=171,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=70,MINUTE=20,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        mutablePeriod25.addMillis(0);
        mutablePeriod25.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        org.joda.time.Duration duration59 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight43.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        java.lang.Object obj68 = mutablePeriod67.clone();
        java.lang.String str69 = mutablePeriod67.toString();
        mutableDateTime62.add((org.joda.time.ReadablePeriod) mutablePeriod67, 2022);
        mutablePeriod25.setPeriod((org.joda.time.ReadableInstant) dateMidnight60, (org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime62.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.millisOfDay();
        org.joda.time.DateTime dateTime75 = localDate20.toDateTime((org.joda.time.ReadableInstant) mutableDateTime73);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone77);
        int int79 = dateMidnight78.getEra();
        org.joda.time.Chronology chronology80 = dateMidnight78.getChronology();
        mutableDateTime73.setChronology(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.secondOfDay();
        long long85 = dateTimeField82.add((-196577279999999990L), (-8639999985L));
        java.util.Locale locale89 = new java.util.Locale("hi!", "");
        java.lang.String str90 = locale89.getDisplayVariant();
        java.lang.String str91 = locale89.getCountry();
        boolean boolean92 = locale89.hasExtensions();
        java.lang.String str93 = dateTimeField82.getAsShortText(0L, locale89);
        long long95 = dateTimeField82.roundCeiling((long) 25857465);
        int int97 = dateTimeField82.getLeapAmount((long) (-17412996));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT0.100S" + "'", str69, "PT0.100S");
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-196585919999984990L) + "'", long85 == (-196585919999984990L));
        org.junit.Assert.assertEquals(locale89.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0" + "'", str93, "0");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 25858000L + "'", long95 == 25858000L);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.Interval interval13 = interval5.withEnd((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weeks();
        mutableDateTime12.add(durationFieldType15, 25888624);
        int int18 = mutableDateTime12.getRoundingMode();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime12 = property8.addWrapFieldToCopy((int) '4');
        java.util.Locale locale13 = java.util.Locale.KOREA;
        int int14 = property8.getMaximumShortTextLength(locale13);
        java.lang.String str15 = locale13.getISO3Language();
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet16.spliterator();
        boolean boolean18 = strSet16.isEmpty();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        org.joda.time.LocalTime localTime16 = localTime13.plusSeconds(111);
        org.joda.time.LocalTime.Property property17 = localTime16.minuteOfHour();
        org.joda.time.LocalTime localTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalTime localTime19 = property17.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime20 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateMidnight23.toDateTime(chronology25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.Period period29 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.hours();
        java.lang.String str31 = durationFieldType30.toString();
        org.joda.time.Period period33 = period29.withField(durationFieldType30, 2);
        org.joda.time.Period period35 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.hours();
        java.lang.String str37 = durationFieldType36.toString();
        org.joda.time.Period period39 = period35.withField(durationFieldType36, 2);
        org.joda.time.Period period40 = period33.minus((org.joda.time.ReadablePeriod) period39);
        int int41 = period40.getYears();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period44 = period40.withFieldAdded(durationFieldType42, 25787857);
        int[] intArray46 = chronology27.get((org.joda.time.ReadablePeriod) period44, (long) 25805812);
        org.joda.time.DurationField durationField47 = chronology27.hours();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(chronology27);
        int int49 = localTime20.compareTo((org.joda.time.ReadablePartial) localTime48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property51 = localTime48.property(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hours" + "'", str31, "hours");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hours" + "'", str37, "hours");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 7, 10, 5, 812]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight25);
        boolean boolean29 = interval27.isAfter(27425229L);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Interval interval31 = interval27.withPeriodAfterStart(readablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        int int35 = dateMidnight34.getEra();
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = property36.addToCopy((long) ' ');
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        boolean boolean40 = interval31.contains((org.joda.time.ReadableInstant) dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.get();
        org.joda.time.DurationField durationField58 = property54.getRangeDurationField();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNull(durationField58);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property23 = localDate22.year();
        org.joda.time.Chronology chronology24 = localDate22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        long long12 = durationField9.getDifferenceAsLong((long) 47, (long) 19045);
        org.joda.time.DurationFieldType durationFieldType13 = durationField9.getType();
        org.joda.time.DurationFieldType durationFieldType14 = durationField9.getType();
        long long17 = durationField9.getMillis((long) 26170474, (-10119362L));
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1570228440000L + "'", long17 == 1570228440000L);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(25762033, 21, 32769);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(0, 15, 25814298, 1982);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder11 = builder0.setCalendarType("2021-12-14T07:09:32.007");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 2021-12-14T07:09:32.007");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.addWrapField((int) (short) 0);
        org.joda.time.Period period7 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        java.lang.String str9 = durationFieldType8.toString();
        org.joda.time.Period period11 = period7.withField(durationFieldType8, 2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight14.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateMidnight31.toLocalDate();
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        int int46 = mutablePeriod44.getMinutes();
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        boolean boolean53 = mutablePeriod44.isSupported(durationFieldType49);
        long long56 = chronology33.add((org.joda.time.ReadablePeriod) mutablePeriod44, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology33.withZone(dateTimeZone57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.DurationField durationField60 = chronology58.halfdays();
        org.joda.time.DurationField durationField61 = durationFieldType8.getField(chronology58);
        mutableDateTime5.setChronology(chronology58);
        org.joda.time.DurationField durationField63 = chronology58.minutes();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) ' ', chronology58);
        org.joda.time.Period period66 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.hours();
        java.lang.String str68 = durationFieldType67.toString();
        org.joda.time.Period period70 = period66.withField(durationFieldType67, 2);
        org.joda.time.Period period72 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.hours();
        java.lang.String str74 = durationFieldType73.toString();
        org.joda.time.Period period76 = period72.withField(durationFieldType73, 2);
        org.joda.time.Period period77 = period70.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period79 = period76.withDays(25770065);
        int int80 = period79.size();
        long long83 = chronology58.add((org.joda.time.ReadablePeriod) period79, (long) 48, 46);
        org.joda.time.Period period85 = period79.plusWeeks((-1970));
        int int86 = period79.size();
        org.joda.time.Period period88 = period79.minusMinutes(794);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod();
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.hours();
        java.lang.String str91 = durationFieldType90.toString();
        mutablePeriod89.set(durationFieldType90, 9);
        java.lang.String str94 = durationFieldType90.toString();
        int int95 = period79.indexOf(durationFieldType90);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hours" + "'", str9, "hours");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 25755235L + "'", long56 == 25755235L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hours" + "'", str68, "hours");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hours" + "'", str74, "hours");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 102420546667204648L + "'", long83 == 102420546667204648L);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hours" + "'", str91, "hours");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "hours" + "'", str94, "hours");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.property(dateTimeFieldType13);
        java.lang.String str15 = mutableDateTime5.toString();
        mutableDateTime5.setMillisOfDay((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime5.weekOfWeekyear();
        mutableDateTime5.setWeekOfWeekyear(9);
        mutableDateTime5.add((long) 713);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str15, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        int int42 = mutablePeriod40.getMinutes();
        org.joda.time.Period period44 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        java.lang.String str46 = durationFieldType45.toString();
        org.joda.time.Period period48 = period44.withField(durationFieldType45, 2);
        boolean boolean49 = mutablePeriod40.isSupported(durationFieldType45);
        long long52 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod40, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology29.withZone(dateTimeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DurationField durationField56 = chronology54.halfdays();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.clockhourOfDay();
        org.joda.time.DurationField durationField58 = chronology54.months();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.era();
        org.joda.time.DurationField durationField60 = chronology54.seconds();
        org.joda.time.DateTimeField dateTimeField61 = chronology54.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) 719, chronology54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(1911, 2000, 25916743, 26306179, 26243500, 437, (-59), chronology54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26306179 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours" + "'", str46, "hours");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 25755235L + "'", long52 == 25755235L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        int int8 = dateTime7.getYearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime7.withCenturyOfEra(16);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime10);
        int int12 = mutableDateTime11.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.addWrapField((int) (short) 0);
        org.joda.time.Period period20 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        java.lang.String str22 = durationFieldType21.toString();
        org.joda.time.Period period24 = period20.withField(durationFieldType21, 2);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        java.lang.Object obj52 = mutablePeriod51.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod57);
        int int59 = mutablePeriod57.getMinutes();
        org.joda.time.Period period61 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        java.lang.String str63 = durationFieldType62.toString();
        org.joda.time.Period period65 = period61.withField(durationFieldType62, 2);
        boolean boolean66 = mutablePeriod57.isSupported(durationFieldType62);
        long long69 = chronology46.add((org.joda.time.ReadablePeriod) mutablePeriod57, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology46.withZone(dateTimeZone70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology71);
        org.joda.time.DurationField durationField73 = chronology71.halfdays();
        org.joda.time.DurationField durationField74 = durationFieldType21.getField(chronology71);
        mutableDateTime18.setChronology(chronology71);
        org.joda.time.DurationField durationField76 = chronology71.minutes();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) ' ', chronology71);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now(chronology71);
        mutableDateTime11.setChronology(chronology71);
        int int80 = mutableDateTime11.getEra();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime11.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.addWrapField(298);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hours" + "'", str22, "hours");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hours" + "'", str63, "hours");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 25755235L + "'", long69 == 25755235L);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime83);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.year();
        org.joda.time.DurationField durationField48 = chronology46.minutes();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(15);
        org.joda.time.Chronology chronology51 = chronology46.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = chronology46.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(chronology46);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        mutablePeriod6.setYears(11);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.plus((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutablePeriod6.setYears(93);
        mutablePeriod6.addMillis(38);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology17);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.Period period20 = interval19.toPeriod();
        long long21 = interval19.getStartMillis();
        org.joda.time.Interval interval22 = interval12.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        java.lang.String str45 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfDay();
        org.joda.time.Interval interval47 = interval12.withChronology(chronology44);
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        long long52 = chronology44.add(30412L, (long) 14, 25793899);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(chronology44);
        org.joda.time.DurationField durationField54 = chronology44.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((-38084), 26281018, 840000, (-25753062), 26248059, 288479, 26030617, chronology44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -25753062 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61038316800000L) + "'", long21 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 361144998L + "'", long52 == 361144998L);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(16, (int) (byte) 0, 7);
        int int6 = calendar0.getGreatestMinimum(0);
        calendar0.setMinimalDaysInFirstWeek(8);
        java.time.Instant instant9 = calendar0.toInstant();
        java.time.Instant instant10 = calendar0.toInstant();
        int int12 = calendar0.getMaximum(8);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        int int15 = localTime13.getMillisOfSecond();
        java.util.Date date17 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromDateFields(date17);
        int int19 = timeOfDay18.getSecondOfMinute();
        org.joda.time.LocalTime localTime20 = timeOfDay18.toLocalTime();
        org.joda.time.LocalTime localTime22 = localTime20.withHourOfDay((int) (byte) 0);
        org.joda.time.DateTime dateTime23 = localTime20.toDateTimeToday();
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra(50);
        org.joda.time.DateTime dateTime27 = dateTime23.withEra(0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        int int52 = dateMidnight51.getEra();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        java.lang.Object obj58 = mutablePeriod57.clone();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        org.joda.time.Duration duration68 = mutablePeriod57.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight51, (org.joda.time.ReadableDuration) duration68);
        boolean boolean70 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration68);
        java.lang.String str71 = duration68.toString();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration68);
        org.joda.time.LocalTime localTime73 = localTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61662789657742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=8,ERA=1,YEAR=15,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=2,MILLISECOND=258,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 258 + "'", int15 == 258);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "PT0.100S");
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT0.100S" + "'", str71, "PT0.100S");
        org.junit.Assert.assertNotNull(localTime73);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((-1));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.Period period46 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        java.lang.String str48 = durationFieldType47.toString();
        org.joda.time.Period period50 = period46.withField(durationFieldType47, 2);
        org.joda.time.Period period52 = period50.withMillis((int) '#');
        org.joda.time.LocalDate localDate53 = localDate44.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.LocalDate localDate55 = localDate53.minusYears(11);
        int int56 = localDate53.getYearOfEra();
        int int57 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDate53);
        long long60 = dateTimeField23.set((-1L), 22);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology65);
        org.joda.time.Interval interval67 = yearMonthDay66.toInterval();
        org.joda.time.DateTime dateTime68 = yearMonthDay66.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property70 = dateTime68.property(dateTimeFieldType69);
        org.joda.time.DateTime dateTime71 = property70.getDateTime();
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale73 = locale72.stripExtensions();
        int int74 = property70.getMaximumShortTextLength(locale72);
        java.lang.String str75 = dateTimeField23.getAsShortText((long) 32772, locale72);
        java.lang.String str76 = locale72.getDisplayLanguage();
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(locale72);
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale79);
        java.lang.String str81 = locale79.getDisplayVariant();
        java.util.Locale.setDefault(category78, locale79);
        java.lang.String str83 = locale72.getDisplayName(locale79);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hours" + "'", str48, "hours");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-86377001L) + "'", long60 == (-86377001L));
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "32" + "'", str75, "32");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Chinese" + "'", str76, "Chinese");
        org.junit.Assert.assertNotNull(calendar77);
// flaky:         org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1645514342305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=2,MILLISECOND=305,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category78.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1645514342305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=2,MILLISECOND=305,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Chinese (China)" + "'", str83, "Chinese (China)");
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.setCopy(11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(9);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        java.lang.String str33 = dateTimeZone32.toString();
        org.joda.time.DateTime dateTime34 = dateTime18.toDateTime(dateTimeZone32);
        int int36 = dateTimeZone32.getStandardOffset((-1L));
        int int38 = dateTimeZone32.getStandardOffset((long) 25762033);
        org.joda.time.DateTime dateTime39 = localDate11.toDateTimeAtCurrentTime(dateTimeZone32);
        int int40 = localDate11.getMonthOfYear();
        int int41 = localDate11.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        java.lang.String str8 = mutablePeriod6.toString();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6, 2022);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        long long25 = dateTimeZone22.adjustOffset((long) 5, true);
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        boolean boolean28 = timeZone27.observesDaylightTime();
        boolean boolean29 = timeZone27.observesDaylightTime();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.Duration duration49 = mutablePeriod38.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight33.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDate localDate51 = dateMidnight50.toLocalDate();
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        java.lang.String str53 = chronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.secondOfDay();
        long long56 = dateTimeField54.roundHalfFloor(100L);
        java.util.Locale locale60 = new java.util.Locale("hi!", "");
        java.lang.String str61 = locale60.getDisplayVariant();
        java.lang.String str62 = locale60.getCountry();
        java.lang.String str63 = dateTimeField54.getAsShortText((long) 16, locale60);
        java.lang.String str64 = locale30.getDisplayLanguage(locale60);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone27, locale60);
        calendar65.setLenient(false);
        int int68 = calendar65.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5L + "'", long25 == 5L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Japanese" + "'", str64, "Japanese");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645514342354,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=2,MILLISECOND=354,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 53 + "'", int68 == 53);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        int int9 = property8.get();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        mutablePeriod14.addMillis(0);
        mutablePeriod14.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        java.lang.String str58 = mutablePeriod56.toString();
        mutableDateTime51.add((org.joda.time.ReadablePeriod) mutablePeriod56, 2022);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addWeekyears((int) (byte) 0);
        mutableDateTime51.setSecondOfMinute(8);
        int int66 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeField dateTimeField67 = property8.getField();
        org.joda.time.DateTimeField dateTimeField68 = property8.getField();
        org.joda.time.DurationField durationField69 = property8.getDurationField();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0.100S" + "'", str58, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 25755035, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(25756429);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.LocalDate localDate55 = yearMonthDay51.toLocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusWeeks(25810113);
        org.joda.time.DateMidnight dateMidnight58 = localDate55.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus((long) 654);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25755235L + "'", long49 == 25755235L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.DurationField durationField49 = chronology46.minutes();
        org.joda.time.DurationField durationField50 = chronology46.millis();
        long long53 = durationField50.getMillis((long) 25976722, (-61661939127345L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 25976722L + "'", long53 == 25976722L);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withDayOfMonth((int) (byte) 1);
        org.joda.time.Interval interval7 = dateMidnight2.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration30, periodType32);
        org.joda.time.Interval interval34 = interval7.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Period period37 = interval7.toPeriod(periodType35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology41);
        org.joda.time.Interval interval43 = yearMonthDay42.toInterval();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.millisOfDay();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime45.secondOfDay();
        java.lang.String str48 = property47.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime49 = property47.getMutableDateTime();
        boolean boolean50 = interval43.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        boolean boolean51 = interval43.containsNow();
        boolean boolean52 = interval7.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Interval interval53 = interval43.toInterval();
        org.joda.time.Duration duration54 = interval53.toDuration();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology58);
        int int60 = yearMonthDay59.getDayOfMonth();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType61);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay59.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod62, 25755035);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay64.withYear(18);
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime71 = property69.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime72 = property69.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone74);
        int int76 = dateMidnight75.getEra();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.monthOfYear();
        org.joda.time.DateMidnight dateMidnight79 = property77.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property77.getFieldType();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime72.property(dateTimeFieldType80);
        java.lang.String str82 = mutableDateTime72.toString();
        mutableDateTime72.setMillisOfDay((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime72.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime72.setZone(dateTimeZone86);
        org.joda.time.Interval interval88 = yearMonthDay64.toInterval(dateTimeZone86);
        org.joda.time.Chronology chronology89 = interval88.getChronology();
        org.joda.time.Interval interval90 = interval53.overlap((org.joda.time.ReadableInterval) interval88);
        boolean boolean92 = interval88.contains((long) 414);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str82, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.LocalDate localDate34 = localDate29.plusYears(59);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Interval interval38 = localDate36.toInterval(dateTimeZone37);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        boolean boolean40 = interval38.equals((java.lang.Object) filteringMode39);
        boolean boolean41 = interval5.isAfter((org.joda.time.ReadableInterval) interval38);
        java.lang.String str42 = interval5.toString();
        long long43 = interval5.getStartMillis();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology47);
        int int49 = yearMonthDay48.size();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay48.plus((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod58.addDays(86399);
        int int62 = mutablePeriod58.size();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology66);
        org.joda.time.Interval interval68 = yearMonthDay67.toInterval();
        org.joda.time.Period period69 = interval68.toPeriod();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology73);
        org.joda.time.Interval interval75 = yearMonthDay74.toInterval();
        org.joda.time.Period period76 = interval75.toPeriod();
        long long77 = interval75.getStartMillis();
        org.joda.time.Interval interval78 = interval68.overlap((org.joda.time.ReadableInterval) interval75);
        org.joda.time.DateTime dateTime79 = interval75.getEnd();
        mutablePeriod58.setPeriod((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Duration duration81 = interval75.toDuration();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.YearMonthDay yearMonthDay86 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology85);
        org.joda.time.Interval interval87 = yearMonthDay86.toInterval();
        org.joda.time.Interval interval89 = interval87.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime90 = interval89.getEnd();
        org.joda.time.DateTime.Property property91 = dateTime90.secondOfDay();
        org.joda.time.DateTime dateTime93 = dateTime90.withEra((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone94 = null;
        org.joda.time.DateTime dateTime95 = dateTime90.toDateTime(dateTimeZone94);
        org.joda.time.DateTime.Property property96 = dateTime90.millisOfDay();
        boolean boolean97 = interval75.contains((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Interval interval98 = interval5.gap((org.joda.time.ReadableInterval) interval75);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z" + "'", str42, "0035-10-10T00:00:00.000Z/0035-10-11T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-61038316800000L) + "'", long43 == (-61038316800000L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-61038316800000L) + "'", long77 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(interval98);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int11 = localDateTime6.get(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.Period period20 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        java.lang.String str22 = durationFieldType21.toString();
        org.joda.time.Period period24 = period20.withField(durationFieldType21, 2);
        org.joda.time.Period period26 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        java.lang.String str28 = durationFieldType27.toString();
        org.joda.time.Period period30 = period26.withField(durationFieldType27, 2);
        org.joda.time.Period period31 = period24.minus((org.joda.time.ReadablePeriod) period30);
        int int32 = period31.getYears();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period35 = period31.withFieldAdded(durationFieldType33, 25787857);
        int[] intArray37 = chronology18.get((org.joda.time.ReadablePeriod) period35, (long) 25805812);
        org.joda.time.DateTimeField dateTimeField38 = chronology18.clockhourOfDay();
        org.joda.time.DurationField durationField39 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType10.getField(chronology18);
        org.joda.time.DurationField durationField41 = chronology18.centuries();
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DateTimeField dateTimeField43 = chronology18.minuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 540 + "'", int11 == 540);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hours" + "'", str22, "hours");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 7, 10, 5, 812]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(26341770, 102165896, 25858902, 25864250);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26341770 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        java.util.Date date3 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date3);
        int int5 = timeOfDay4.getSecondOfMinute();
        org.joda.time.LocalTime localTime6 = timeOfDay4.toLocalTime();
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.Period period10 = new org.joda.time.Period(68017068746696000L, (-121245990L), chronology9);
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.year();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateMidnight31.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusDays(9);
        int int37 = dateTime34.getEra();
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.Chronology chronology41 = chronology28.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.year();
        java.util.Locale locale48 = new java.util.Locale("hi!", "");
        java.lang.String str49 = property45.getAsText(locale48);
        org.joda.time.LocalDateTime localDateTime50 = property45.withMaximumValue();
        int int52 = localDateTime50.getValue(3);
        boolean boolean53 = dateTimeZone42.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight3.withZoneRetainFields(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(16010L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight57 = org.joda.time.DateMidnight.now(dateTimeZone42);
        boolean boolean58 = dateMidnight57.isEqualNow();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 26342641 + "'", int52 == 26342641);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 25755035, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        java.lang.Object obj58 = mutablePeriod57.clone();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        org.joda.time.Duration duration68 = mutablePeriod57.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight52.plus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.LocalDate localDate70 = dateMidnight69.toLocalDate();
        org.joda.time.Period period72 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.hours();
        java.lang.String str74 = durationFieldType73.toString();
        org.joda.time.Period period76 = period72.withField(durationFieldType73, 2);
        org.joda.time.Period period78 = period76.withMillis((int) '#');
        org.joda.time.LocalDate localDate79 = localDate70.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period81 = period78.minusYears(21);
        org.joda.time.Period period83 = period81.plusWeeks(32772);
        long long86 = chronology46.add((org.joda.time.ReadablePeriod) period81, (long) (byte) 1, 70);
        org.joda.time.YearMonthDay yearMonthDay87 = new org.joda.time.YearMonthDay(chronology46);
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay87.minusMonths(70524);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25755235L + "'", long44 == 25755235L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "PT0.100S");
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hours" + "'", str74, "hours");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-46388174397549L) + "'", long86 == (-46388174397549L));
        org.junit.Assert.assertNotNull(yearMonthDay89);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone19);
        int int22 = dateTimeZone19.getOffsetFromLocal(1645513759767L);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        long long25 = dateTimeZone19.previousTransition((long) 32769);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.LocalTime localTime27 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology31);
        int int33 = yearMonthDay32.size();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay32.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTimeAtCurrentTime(dateTimeZone47);
        int int50 = dateTimeZone47.getOffsetFromLocal(1645513759767L);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = localDate26.toDateTime(localTime27, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(dateTimeZone47);
        int int54 = dateMidnight53.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32769L + "'", long25 == 32769L);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.year();
        org.joda.time.DurationField durationField9 = chronology6.millis();
        long long12 = durationField9.getMillis(26285887, (long) 39);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 26285887L + "'", long12 == 26285887L);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval13 = duration1.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.util.Hashtable<java.lang.Object, java.lang.Object> objMap0 = new java.util.Hashtable<java.lang.Object, java.lang.Object>();
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        boolean boolean12 = dateTime10.isAfter(1L);
        org.joda.time.DateTime dateTime14 = dateTime10.minusHours(100);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone18);
        boolean boolean20 = interval19.containsNow();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.monthOfYear();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) 1);
        long long26 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.withField(dateTimeFieldType27, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight25.withZoneRetainFields(dateTimeZone30);
        boolean boolean32 = interval19.isBefore((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.DateTime.Property property43 = dateTime41.yearOfEra();
        int int44 = dateMidnight31.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight31.withYear(16384);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str48 = dateTimeFieldType47.toString();
        int int49 = dateMidnight46.get(dateTimeFieldType47);
        org.joda.time.LocalTime.Property property50 = localTime15.property(dateTimeFieldType47);
        org.joda.time.Duration duration51 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration53 = duration51.withMillis((long) 11);
        org.joda.time.Days days54 = duration51.toStandardDays();
        boolean boolean55 = localTime15.equals((java.lang.Object) duration51);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "clockhourOfHalfday" + "'", str48, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 'a', 100L);
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        longStream3.close();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = longStream3.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer2 = charBuffer1.clear();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer6 = charBuffer5.clear();
        int int7 = charBuffer3.compareTo(charBuffer5);
        java.lang.String str8 = charBuffer3.toString();
        java.util.stream.IntStream intStream9 = charBuffer3.chars();
        java.util.stream.LongStream longStream10 = intStream9.asLongStream();
        java.util.stream.Stream<java.lang.Long> longStream11 = longStream10.boxed();
        java.lang.Object[] objArray12 = longStream11.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Long> longStream14 = longStream11.skip(5L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional.empty" + "'", str8, "Optional.empty");
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[79, 112, 116, 105, 111, 110, 97, 108, 46, 101, 109, 112, 116, 121]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[79, 112, 116, 105, 111, 110, 97, 108, 46, 101, 109, 112, 116, 121]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutesSeconds(126, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 126 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        int int6 = zonedDateTime5.getDayOfMonth();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime7 = zonedDateTime5.withLaterOffsetAtOverlap();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(locale8);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar9);
        java.time.Instant instant11 = gregorianCalendar9.toInstant();
        java.time.ZonedDateTime zonedDateTime12 = gregorianCalendar9.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime12.withEarlierOffsetAtOverlap();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar15 = new java.util.GregorianCalendar(locale14);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar15);
        java.time.Instant instant17 = gregorianCalendar15.toInstant();
        java.time.ZonedDateTime zonedDateTime18 = gregorianCalendar15.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.plusSeconds((long) 5);
        java.time.LocalTime localTime21 = zonedDateTime20.toLocalTime();
        boolean boolean22 = zonedDateTime13.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime20);
        boolean boolean23 = zonedDateTime5.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime13);
        java.time.LocalDate localDate24 = java.time.LocalDate.from((java.time.temporal.TemporalAccessor) zonedDateTime13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long6 = duration5.getStandardDays();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long9 = duration8.getStandardDays();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod32.setYears((int) '#');
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.monthOfYear();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        mutablePeriod32.setPeriod((long) 3, (long) 9, chronology41);
        boolean boolean44 = durationFieldType3.isSupported(chronology41);
        org.joda.time.LocalDate localDate46 = localDate0.withFieldAdded(durationFieldType3, 5);
        org.joda.time.LocalDate localDate48 = localDate46.plusWeeks(8);
        org.joda.time.LocalDate localDate50 = localDate48.withYear(9);
        org.joda.time.DateTime dateTime51 = localDate50.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate53 = localDate50.withYearOfCentury((int) 'a');
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = localDate53.getFields();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.io.File file1 = new java.io.File("ISO");
        boolean boolean4 = file1.setExecutable(false, false);
        java.net.URL uRL5 = file1.toURL();
        java.net.URI uRI6 = uRL5.toURI();
        java.lang.String str7 = uRL5.getProtocol();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "ISO");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(uRL5);
        org.junit.Assert.assertEquals(uRL5.toString(), "file:/experiment/ISO");
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "file" + "'", str7, "file");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file10 = new java.io.File(file8, "2022-02-21T09:33:57.064");
        java.nio.file.Path path11 = file8.toPath();
        int int12 = path5.compareTo(path11);
        java.nio.file.Path path13 = path5.getFileName();
        java.nio.file.Path path14 = path5.normalize();
        java.net.URI uRI15 = path14.toUri();
        boolean boolean16 = uRI15.isAbsolute();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file10.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file10.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.net.URI uRI1 = java.net.URI.create("January");
        java.net.URI uRI3 = java.net.URI.create("January");
        java.net.URI uRI4 = uRI1.relativize(uRI3);
        java.net.URI uRI6 = java.net.URI.create("January");
        java.net.URI uRI8 = java.net.URI.create("January");
        java.net.URI uRI9 = uRI6.relativize(uRI8);
        java.net.URI uRI10 = uRI4.relativize(uRI8);
        java.lang.String str11 = uRI4.getQuery();
        java.lang.String str12 = uRI4.getSchemeSpecificPart();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNotNull(uRI3);
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(uRI10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble1 = doubleStream0.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble2 = doubleStream0.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        int int0 = java.util.Spliterator.SUBSIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16384 + "'", int0 == 16384);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.lang.Object obj2 = format1.clone();
        java.lang.Object obj3 = format1.clone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.year();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withChronology(chronology11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime12.toDateMidnight();
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateMidnight13);
        java.lang.String str15 = property3.getAsText();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.Spliterator.OfDouble ofDouble2 = doubleStream1.spliterator();
        java.util.function.DoubleToIntFunction doubleToIntFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = doubleStream1.mapToInt(doubleToIntFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(ofDouble2);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        java.lang.String str24 = dateTimeField22.toString();
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str24, "DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        java.util.Date date2 = gregorianCalendar1.getGregorianChange();
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.minuteOfHour();
        int int6 = property5.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) 1);
        long long12 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        int int14 = property9.getMaximumTextLength(locale13);
        java.util.Locale.setDefault(locale13);
        java.lang.String str16 = property5.getAsText(locale13);
        int int17 = property5.getMinimumValue();
        org.joda.time.DurationField durationField18 = property5.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay20 = property5.addWrapFieldToCopy(21);
        org.joda.time.TimeOfDay timeOfDay21 = property5.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusMillis(96);
        boolean boolean24 = date2.equals((java.lang.Object) 96);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getYearOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays((int) ':');
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.lang.String str1 = java.net.URLConnection.getDefaultRequestProperty("ISO");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod9.setYears(100);
        int int12 = mutablePeriod9.getDays();
        mutablePeriod9.addMinutes(12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.addMinutes(22);
        mutablePeriod9.addMillis(403);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.time.Month month1 = java.time.Month.FEBRUARY;
        java.time.LocalDate localDate3 = java.time.LocalDate.of(505000000, month1, 13);
        int int4 = localDate3.getDayOfMonth();
        java.time.LocalDate localDate6 = localDate3.minusWeeks(996L);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ERA;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate9 = localDate6.with((java.time.temporal.TemporalField) chronoField7, 3975091200000000032L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Era (valid values 0 - 1): 3975091200000000032");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.FEBRUARY + "'", month1.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ERA + "'", chronoField7.equals(java.time.temporal.ChronoField.ERA));
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone4);
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone4);
        int int8 = dateTimeZone4.getOffsetFromLocal((long) 565000000);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long2 = duration1.getStandardDays();
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition3 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        boolean boolean6 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime8 = localDateTime4.plusSeconds((long) '4');
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        int int11 = zoneOffset10.getTotalSeconds();
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        int int16 = timeZone14.getRawOffset();
        java.util.Calendar.Builder builder17 = builder12.setTimeZone(timeZone14);
        java.time.Clock clock18 = java.time.Clock.systemUTC();
        java.time.Instant instant19 = clock18.instant();
        java.util.Date date20 = java.util.Date.from(instant19);
        date20.setHours((int) (short) 10);
        java.util.Calendar.Builder builder23 = builder17.setInstant(date20);
        boolean boolean24 = zoneOffset10.equals((java.lang.Object) builder23);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.now();
        boolean boolean27 = localDateTime25.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime29 = localDateTime25.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.now();
        boolean boolean32 = localDateTime30.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        boolean boolean33 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime35 = localDateTime29.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        boolean boolean38 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime40 = localDateTime36.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.now();
        boolean boolean43 = localDateTime41.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        boolean boolean44 = localDateTime40.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        boolean boolean45 = localDateTime35.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.ofStrict(localDateTime35, zoneOffset47, (java.time.ZoneId) zoneOffset49);
        java.time.OffsetTime offsetTime51 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset49);
        java.time.LocalDateTime localDateTime52 = timeDefinition3.createDateTime(localDateTime8, zoneOffset10, zoneOffset49);
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar54 = new java.util.GregorianCalendar(locale53);
        org.joda.time.YearMonthDay yearMonthDay55 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar54);
        java.time.Instant instant56 = gregorianCalendar54.toInstant();
        java.time.ZonedDateTime zonedDateTime57 = gregorianCalendar54.toZonedDateTime();
        java.time.Clock clock58 = java.time.Clock.systemUTC();
        java.time.Instant instant59 = clock58.instant();
        java.util.Date date60 = java.util.Date.from(instant59);
        java.time.Clock clock61 = java.time.Clock.systemUTC();
        java.time.Instant instant62 = clock61.instant();
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.ofInstant(instant62, (java.time.ZoneId) zoneOffset64);
        java.time.OffsetDateTime offsetDateTime66 = java.time.OffsetDateTime.ofInstant(instant59, (java.time.ZoneId) zoneOffset64);
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime57.withZoneSameLocal((java.time.ZoneId) zoneOffset64);
        int int68 = zoneOffset10.compareTo(zoneOffset64);
        boolean boolean69 = duration1.equals((java.lang.Object) zoneOffset64);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + timeDefinition3 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD + "'", timeDefinition3.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000 + "'", int11 == 36000);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 21 10:34:39 UTC 2022");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(offsetTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(clock58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Feb 21 09:34:39 UTC 2022");
        org.junit.Assert.assertNotNull(clock61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.UNDERFLOW;
        // The following exception was thrown during execution in test generation
        try {
            coderResult0.throwException();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(coderResult0);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology4 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.halfdays();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) 1);
        long long11 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = property8.getAsText(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology4, locale12);
        long long15 = dateTimeParserBucket14.computeMillis();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("PT0S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'PT0S' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.time.Month month0 = java.time.Month.DECEMBER;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.DECEMBER + "'", month0.equals(java.time.Month.DECEMBER));
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime.Property property20 = localTime19.secondOfMinute();
        org.joda.time.LocalTime localTime22 = property20.addWrapFieldToCopy(2);
        java.util.Optional<org.joda.time.LocalTime.Property> propertyOptional23 = java.util.Optional.of(property20);
        org.joda.time.LocalTime localTime24 = property20.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime1, (org.joda.time.ReadablePartial) localTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(propertyOptional23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.Spliterator.OfDouble ofDouble2 = doubleStream1.spliterator();
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        ofDouble2.forEachRemaining((java.util.function.DoubleConsumer) builder3);
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.distinct();
        java.util.Spliterator.OfDouble ofDouble7 = doubleStream6.spliterator();
        java.util.Spliterator.OfDouble[] ofDoubleArray8 = new java.util.Spliterator.OfDouble[] { ofDouble2, ofDouble7 };
        java.util.stream.Stream<java.util.Spliterator.OfDouble> ofDoubleStream9 = java.util.stream.Stream.of(ofDoubleArray8);
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(ofDouble2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(ofDouble7);
        org.junit.Assert.assertNotNull(ofDoubleArray8);
        org.junit.Assert.assertNotNull(ofDoubleStream9);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.util.Date date2 = java.util.Date.from(instant1);
        date2.setHours((int) (short) 10);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = localDate5.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate5.withYearOfCentury(7);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 10:34:40 UTC 2022");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("iso8601");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"iso8601\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        long long5 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = property2.getAsText(locale6);
        org.joda.time.DurationField durationField8 = property2.getLeapDurationField();
        long long10 = durationField8.getMillis((long) 565000000);
        int int13 = durationField8.getDifference((long) 28, (long) 345000000);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "January" + "'", str7, "January");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 48816000000000000L + "'", long10 == 48816000000000000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone4);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        int int18 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod29.setYears(100);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long34 = duration33.getStandardDays();
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime20.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime20.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime20.property(dateTimeFieldType39);
        org.joda.time.DateTime dateTime42 = dateTime16.withField(dateTimeFieldType39, 2);
        org.joda.time.DateTime dateTime44 = dateTime16.minusWeeks(839000000);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("java.net.MalformedURLException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.net.MalformedURLException\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 1);
        long long6 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        int int8 = property3.getMaximumTextLength(locale7);
        java.util.Locale.setDefault(locale7);
        java.lang.String str12 = nameProvider0.getName(locale7, "P35Y100MT32H97M97.001S", "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDate localDate3 = localDateTime0.toLocalDate();
        int int4 = localDate3.lengthOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 28 + "'", int4 == 28);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_WEEK_DATE;
        java.time.chrono.Chronology chronology1 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withChronology(chronology1);
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format4 = dateTimeFormatter3.toFormat();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange6 = chronoField5.range();
        java.time.temporal.TemporalUnit temporalUnit7 = chronoField5.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField5.getBaseUnit();
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange11 = chronoField10.range();
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange17 = chronoField16.range();
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField16.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit19 = chronoField16.getBaseUnit();
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        boolean boolean21 = chronoField20.isTimeBased();
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.TemporalField[] temporalFieldArray25 = new java.time.temporal.TemporalField[] { chronoField5, chronoField9, chronoField10, chronoField12, chronoField16, chronoField20, chronoField22, chronoField23, chronoField24 };
        java.util.LinkedHashSet<java.time.temporal.TemporalField> temporalFieldSet26 = new java.util.LinkedHashSet<java.time.temporal.TemporalField>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.temporal.TemporalField>) temporalFieldSet26, temporalFieldArray25);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withResolverFields((java.util.Set<java.time.temporal.TemporalField>) temporalFieldSet26);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withResolverFields((java.util.Set<java.time.temporal.TemporalField>) temporalFieldSet26);
        java.text.ParsePosition parsePosition31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor32 = dateTimeFormatter29.parseUnresolved((java.lang.CharSequence) "2022-02-21T09:34:33.837Z", parsePosition31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: position");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(format4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField5.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + temporalUnit7 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit7.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField10.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange17);
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit19 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit19.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(temporalFieldArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(0, 101, (int) (short) 0, 0, (int) (short) 10, 252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.time.Period period1 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean3 = period1.equals((java.lang.Object) (-1));
        java.time.Period period5 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean7 = period5.equals((java.lang.Object) (-1));
        int int8 = period5.getDays();
        java.time.Period period9 = period1.minus((java.time.temporal.TemporalAmount) period5);
        java.time.Clock clock10 = java.time.Clock.systemUTC();
        java.time.Instant instant11 = clock10.instant();
        java.util.Date date12 = java.util.Date.from(instant11);
        java.time.Clock clock13 = java.time.Clock.systemUTC();
        java.time.Instant instant14 = clock13.instant();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofInstant(instant14, (java.time.ZoneId) zoneOffset16);
        java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.LocalTime localTime19 = offsetDateTime18.toLocalTime();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime18.plusDays((long) 365);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime18.plusYears((long) 100);
        java.time.Duration duration25 = java.time.Duration.ofHours(0L);
        java.time.Duration duration27 = java.time.Duration.ofHours(0L);
        int int28 = duration25.compareTo(duration27);
        java.time.Duration duration30 = duration27.plusMillis(100L);
        java.time.OffsetDateTime offsetDateTime31 = offsetDateTime18.minus((java.time.temporal.TemporalAmount) duration30);
        int int32 = offsetDateTime31.getHour();
        java.time.temporal.Temporal temporal33 = period9.subtractFrom((java.time.temporal.Temporal) offsetDateTime31);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        boolean boolean36 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime38 = localDateTime34.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.now();
        boolean boolean41 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        boolean boolean42 = localDateTime38.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.LocalDateTime localDateTime44 = localDateTime38.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.now();
        boolean boolean47 = localDateTime45.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.LocalDateTime localDateTime49 = localDateTime45.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.now();
        boolean boolean52 = localDateTime50.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        boolean boolean53 = localDateTime49.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        boolean boolean54 = localDateTime44.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.YEAR;
        boolean boolean56 = localDateTime44.isSupported((java.time.temporal.TemporalField) chronoField55);
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField55.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            long long58 = period9.get(temporalUnit57);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Forever");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(clock10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 21 09:34:40 UTC 2022");
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField55.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.FOREVER));
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.joda.time.Period period1 = org.joda.time.Period.years(1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        long long18 = localDate17.toEpochDay();
        int int19 = localDate17.lengthOfYear();
        java.time.chrono.Era era20 = localDate17.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate22 = localDate17.withMonth(247);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 247");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.Seconds seconds1 = hours0.toStandardSeconds();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.addWrapFieldToCopy(2);
        int int5 = localTime4.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 42 + "'", int5 == 42);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        boolean boolean9 = languageRangeList7.contains((java.lang.Object) "");
        boolean boolean10 = languageRangeList7.isEmpty();
        boolean boolean12 = languageRangeList7.remove((java.lang.Object) 10L);
        boolean boolean13 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7);
        int int14 = strSet2.size();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 1);
        long long20 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight19);
        boolean boolean21 = strSet2.contains((java.lang.Object) dateMidnight19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean23 = dateMidnight19.isSupported(dateTimeFieldType22);
        org.joda.time.Instant instant24 = dateMidnight19.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(101, 839000000, (int) '-', 7000000, (int) '#', (int) '-');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours(36000);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = period8.get(durationFieldType9);
        org.joda.time.Period period11 = period8.toPeriod();
        org.joda.time.Hours hours12 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType13 = hours12.getFieldType();
        org.joda.time.DurationFieldType durationFieldType14 = hours12.getFieldType();
        int int15 = period8.indexOf(durationFieldType14);
        org.joda.time.Period period17 = period8.minusWeeks(9);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period19 = period8.negated();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.time.Period period1 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean3 = period1.equals((java.lang.Object) (-1));
        java.time.Period period5 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean7 = period5.equals((java.lang.Object) (-1));
        int int8 = period5.getDays();
        java.time.Period period9 = period1.minus((java.time.temporal.TemporalAmount) period5);
        java.time.Clock clock10 = java.time.Clock.systemUTC();
        java.time.Instant instant11 = clock10.instant();
        java.util.Date date12 = java.util.Date.from(instant11);
        java.time.Clock clock13 = java.time.Clock.systemUTC();
        java.time.Instant instant14 = clock13.instant();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofInstant(instant14, (java.time.ZoneId) zoneOffset16);
        java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.LocalTime localTime19 = offsetDateTime18.toLocalTime();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime18.plusDays((long) 365);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime18.plusYears((long) 100);
        java.time.Duration duration25 = java.time.Duration.ofHours(0L);
        java.time.Duration duration27 = java.time.Duration.ofHours(0L);
        int int28 = duration25.compareTo(duration27);
        java.time.Duration duration30 = duration27.plusMillis(100L);
        java.time.OffsetDateTime offsetDateTime31 = offsetDateTime18.minus((java.time.temporal.TemporalAmount) duration30);
        int int32 = offsetDateTime31.getHour();
        java.time.temporal.Temporal temporal33 = period9.subtractFrom((java.time.temporal.Temporal) offsetDateTime31);
        java.time.temporal.Temporal temporal34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal35 = period9.addTo(temporal34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(clock10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 21 09:34:40 UTC 2022");
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertNotNull(temporal33);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology4 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.years();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 64, chronology4);
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.Days days4 = days2.negated();
        org.joda.time.Days days5 = org.joda.time.Days.THREE;
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        org.joda.time.Days days7 = days4.plus(days5);
        int int8 = days4.size();
        boolean boolean9 = days0.isLessThan(days4);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = days0.getValue(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 13");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("2022-02-21T09:34:20.109", "Korean", (-30), "2022-02-21T09:34:16.186", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-30");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod12.setYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period19);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) seconds20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((long) 'a');
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(locale24);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.plusMonths(10);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.minusYears(0);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay30.toDateMidnight();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone39);
        org.joda.time.Period period41 = interval40.toPeriod();
        boolean boolean42 = interval36.isBefore((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.monthOfYear();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.halfdays();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(0L, chronology47);
        org.joda.time.Interval interval50 = interval40.withChronology(chronology47);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration23, chronology47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(32, (int) (short) 100, 32, 17, chronology47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(interval50);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException2 = new java.security.NoSuchAlgorithmException("2022-02-21T09:34:00.514");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException3 = new java.security.NoSuchAlgorithmException((java.lang.Throwable) noSuchAlgorithmException2);
        java.security.cert.CertificateException certificateException4 = new java.security.cert.CertificateException("2022-02-21T09:34:22.998", (java.lang.Throwable) noSuchAlgorithmException2);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone7);
        org.joda.time.Period period9 = interval8.toPeriod();
        boolean boolean10 = interval4.isBefore((org.joda.time.ReadableInterval) interval8);
        boolean boolean11 = interval4.isBeforeNow();
        org.joda.time.Duration duration12 = interval4.toDuration();
        org.joda.time.Duration duration14 = duration12.minus((long) 21);
        org.joda.time.Instant instant15 = instant0.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.Period period19 = org.joda.time.Period.months(10);
        mutablePeriod17.add((org.joda.time.ReadablePeriod) period19);
        int int21 = mutablePeriod17.getWeeks();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder1 = java.util.stream.LongStream.builder();
        java.util.function.LongConsumer longConsumer2 = builder0.andThen((java.util.function.LongConsumer) builder1);
        java.util.function.Predicate<java.lang.Enum<java.time.DayOfWeek>> dayOfWeekEnumPredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) builder1);
        java.util.function.Predicate<java.lang.Enum<java.time.DayOfWeek>> dayOfWeekEnumPredicate4 = dayOfWeekEnumPredicate3.negate();
        java.util.function.Predicate<java.lang.Enum<java.time.DayOfWeek>> dayOfWeekEnumPredicate5 = dayOfWeekEnumPredicate3.negate();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(longConsumer2);
        org.junit.Assert.assertNotNull(dayOfWeekEnumPredicate3);
        org.junit.Assert.assertNotNull(dayOfWeekEnumPredicate4);
        org.junit.Assert.assertNotNull(dayOfWeekEnumPredicate5);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(96);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableInstant10);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period11);
        mutableDateTime6.setTime((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.monthOfYear();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (short) 1);
        long long22 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        int int24 = property19.getMaximumTextLength(locale23);
        org.joda.time.DateMidnight dateMidnight25 = property19.roundHalfCeilingCopy();
        org.joda.time.Duration duration27 = org.joda.time.Duration.millis((long) 'a');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime30 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone38);
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean41 = interval35.isBefore((org.joda.time.ReadableInterval) interval39);
        boolean boolean42 = interval35.isBeforeNow();
        org.joda.time.Duration duration43 = interval35.toDuration();
        org.joda.time.Duration duration45 = duration43.minus((long) 21);
        org.joda.time.Instant instant46 = instant31.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableInterval mutableInterval49 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean51 = mutableInterval49.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.DurationFieldType durationFieldType57 = null;
        int int58 = period56.get(durationFieldType57);
        org.joda.time.Period period59 = period56.toPeriod();
        mutableInterval49.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period62 = period56.plusMinutes((int) (byte) 100);
        org.joda.time.Period period64 = period56.withYears(64);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.withChronology(chronology72);
        org.joda.time.DateMidnight dateMidnight74 = dateTime73.toDateMidnight();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period64, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime84 = dateTime82.plusMonths((int) (short) 1);
        int int85 = dateTime84.getEra();
        boolean boolean87 = dateTime84.isBefore((long) 2022);
        org.joda.time.DateTime.Property property88 = dateTime84.weekyear();
        mutableInterval75.setEnd((org.joda.time.ReadableInstant) dateTime84);
        mutablePeriod47.setPeriod((org.joda.time.ReadableInterval) mutableInterval75);
        mutableInterval75.setInterval((long) 15, 1024L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        java.lang.String str2 = localDateTime1.toString();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusSeconds(565000000);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.hourOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T09:34:41.170" + "'", str2, "2022-02-21T09:34:41.170");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        long[] longArray6 = new long[] { (-4363199987L), 1645349658915L, 1645436062912L, 10, 96, 403 };
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.of(longArray6);
        java.util.stream.LongStream longStream8 = java.util.stream.LongStream.of(longArray6);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-4363199987, 1645349658915, 1645436062912, 10, 96, 403]");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long2 = duration1.getStandardDays();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long5 = duration4.getStandardDays();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property20 = dateTime16.dayOfYear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod8.setYears((int) '#');
        mutablePeriod8.addSeconds(1);
        mutablePeriod8.addSeconds(100);
        mutablePeriod8.setSeconds(0);
        mutablePeriod8.setMinutes((int) (short) 0);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.util.function.UnaryOperator<java.time.ZoneId> zoneIdUnaryOperator0 = java.util.function.UnaryOperator.identity();
        org.junit.Assert.assertNotNull(zoneIdUnaryOperator0);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadablePartial readablePartial1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = localDateTime0.isBefore(readablePartial1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        java.lang.String str2 = localDateTime1.toString();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withDayOfYear((int) '4');
        org.joda.time.DateTime dateTime5 = localDateTime1.toDateTime();
        org.joda.time.Chronology chronology6 = localDateTime1.getChronology();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T09:34:41.304" + "'", str2, "2022-02-21T09:34:41.304");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean11 = languageRangeList9.contains((java.lang.Object) "");
        boolean boolean12 = languageRangeList9.isEmpty();
        boolean boolean14 = languageRangeList9.remove((java.lang.Object) 10L);
        boolean boolean15 = strSet4.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        int int16 = strSet4.size();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.Object obj18 = properties1.replace((java.lang.Object) int16, (java.lang.Object) duration17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.setWeekyear(0);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar23 = new java.util.GregorianCalendar(locale22);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay24.toDateMidnight(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField28 = yearMonthDay24.getField((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone29);
        java.lang.Object obj31 = properties1.getOrDefault((java.lang.Object) 0, (java.lang.Object) dateMidnight30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties1.keys();
        org.joda.time.MutableInterval mutableInterval35 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean37 = mutableInterval35.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone40);
        org.joda.time.Period period42 = interval41.toPeriod();
        org.joda.time.DurationFieldType durationFieldType43 = null;
        int int44 = period42.get(durationFieldType43);
        org.joda.time.Period period45 = period42.toPeriod();
        mutableInterval35.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.MutableInterval mutableInterval48 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean50 = mutableInterval48.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.DurationFieldType durationFieldType56 = null;
        int int57 = period55.get(durationFieldType56);
        org.joda.time.Period period58 = period55.toPeriod();
        mutableInterval48.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period60 = mutableInterval48.toPeriod();
        boolean boolean61 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (short) 1);
        mutableInterval48.setStart((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.monthOfYear();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (short) 1);
        long long70 = property67.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight69.withField(dateTimeFieldType71, (int) ' ');
        boolean boolean74 = dateMidnight63.isSupported(dateTimeFieldType71);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) 70);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.withDayOfYear(100);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.withYearOfEra((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight80.withWeekyear(0);
        boolean boolean83 = dateMidnight63.isEqual((org.joda.time.ReadableInstant) dateMidnight82);
        java.lang.Object obj84 = properties1.putIfAbsent((java.lang.Object) "InstantSeconds", (java.lang.Object) dateMidnight63);
        int int85 = dateMidnight63.getSecondOfMinute();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod9.setYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period16);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) seconds17);
        boolean boolean19 = seconds0.isGreaterThan(seconds17);
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Hours hours21 = seconds20.toStandardHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds22 = seconds0.minus(seconds20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(hours21);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.util.function.Function<java.io.UnsupportedEncodingException, java.io.UnsupportedEncodingException> unsupportedEncodingExceptionFunction0 = java.util.function.Function.identity();
        org.junit.Assert.assertNotNull(unsupportedEncodingExceptionFunction0);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.net.URI uRI1 = java.net.URI.create("January");
        java.net.URI uRI3 = java.net.URI.create("January");
        java.net.URI uRI4 = uRI1.relativize(uRI3);
        java.lang.String str5 = uRI3.getAuthority();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNotNull(uRI3);
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 0, 365);
        long long4 = instant0.getMillis();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645436081415L + "'", long4 == 1645436081415L);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.util.Date date2 = java.util.Date.from(instant1);
        date2.setMinutes(37930000);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Sun Apr 04 15:40:41 UTC 2094");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutesSeconds(22, 22, 7000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 22 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.compact();
        double double4 = byteBuffer1.getDouble(72);
        java.nio.FloatBuffer floatBuffer5 = byteBuffer1.asFloatBuffer();
        java.nio.FloatBuffer floatBuffer6 = floatBuffer5.duplicate();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer6.compact();
        float[] floatArray12 = new float[] { (short) 0, 1970, 232L, 1024 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer13 = floatBuffer6.get(floatArray12);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 1970.0, 232.0, 1024.0]");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.util.function.UnaryOperator<java.time.format.DecimalStyle> decimalStyleUnaryOperator0 = java.util.function.UnaryOperator.identity();
        org.junit.Assert.assertNotNull(decimalStyleUnaryOperator0);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.nio.file.Path path5 = file2.toPath();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter(file2);
        printWriter6.print((double) 35);
        java.io.PrintWriter printWriter10 = printWriter6.append(' ');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter10);
        java.io.File file14 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file16 = new java.io.File(file14, "2022-02-21T09:33:57.064");
        java.nio.file.Path path17 = file14.toPath();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter(file14);
        boolean boolean19 = printWriter18.checkError();
        java.io.File file22 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file24 = new java.io.File(file22, "2022-02-21T09:33:57.064");
        java.nio.file.Path path25 = file22.toPath();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter(file22);
        printWriter26.print((double) 35);
        char[] charArray32 = new char[] { ':', 'a', '#' };
        printWriter26.print(charArray32);
        printWriter18.write(charArray32);
        // The following exception was thrown during execution in test generation
        try {
            printWriter10.write(charArray32, 9, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file16.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file16.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file24.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file24.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), ":a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), ":a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[:, a, #]");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer2 = charBuffer1.clear();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer6 = charBuffer5.clear();
        int int7 = charBuffer3.compareTo(charBuffer5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "2022-02-21T09:34:00.693");
        // The following exception was thrown during execution in test generation
        try {
            int int10 = charBuffer5.read(charBuffer9);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(charBuffer9);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        boolean boolean18 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean19 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean20 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar22 = new java.util.GregorianCalendar(locale21);
        org.joda.time.YearMonthDay yearMonthDay23 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar22);
        java.time.Instant instant24 = gregorianCalendar22.toInstant();
        java.nio.file.attribute.FileTime fileTime25 = java.nio.file.attribute.FileTime.from(instant24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.time.ZoneId zoneId29 = timeZone26.toZoneId();
        java.time.OffsetDateTime offsetDateTime30 = java.time.OffsetDateTime.ofInstant(instant24, zoneId29);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime30.minusDays(1645436047L);
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition33 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        boolean boolean36 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime38 = localDateTime34.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.now();
        boolean boolean41 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        boolean boolean42 = localDateTime38.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.LocalDateTime localDateTime44 = localDateTime38.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.now();
        boolean boolean47 = localDateTime45.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.LocalDateTime localDateTime49 = localDateTime45.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.now();
        boolean boolean52 = localDateTime50.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        boolean boolean53 = localDateTime49.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        boolean boolean54 = localDateTime44.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange56 = chronoField55.range();
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField55.getRangeUnit();
        boolean boolean58 = localDateTime51.isSupported(temporalUnit57);
        java.time.Clock clock59 = java.time.Clock.systemUTC();
        java.time.Instant instant60 = clock59.instant();
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofInstant(instant60, (java.time.ZoneId) zoneOffset62);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime66 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset65);
        java.time.LocalDateTime localDateTime67 = timeDefinition33.createDateTime(localDateTime51, zoneOffset62, zoneOffset65);
        java.time.ZonedDateTime zonedDateTime68 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset65);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime70 = localDateTime69.toLocalTime();
        java.time.LocalDateTime localDateTime72 = localDateTime69.withNano(0);
        java.time.LocalDate localDate73 = localDateTime72.toLocalDate();
        java.time.Month month74 = localDate73.getMonth();
        java.time.LocalTime localTime75 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime77 = localTime75.minusHours((long) '4');
        java.time.LocalDateTime localDateTime78 = localDate73.atTime(localTime77);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        int int81 = zoneOffset80.getTotalSeconds();
        java.util.Calendar.Builder builder82 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone83 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone84 = java.util.TimeZone.getDefault();
        boolean boolean85 = timeZone83.hasSameRules(timeZone84);
        int int86 = timeZone84.getRawOffset();
        java.util.Calendar.Builder builder87 = builder82.setTimeZone(timeZone84);
        java.time.Clock clock88 = java.time.Clock.systemUTC();
        java.time.Instant instant89 = clock88.instant();
        java.util.Date date90 = java.util.Date.from(instant89);
        date90.setHours((int) (short) 10);
        java.util.Calendar.Builder builder93 = builder87.setInstant(date90);
        boolean boolean94 = zoneOffset80.equals((java.lang.Object) builder93);
        long long95 = localDateTime78.toEpochSecond(zoneOffset80);
        java.time.ZonedDateTime zonedDateTime96 = java.time.ZonedDateTime.ofLocal(localDateTime17, (java.time.ZoneId) zoneOffset65, zoneOffset80);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + timeDefinition33 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC + "'", timeDefinition33.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField55.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange56);
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(clock59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + month74 + "' != '" + java.time.Month.FEBRUARY + "'", month74.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 36000 + "'", int81 == 36000);
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(clock88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(date90);
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Mon Feb 21 10:34:41 UTC 2022");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1645437600L + "'", long95 == 1645437600L);
        org.junit.Assert.assertNotNull(zonedDateTime96);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology4 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.halfdays();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(0L, chronology4);
        org.joda.time.DurationField durationField7 = chronology4.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = durationField7.subtract((long) 300000000, (long) (-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 214748364800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        boolean boolean8 = localDateTime6.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime10 = localDateTime6.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        boolean boolean14 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime16 = localDateTime10.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        boolean boolean19 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime21 = localDateTime17.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.now();
        boolean boolean24 = localDateTime22.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean25 = localDateTime21.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean26 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange28 = chronoField27.range();
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField27.getRangeUnit();
        boolean boolean30 = localDateTime23.isSupported(temporalUnit29);
        boolean boolean31 = zonedDateTime5.isSupported(temporalUnit29);
        java.time.format.DateTimeFormatter dateTimeFormatter32 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format33 = dateTimeFormatter32.toFormat();
        java.lang.String str34 = zonedDateTime5.format(dateTimeFormatter32);
        java.time.Duration duration36 = java.time.Duration.ofHours(0L);
        java.time.Duration duration38 = java.time.Duration.ofHours(0L);
        int int39 = duration36.compareTo(duration38);
        java.time.Duration duration41 = duration38.plusMillis(100L);
        java.time.temporal.Temporal temporal42 = zonedDateTime5.minus((java.time.temporal.TemporalAmount) duration38);
        java.time.Duration duration43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration44 = duration38.plus(duration43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField27.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(format33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-21T09:34:42.302" + "'", str34, "2022-02-21T09:34:42.302");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(temporal42);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDateTime1.toDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime.Property property25 = localDateTime1.era();
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        java.time.format.DecimalStyle decimalStyle2 = decimalStyle0.withZeroDigit('a');
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign(':');
        char char5 = decimalStyle4.getPositiveSign();
        java.time.format.DecimalStyle decimalStyle7 = decimalStyle4.withDecimalSeparator('a');
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + ':' + "'", char5 == ':');
        org.junit.Assert.assertNotNull(decimalStyle7);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.joda.time.Period period1 = org.joda.time.Period.millis(0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.halfdays();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.monthOfYear();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 1);
        long long18 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = property15.getAsText(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology11, locale19);
        java.lang.Integer int22 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone29);
        org.joda.time.Period period31 = interval30.toPeriod();
        boolean boolean32 = interval26.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.monthOfYear();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.halfdays();
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(0L, chronology37);
        org.joda.time.Interval interval40 = interval30.withChronology(chronology37);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology37);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone46);
        mutableDateTime41.setZone(dateTimeZone46);
        java.lang.String str50 = dateTimeZone46.getName((long) 86399999);
        dateTimeParserBucket21.setZone(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((int) (short) 10, 37930000, 1024, 943000000, 32769, 839000000, 943000000, dateTimeZone46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 943000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "January" + "'", str20, "January");
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDateTime localDateTime23 = property21.roundFloorCopy();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        boolean boolean36 = dateTime34.isAfter(1L);
        int int37 = property21.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalDateTime localDateTime38 = property21.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plusMonths((int) '#');
        int int43 = dateMidnight42.getMinuteOfHour();
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar45 = new java.util.GregorianCalendar(locale44);
        org.joda.time.YearMonthDay yearMonthDay46 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.plusMonths(10);
        org.joda.time.Interval interval49 = yearMonthDay46.toInterval();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight42.withFields((org.joda.time.ReadablePartial) yearMonthDay46);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime38.compareTo((org.joda.time.ReadablePartial) yearMonthDay46);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withChronology(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime12 = dateTime8.withDayOfWeek(4);
        org.joda.time.DateTime.Property property13 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format7 = dateTimeFormatter6.toFormat();
        java.time.format.ResolverStyle resolverStyle8 = dateTimeFormatter6.getResolverStyle();
        java.time.ZoneId zoneId9 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZone(zoneId9);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.time.ZoneId zoneId17 = timeZone14.toZoneId();
        java.time.ZonedDateTime zonedDateTime18 = localDateTime11.atZone(zoneId17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(zoneId17);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter6.withZone(zoneId17);
        java.lang.String str21 = zonedDateTime5.format(dateTimeFormatter6);
        int int22 = zonedDateTime5.getMonthValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(format7);
        org.junit.Assert.assertTrue("'" + resolverStyle8 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle8.equals(java.time.format.ResolverStyle.STRICT));
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T09:34:42.741" + "'", str21, "2022-02-21T09:34:42.741");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        mutableDateTime0.add((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean8 = mutableInterval6.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period13.get(durationFieldType14);
        org.joda.time.Period period16 = period13.toPeriod();
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period19 = period13.plusMinutes((int) (byte) 100);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long25 = duration24.getStandardDays();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Period period28 = duration24.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration24);
        mutableDateTime0.setMillis((-86399965L));
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withChronology(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime45 = dateTime41.withDayOfWeek(4);
        org.joda.time.DateTime.Property property46 = dateTime41.hourOfDay();
        org.joda.time.DateTime dateTime48 = dateTime41.plus((-259200000L));
        org.joda.time.DateTime dateTime50 = dateTime41.withHourOfDay(13);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putFloat(3, (float) 16);
        byte byte6 = byteBuffer1.get((int) 'x');
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(256);
        boolean boolean2 = intBuffer1.isDirect();
        int[] intArray3 = intBuffer1.array();
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        int[] intArray5 = intStream4.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble6 = intStream4.average();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.withMinuteOfHour(14);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod17.setYears(100);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long22 = duration21.getStandardDays();
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime8.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime8.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime8.property(dateTimeFieldType27);
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField29.getType();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = dateTimeField29.getAsText((long) 21, locale32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 0, locale37);
        int int40 = localDateTime35.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = timeOfDay6.isEqual((org.joda.time.ReadablePartial) localDateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0 };
        java.net.InetAddress inetAddress6 = java.net.InetAddress.getByAddress("Optional.empty", byteArray5);
        boolean boolean7 = inetAddress6.isSiteLocalAddress();
        boolean boolean8 = inetAddress6.isSiteLocalAddress();
        boolean boolean9 = inetAddress6.isMulticastAddress();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        boolean boolean12 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime14 = localDateTime10.plusSeconds((long) '4');
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        int int17 = zoneOffset16.getTotalSeconds();
        java.time.Instant instant18 = localDateTime10.toInstant(zoneOffset16);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone((java.time.ZoneId) zoneOffset16);
        boolean boolean20 = inetAddress6.equals((java.lang.Object) zoneOffset16);
        boolean boolean21 = inetAddress6.isMCGlobal();
        boolean boolean22 = inetAddress6.isLoopbackAddress();
        boolean boolean23 = inetAddress6.isLinkLocalAddress();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, 0]");
        org.junit.Assert.assertNotNull(inetAddress6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000 + "'", int17 == 36000);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean11 = languageRangeList9.contains((java.lang.Object) "");
        boolean boolean12 = languageRangeList9.isEmpty();
        boolean boolean14 = languageRangeList9.remove((java.lang.Object) 10L);
        boolean boolean15 = strSet4.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        int int16 = strSet4.size();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.Object obj18 = properties1.replace((java.lang.Object) int16, (java.lang.Object) duration17);
        java.lang.Object obj19 = properties1.clone();
        properties1.clear();
        java.time.Clock clock21 = java.time.Clock.systemUTC();
        java.time.Instant instant22 = clock21.instant();
        java.util.Date date23 = java.util.Date.from(instant22);
        date23.setHours((int) (short) 10);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date23);
        boolean boolean27 = properties1.equals((java.lang.Object) date23);
        java.lang.Object obj28 = properties1.clone();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        int int30 = localDate29.getMonthOfYear();
        org.joda.time.LocalDate.Property property31 = localDate29.centuryOfEra();
        org.joda.time.LocalDate localDate32 = property31.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate34 = localDate32.withWeekyear(96);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        mutableDateTime35.add((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant38, readableInstant39);
        mutableDateTime35.add((org.joda.time.ReadablePeriod) period40);
        mutableDateTime35.setTime((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime35.secondOfDay();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime35.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.monthOfYear();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (short) 1);
        long long51 = property48.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight50);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        int int53 = property48.getMaximumTextLength(locale52);
        org.joda.time.DateMidnight dateMidnight54 = property48.roundHalfCeilingCopy();
        org.joda.time.Duration duration56 = org.joda.time.Duration.millis((long) 'a');
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.plus((org.joda.time.ReadableDuration) duration56);
        mutableDateTime35.setDate((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateTime dateTime59 = localDate32.toDateTime((org.joda.time.ReadableInstant) dateMidnight54);
        int int60 = localDate32.getDayOfWeek();
        boolean boolean61 = properties1.containsKey((java.lang.Object) int60);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap62 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str63 = strMap62.firstKey();
        properties1.putAll((java.util.Map<java.lang.String, java.nio.charset.Charset>) strMap62);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon Feb 21 10:34:43 UTC 2022");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{}");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Big5" + "'", str63, "Big5");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime3 = localDateTime0.withNano(0);
        java.time.OffsetTime offsetTime4 = java.time.OffsetTime.MAX;
        java.time.OffsetTime offsetTime6 = offsetTime4.plusHours((long) 20);
        java.time.Clock clock7 = java.time.Clock.systemUTC();
        java.time.Instant instant8 = clock7.instant();
        java.time.OffsetTime offsetTime9 = java.time.OffsetTime.now(clock7);
        java.time.OffsetTime offsetTime11 = offsetTime9.withNano(8);
        boolean boolean12 = offsetTime6.isAfter(offsetTime9);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(locale13);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar14);
        java.time.Instant instant16 = gregorianCalendar14.toInstant();
        java.nio.file.attribute.FileTime fileTime17 = java.nio.file.attribute.FileTime.from(instant16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.time.ZoneId zoneId21 = timeZone18.toZoneId();
        java.time.OffsetDateTime offsetDateTime22 = java.time.OffsetDateTime.ofInstant(instant16, zoneId21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.minusDays(1645436047L);
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition25 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.now();
        boolean boolean28 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime30 = localDateTime26.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        boolean boolean33 = localDateTime31.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        boolean boolean34 = localDateTime30.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.LocalDateTime localDateTime36 = localDateTime30.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.now();
        boolean boolean39 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDateTime localDateTime41 = localDateTime37.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.now();
        boolean boolean44 = localDateTime42.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        boolean boolean45 = localDateTime41.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        boolean boolean46 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange48 = chronoField47.range();
        java.time.temporal.TemporalUnit temporalUnit49 = chronoField47.getRangeUnit();
        boolean boolean50 = localDateTime43.isSupported(temporalUnit49);
        java.time.Clock clock51 = java.time.Clock.systemUTC();
        java.time.Instant instant52 = clock51.instant();
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofInstant(instant52, (java.time.ZoneId) zoneOffset54);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime58 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset57);
        java.time.LocalDateTime localDateTime59 = timeDefinition25.createDateTime(localDateTime43, zoneOffset54, zoneOffset57);
        java.time.ZonedDateTime zonedDateTime60 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset57);
        java.time.OffsetTime offsetTime61 = offsetTime6.withOffsetSameLocal(zoneOffset57);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal62 = localDateTime0.adjustInto((java.time.temporal.Temporal) offsetTime61);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(fileTime17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + timeDefinition25 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC + "'", timeDefinition25.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField47.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + temporalUnit49 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit49.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(clock51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(offsetTime61);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone10);
        boolean boolean12 = interval11.containsNow();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.monthOfYear();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 1);
        long long18 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.withField(dateTimeFieldType19, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight17.withZoneRetainFields(dateTimeZone22);
        boolean boolean24 = interval11.isBefore((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        org.joda.time.DateTime.Property property35 = dateTime33.yearOfEra();
        int int36 = dateMidnight23.compareTo((org.joda.time.ReadableInstant) dateTime33);
        long long37 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime39 = property7.addToCopy((long) 20);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-31L) + "'", long37 == (-31L));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long6 = duration5.getStandardDays();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long9 = duration8.getStandardDays();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod32.setYears((int) '#');
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.monthOfYear();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        mutablePeriod32.setPeriod((long) 3, (long) 9, chronology41);
        boolean boolean44 = durationFieldType3.isSupported(chronology41);
        org.joda.time.LocalDate localDate46 = localDate0.withFieldAdded(durationFieldType3, 5);
        org.joda.time.LocalDate localDate48 = localDate46.plusWeeks(8);
        java.lang.String str50 = localDate48.toString("172.17.0.2");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "172.17.0.2" + "'", str50, "172.17.0.2");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange1 = chronoField0.range();
        boolean boolean3 = valueRange1.isValidValue(100L);
        java.lang.String str4 = valueRange1.toString();
        long long5 = valueRange1.getSmallestMaximum();
        long long6 = valueRange1.getMaximum();
        java.lang.String str7 = valueRange1.toString();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-999999999 - 999999999" + "'", str4, "-999999999 - 999999999");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 999999999L + "'", long5 == 999999999L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 999999999L + "'", long6 == 999999999L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-999999999 - 999999999" + "'", str7, "-999999999 - 999999999");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.time.LocalTime localTime4 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean10 = localTime4.equals((java.lang.Object) languageRangeList6);
        java.time.LocalTime localTime12 = localTime4.minusMinutes((long) (short) 10);
        int int13 = localTime12.getNano();
        java.time.LocalTime localTime15 = localTime12.minusHours(88473600000L);
        java.time.Duration duration17 = java.time.Duration.ofHours(0L);
        java.time.Duration duration19 = java.time.Duration.ofHours(0L);
        int int20 = duration17.compareTo(duration19);
        java.time.Duration duration22 = duration17.minusMinutes((long) 'a');
        java.time.Duration duration24 = duration22.minusNanos(0L);
        java.time.LocalTime localTime25 = localTime15.minus((java.time.temporal.TemporalAmount) duration24);
        int int26 = localTime25.toSecondOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5220 + "'", int26 == 5220);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int4 = timeZone2.getRawOffset();
        java.util.Calendar.Builder builder5 = builder0.setTimeZone(timeZone2);
        java.time.Clock clock6 = java.time.Clock.systemUTC();
        java.time.Instant instant7 = clock6.instant();
        java.util.Date date8 = java.util.Date.from(instant7);
        date8.setHours((int) (short) 10);
        java.util.Calendar.Builder builder11 = builder5.setInstant(date8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder15 = builder11.setDate(28, 300000000, 366);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 21 10:34:43 UTC 2022");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.lang.Object obj0 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology4 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.years();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(obj0, chronology4);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.Days days12 = org.joda.time.Days.THREE;
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        long long16 = chronology10.add((org.joda.time.ReadablePeriod) days12, (long) 9, (int) (byte) 100);
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) days12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType19 = days12.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 25920000009L + "'", long16 == 25920000009L);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        short[] shortArray1 = new short[] { (short) 1 };
        java.nio.ShortBuffer shortBuffer2 = java.nio.ShortBuffer.wrap(shortArray1);
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        boolean boolean4 = interval3.containsNow();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        long long10 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withField(dateTimeFieldType11, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.withZoneRetainFields(dateTimeZone14);
        boolean boolean16 = interval3.isBefore((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        int int28 = dateMidnight15.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight15.plus((long) 27);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.Chronology chronology3 = dateMidnight1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.halfdays();
        int int7 = durationField4.getDifference((long) 96, (long) (-1));
        long long10 = durationField4.getDifferenceAsLong((long) 'u', (long) 16384);
        long long12 = durationField4.getValueAsLong((long) 2022);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime1.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime1.withDayOfYear(6);
        int int24 = localDateTime1.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField26 = localDateTime1.getField(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 44 + "'", int24 == 44);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.compact();
        double double4 = byteBuffer1.getDouble(72);
        java.nio.FloatBuffer floatBuffer5 = byteBuffer1.asFloatBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putLong(203L);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer5);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer2 = charBuffer1.clear();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer6 = charBuffer5.clear();
        int int7 = charBuffer3.compareTo(charBuffer5);
        java.lang.String str8 = charBuffer3.toString();
        java.util.stream.IntStream intStream9 = charBuffer3.chars();
        java.util.stream.IntStream intStream10 = intStream9.distinct();
        java.util.function.IntToDoubleFunction intToDoubleFunction11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream12 = intStream10.mapToDouble(intToDoubleFunction11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional.empty" + "'", str8, "Optional.empty");
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(intStream10);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        int int9 = dateTime8.getEra();
        boolean boolean11 = dateTime8.isBefore((long) 2022);
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfCeilingCopy();
        int int14 = dateTime13.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        org.junit.Assert.assertNotNull(days0);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        longSummaryStatistics0.accept(565000000);
        longSummaryStatistics0.accept(13);
        longSummaryStatistics0.accept(23);
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=3, sum=565000036, min=13, average=188333345.333333, max=565000000}");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay1.hourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.monthOfYear();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.halfdays();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(0L, chronology8);
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay1.withChronologyRetainFields(chronology8);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours(16);
        org.joda.time.DateTime dateTime28 = dateTime23.withTime((int) (byte) 1, 12, (int) (short) 0, 5);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 70);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.withDayOfYear(100);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withYearOfEra((int) (byte) 1);
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DurationFieldType durationFieldType36 = weeks35.getFieldType();
        org.joda.time.Weeks weeks38 = weeks35.plus((int) 'u');
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime49 = dateTime47.minusHours(16);
        org.joda.time.DateTime dateTime54 = dateTime49.withTime((int) (byte) 1, 12, (int) (short) 0, 5);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 70);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.withDayOfYear(100);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.withYearOfEra((int) (byte) 1);
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Weeks weeks62 = weeks61.negated();
        boolean boolean63 = weeks38.isGreaterThan(weeks61);
        java.lang.String str64 = weeks61.toString();
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay12.plus((org.joda.time.ReadablePeriod) weeks61);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P-30W" + "'", str64, "P-30W");
        org.junit.Assert.assertNotNull(timeOfDay65);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.minusHours((long) '4');
        int int3 = localTime2.getMinute();
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(locale4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        java.time.Instant instant7 = gregorianCalendar5.toInstant();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime9 = zonedDateTime8.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        boolean boolean12 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime14 = localDateTime10.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now();
        boolean boolean17 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        boolean boolean18 = localDateTime14.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.LocalDateTime localDateTime20 = localDateTime14.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now();
        boolean boolean23 = localDateTime21.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime25 = localDateTime21.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.now();
        boolean boolean28 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        boolean boolean29 = localDateTime25.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        boolean boolean30 = localDateTime20.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange32 = chronoField31.range();
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField31.getRangeUnit();
        boolean boolean34 = localDateTime27.isSupported(temporalUnit33);
        boolean boolean35 = zonedDateTime9.isSupported(temporalUnit33);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format37 = dateTimeFormatter36.toFormat();
        java.lang.String str38 = zonedDateTime9.format(dateTimeFormatter36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = localTime2.format(dateTimeFormatter36);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField31.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange32);
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(format37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-21T09:34:44.46" + "'", str38, "2022-02-21T09:34:44.46");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.Chronology chronology4 = localDate2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(999999999, (int) (byte) 0, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999999999 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        double[] doubleArray5 = new double[] { 96, 1024, 'a', 32, 100 };
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray5);
        boolean boolean7 = doubleBuffer6.hasArray();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        boolean boolean13 = doubleBuffer6.equals((java.lang.Object) chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfHalfday();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[96.0, 1024.0, 97.0, 32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long6 = duration5.getStandardDays();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long9 = duration8.getStandardDays();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod32.setYears((int) '#');
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.monthOfYear();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        mutablePeriod32.setPeriod((long) 3, (long) 9, chronology41);
        boolean boolean44 = durationFieldType3.isSupported(chronology41);
        org.joda.time.LocalDate localDate46 = localDate0.withFieldAdded(durationFieldType3, 5);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromMillisOfDay((-1L));
        org.joda.time.LocalTime localTime50 = localTime48.minusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime52 = localTime50.plusMinutes(9);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = localDate46.compareTo((org.joda.time.ReadablePartial) localTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.io.UnsupportedEncodingException unsupportedEncodingException2 = new java.io.UnsupportedEncodingException();
        java.security.SignatureException signatureException3 = new java.security.SignatureException("January", (java.lang.Throwable) unsupportedEncodingException2);
        java.security.InvalidKeyException invalidKeyException4 = new java.security.InvalidKeyException((java.lang.Throwable) unsupportedEncodingException2);
        java.security.GeneralSecurityException generalSecurityException5 = new java.security.GeneralSecurityException((java.lang.Throwable) invalidKeyException4);
        java.security.GeneralSecurityException generalSecurityException6 = new java.security.GeneralSecurityException("java.util.GregorianCalendar[time=1645436052229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=12,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]", (java.lang.Throwable) generalSecurityException5);
        java.security.NoSuchAlgorithmException noSuchAlgorithmException7 = new java.security.NoSuchAlgorithmException((java.lang.Throwable) generalSecurityException5);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 'a', 100L);
        java.util.OptionalLong optionalLong3 = longStream2.max();
        boolean boolean4 = optionalLong3.isPresent();
        boolean boolean5 = optionalLong3.isPresent();
        java.util.function.LongSupplier longSupplier6 = null;
        long long7 = optionalLong3.orElseGet(longSupplier6);
        java.util.function.LongSupplier longSupplier8 = null;
        long long9 = optionalLong3.orElseGet(longSupplier8);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        int int0 = java.util.Calendar.LONG;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.Chronology chronology3 = dateMidnight1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.years();
        org.joda.time.DurationField durationField5 = chronology3.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = durationField5.getDifferenceAsLong((long) 9, (long) 575);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(96);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableInstant10);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period11);
        mutableDateTime6.setTime((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.monthOfYear();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (short) 1);
        long long22 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        int int24 = property19.getMaximumTextLength(locale23);
        org.joda.time.DateMidnight dateMidnight25 = property19.roundHalfCeilingCopy();
        org.joda.time.Duration duration27 = org.joda.time.Duration.millis((long) 'a');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime30 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.LocalDate.Property property31 = localDate3.era();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (short) 1);
        int int34 = dateMidnight33.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.monthOfYear();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.minus(readableDuration38);
        int int40 = dateMidnight36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone44);
        boolean boolean46 = interval45.containsNow();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.monthOfYear();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (short) 1);
        long long52 = property49.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight51.withField(dateTimeFieldType53, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight51.withZoneRetainFields(dateTimeZone56);
        boolean boolean58 = interval45.isBefore((org.joda.time.ReadableInstant) dateMidnight57);
        boolean boolean60 = interval45.isBefore((long) '4');
        mutablePeriod41.add((org.joda.time.ReadableInterval) interval45);
        org.joda.time.LocalDate localDate62 = localDate3.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.util.GregorianCalendar gregorianCalendar6 = new java.util.GregorianCalendar(256000000, 7, 0, 10, 2, 867);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.Period period4 = interval3.toPeriod();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = period4.get(durationFieldType5);
        org.joda.time.Period period7 = period4.toPeriod();
        org.joda.time.Hours hours8 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType9 = hours8.getFieldType();
        org.joda.time.DurationFieldType durationFieldType10 = hours8.getFieldType();
        int int11 = period4.indexOf(durationFieldType10);
        org.joda.time.Period period13 = period4.withMinutes((int) (byte) 10);
        int[] intArray14 = period4.getValues();
        org.joda.time.Period period16 = org.joda.time.Period.months(10);
        org.joda.time.Period period17 = period4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = period4.toPeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.Clock clock4 = java.time.Clock.systemDefaultZone();
        boolean boolean5 = gregorianCalendar1.after((java.lang.Object) clock4);
        java.util.TimeZone timeZone6 = gregorianCalendar1.getTimeZone();
        boolean boolean7 = gregorianCalendar1.isLenient();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(839000000);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.Spliterator.OfDouble ofDouble2 = doubleStream1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Double> wildcardComparator3 = ofDouble2.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(ofDouble2);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("2022-02-21T09:35:25.347", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer2 = charBuffer1.clear();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer6 = charBuffer5.clear();
        int int7 = charBuffer3.compareTo(charBuffer5);
        java.lang.String str8 = charBuffer3.toString();
        java.util.stream.IntStream intStream9 = charBuffer3.chars();
        java.util.stream.LongStream longStream10 = intStream9.asLongStream();
        java.util.stream.Stream<java.lang.Long> longStream11 = longStream10.boxed();
        java.util.stream.Stream<java.lang.Long> longStream13 = longStream11.skip((long) 35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Long> longStream15 = longStream11.limit((long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional.empty" + "'", str8, "Optional.empty");
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(longStream13);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod16.setYears(100);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long21 = duration20.getStandardDays();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.plus((org.joda.time.ReadableDuration) duration20);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDateTime7.toDateTime(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(867, 35, 37930000, 457000000, 0, 86399999, dateTimeZone28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.time.Month month1 = java.time.Month.NOVEMBER;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of(3, month1, (int) '-', 72, 1, (-30));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 45");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.NOVEMBER + "'", month1.equals(java.time.Month.NOVEMBER));
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en_US");
        printStream1.println(64);
        java.io.FilterOutputStream filterOutputStream4 = new java.io.FilterOutputStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.File file9 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file11 = new java.io.File(file9, "2022-02-21T09:33:57.064");
        java.nio.file.Path path12 = file9.toPath();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter(file9);
        printWriter13.print((double) 35);
        char[] charArray19 = new char[] { ':', 'a', '#' };
        printWriter13.print(charArray19);
        // The following exception was thrown during execution in test generation
        try {
            printWriter6.write(charArray19, 171, 442000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file11.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file11.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), ":a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), ":a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[:, a, #]");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.THREE;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period17);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) seconds18);
        boolean boolean20 = seconds1.isGreaterThan(seconds18);
        org.joda.time.MutableInterval mutableInterval22 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean24 = mutableInterval22.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = period29.get(durationFieldType30);
        org.joda.time.Period period32 = period29.toPeriod();
        mutableInterval22.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period35 = period29.plusMinutes((int) (byte) 100);
        org.joda.time.Period period37 = period29.withYears(64);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long41 = duration40.getStandardDays();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long44 = duration43.getStandardDays();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property54 = dateTime53.hourOfDay();
        org.joda.time.DateTime dateTime55 = property54.roundFloorCopy();
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime55, periodType56);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod67.setYears((int) '#');
        mutablePeriod58.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property75 = dateMidnight74.monthOfYear();
        org.joda.time.Chronology chronology76 = dateMidnight74.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.days();
        mutablePeriod67.setPeriod((long) 3, (long) 9, chronology76);
        boolean boolean79 = durationFieldType38.isSupported(chronology76);
        org.joda.time.Period period81 = period29.withFieldAdded(durationFieldType38, 97);
        boolean boolean82 = seconds18.isSupported(durationFieldType38);
        boolean boolean83 = seconds0.isGreaterThan(seconds18);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean11 = languageRangeList9.contains((java.lang.Object) "");
        boolean boolean12 = languageRangeList9.isEmpty();
        boolean boolean14 = languageRangeList9.remove((java.lang.Object) 10L);
        boolean boolean15 = strSet4.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        int int16 = strSet4.size();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.Object obj18 = properties1.replace((java.lang.Object) int16, (java.lang.Object) duration17);
        java.lang.Object obj19 = properties1.clone();
        properties1.clear();
        java.lang.String str21 = properties1.toString();
        boolean boolean22 = properties1.isEmpty();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.plusSeconds((long) 5);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.time.DayOfWeek dayOfWeek8 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange10 = chronoField9.range();
        boolean boolean11 = chronoField9.isDateBased();
        boolean boolean12 = dayOfWeek8.isSupported((java.time.temporal.TemporalField) chronoField9);
        boolean boolean13 = zonedDateTime6.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDate localDate14 = zonedDateTime6.toLocalDate();
        int int15 = localDate14.lengthOfMonth();
        java.time.chrono.Era era16 = localDate14.getEra();
        java.time.Clock clock18 = java.time.Clock.systemUTC();
        java.time.Instant instant19 = clock18.instant();
        java.util.Date date20 = java.util.Date.from(instant19);
        java.time.Clock clock21 = java.time.Clock.systemUTC();
        java.time.Instant instant22 = clock21.instant();
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofInstant(instant22, (java.time.ZoneId) zoneOffset24);
        java.time.OffsetDateTime offsetDateTime26 = java.time.OffsetDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset24);
        java.time.LocalTime localTime27 = offsetDateTime26.toLocalTime();
        java.time.Duration duration29 = java.time.Duration.ofHours(0L);
        java.time.Duration duration31 = java.time.Duration.ofHours(0L);
        int int32 = duration29.compareTo(duration31);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList33 = duration29.getUnits();
        java.time.Duration duration34 = duration29.abs();
        java.time.OffsetDateTime offsetDateTime35 = offsetDateTime26.minus((java.time.temporal.TemporalAmount) duration29);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        boolean boolean38 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime40 = localDateTime36.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.now();
        boolean boolean43 = localDateTime41.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        boolean boolean44 = localDateTime40.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime46 = localDateTime40.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.now();
        boolean boolean49 = localDateTime47.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.LocalDateTime localDateTime51 = localDateTime47.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.now();
        boolean boolean54 = localDateTime52.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        boolean boolean55 = localDateTime51.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        boolean boolean56 = localDateTime46.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange58 = chronoField57.range();
        java.time.temporal.TemporalUnit temporalUnit59 = chronoField57.getRangeUnit();
        boolean boolean60 = localDateTime53.isSupported(temporalUnit59);
        boolean boolean61 = temporalUnit59.isDurationEstimated();
        boolean boolean62 = offsetDateTime35.isSupported(temporalUnit59);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate63 = localDate14.plus(1645436062912L, temporalUnit59);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Forever");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField9.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 28 + "'", int15 == 28);
        org.junit.Assert.assertTrue("'" + era16 + "' != '" + java.time.chrono.IsoEra.CE + "'", era16.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 21 09:34:45 UTC 2022");
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(temporalUnitList33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField57.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange58);
        org.junit.Assert.assertTrue("'" + temporalUnit59 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit59.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.Period period4 = interval3.toPeriod();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = period4.get(durationFieldType5);
        org.joda.time.Period period7 = period4.toPeriod();
        org.joda.time.Hours hours8 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType9 = hours8.getFieldType();
        org.joda.time.DurationFieldType durationFieldType10 = hours8.getFieldType();
        int int11 = period4.indexOf(durationFieldType10);
        org.joda.time.Period period13 = period4.withMinutes((int) (byte) 10);
        int[] intArray14 = period4.getValues();
        org.joda.time.Period period16 = org.joda.time.Period.months(10);
        org.joda.time.Period period17 = period4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period19 = period16.plusMonths(2);
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = period16.getFieldTypes();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        int int2 = dateMidnight1.getDayOfMonth();
        int int3 = dateMidnight1.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withYear(8);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.year();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file10 = new java.io.File(file8, "2022-02-21T09:33:57.064");
        java.nio.file.Path path11 = file8.toPath();
        int int12 = path5.compareTo(path11);
        java.io.File file15 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file17 = new java.io.File(file15, "2022-02-21T09:33:57.064");
        java.nio.file.Path path18 = file15.toPath();
        java.io.File file21 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file23 = new java.io.File(file21, "2022-02-21T09:33:57.064");
        java.nio.file.Path path24 = file21.toPath();
        int int25 = path18.compareTo(path24);
        java.nio.file.Path path26 = path18.getFileName();
        java.nio.file.Path path27 = path18.normalize();
        java.nio.file.Path path28 = path11.resolveSibling(path27);
        java.io.File file29 = path27.toFile();
        java.nio.file.Path path30 = path27.getFileName();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file10.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file10.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file17.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file17.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file23.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file23.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path30);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(10);
        org.joda.time.DateTime dateTime13 = property9.addToCopy((long) 2022);
        org.joda.time.DateTime dateTime15 = property9.addToCopy(1);
        org.joda.time.DateTime dateTime16 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar4 = new java.util.GregorianCalendar(locale3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone1, locale3);
        boolean boolean6 = calendar5.isWeekDateSupported();
        java.time.Month month9 = java.time.Month.MARCH;
        int int10 = month9.getValue();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.time.ZoneId zoneId17 = timeZone14.toZoneId();
        java.time.ZonedDateTime zonedDateTime18 = localDateTime11.atZone(zoneId17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime20 = localDateTime19.toLocalTime();
        java.time.LocalDateTime localDateTime22 = localDateTime19.withNano(0);
        java.time.Duration duration24 = java.time.Duration.ofHours(0L);
        java.time.Duration duration26 = java.time.Duration.ofHours(0L);
        int int27 = duration24.compareTo(duration26);
        java.time.Duration duration29 = duration24.minusMinutes((long) 'a');
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList30 = duration24.getUnits();
        java.time.temporal.Temporal temporal31 = localDateTime22.plus((java.time.temporal.TemporalAmount) duration24);
        boolean boolean32 = localDateTime11.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.YEAR;
        java.lang.String str34 = chronoField33.toString();
        int int35 = localDateTime11.get((java.time.temporal.TemporalField) chronoField33);
        boolean boolean36 = month9.isSupported((java.time.temporal.TemporalField) chronoField33);
        java.time.format.TextStyle textStyle37 = java.time.format.TextStyle.FULL;
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getDisplayScript();
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.lang.String str44 = locale38.getDisplayScript(locale41);
        boolean boolean45 = locale41.hasExtensions();
        java.lang.String str46 = month9.getDisplayName(textStyle37, locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = calendar5.getDisplayName(35, (int) 'x', locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645436085794,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=794,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.MARCH + "'", month9.equals(java.time.Month.MARCH));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(temporalUnitList30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField33.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Year" + "'", str34, "Year");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + textStyle37 + "' != '" + java.time.format.TextStyle.FULL + "'", textStyle37.equals(java.time.format.TextStyle.FULL));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\uc6d4" + "'", str46, "\uc6d4");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream0 = java.util.stream.Stream.empty();
        org.junit.Assert.assertNotNull(charSequenceStream0);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.withDayOfMonth(20);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(4096);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar8 = new java.util.GregorianCalendar(locale7);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay9.toDateMidnight(dateTimeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTime dateTime16 = dateMidnight11.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay2.toDateMidnight(dateTimeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withEra(432000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 432000000 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putFloat(3, (float) 16);
        byte byte6 = byteBuffer1.get((int) 'x');
        java.nio.LongBuffer longBuffer7 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer9 = java.nio.LongBuffer.allocate(3);
        long[] longArray13 = new long[] { 28, (short) -1, (-999999999L) };
        java.nio.LongBuffer longBuffer14 = longBuffer9.get(longArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer17 = longBuffer7.put(longArray13, 5, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(longBuffer14);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        int int3 = property2.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 1);
        long long9 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        int int11 = property6.getMaximumTextLength(locale10);
        java.util.Locale.setDefault(locale10);
        java.lang.String str13 = property2.getAsText(locale10);
        int int14 = property2.getMinimumValue();
        org.joda.time.DurationField durationField15 = property2.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay17 = property2.addWrapFieldToCopy(21);
        int int18 = timeOfDay17.size();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        int int9 = localDateTime4.getNano();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        boolean boolean12 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime14 = localDateTime10.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now();
        boolean boolean17 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        boolean boolean18 = localDateTime14.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.LocalDateTime localDateTime20 = localDateTime14.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange23 = chronoField22.range();
        java.time.temporal.TemporalUnit temporalUnit24 = chronoField22.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField22.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime26 = localDateTime20.plus((long) 4096, temporalUnit25);
        java.time.LocalDate localDate27 = localDateTime20.toLocalDate();
        java.time.Duration duration29 = java.time.Duration.ofHours(0L);
        java.time.Duration duration31 = java.time.Duration.ofHours(0L);
        int int32 = duration29.compareTo(duration31);
        java.time.Duration duration34 = duration29.minusMinutes((long) 'a');
        long long35 = duration29.toMinutes();
        long long36 = duration29.toHours();
        java.time.Duration duration38 = duration29.minusMinutes((long) ' ');
        java.time.chrono.ChronoLocalDate chronoLocalDate39 = localDate27.plus((java.time.temporal.TemporalAmount) duration29);
        int int40 = localDate27.lengthOfMonth();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.now();
        boolean boolean43 = localDateTime41.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime45 = localDateTime41.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.now();
        boolean boolean48 = localDateTime46.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        boolean boolean49 = localDateTime45.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.LocalDateTime localDateTime51 = localDateTime45.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange54 = chronoField53.range();
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField53.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit56 = chronoField53.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime57 = localDateTime51.plus((long) 4096, temporalUnit56);
        java.time.LocalDate localDate58 = localDateTime51.toLocalDate();
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar60 = new java.util.GregorianCalendar(locale59);
        org.joda.time.YearMonthDay yearMonthDay61 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar60);
        java.time.Instant instant62 = gregorianCalendar60.toInstant();
        java.time.ZonedDateTime zonedDateTime63 = gregorianCalendar60.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime65 = zonedDateTime63.plusSeconds((long) 5);
        java.time.LocalTime localTime66 = zonedDateTime65.toLocalTime();
        java.time.DayOfWeek dayOfWeek67 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange69 = chronoField68.range();
        boolean boolean70 = chronoField68.isDateBased();
        boolean boolean71 = dayOfWeek67.isSupported((java.time.temporal.TemporalField) chronoField68);
        boolean boolean72 = zonedDateTime65.isSupported((java.time.temporal.TemporalField) chronoField68);
        java.time.LocalTime localTime77 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray78 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList79 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79, languageRangeArray78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, strMap81);
        boolean boolean83 = localTime77.equals((java.lang.Object) languageRangeList79);
        boolean boolean84 = chronoField68.isSupportedBy((java.time.temporal.TemporalAccessor) localTime77);
        boolean boolean85 = localDate58.isSupported((java.time.temporal.TemporalField) chronoField68);
        int int86 = localDate27.get((java.time.temporal.TemporalField) chronoField68);
        java.time.LocalDateTime localDateTime88 = localDateTime4.with((java.time.temporal.TemporalField) chronoField68, (long) (-3));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 885000000 + "'", int9 == 885000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField22.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange23);
        org.junit.Assert.assertTrue("'" + temporalUnit24 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit24.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(chronoLocalDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 28 + "'", int40 == 28);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField53.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange54);
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit56 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit56.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + dayOfWeek67 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek67.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField68.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(languageRangeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2022 + "'", int86 == 2022);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.io.File file1 = new java.io.File("InstantSeconds");
        java.lang.String str2 = file1.getName();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "InstantSeconds");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "InstantSeconds" + "'", str2, "InstantSeconds");
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) 457000000, (long) 72);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.io.File file6 = new java.io.File(file4, "T00:00:00.032");
        java.io.File file7 = file4.getAbsoluteFile();
        long long8 = file4.getTotalSpace();
        java.lang.String str9 = file4.toString();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.getParent(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064/T00:00:00.032");
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file7.toString(), "/experiment/2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064" + "'", str9, "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withChronology(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime12 = dateTime8.withHourOfDay(1);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.DurationFieldType durationFieldType15 = minutes14.getFieldType();
        boolean boolean16 = minutes13.isGreaterThan(minutes14);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) minutes13);
        org.joda.time.DateTime.Property property18 = dateTime8.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.compact();
        double double4 = byteBuffer1.getDouble(72);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putLong((int) (short) 1, (long) 32);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = byteBuffer7.getLong();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        java.time.Duration duration19 = java.time.Duration.ofHours(0L);
        java.time.Duration duration21 = java.time.Duration.ofHours(0L);
        int int22 = duration19.compareTo(duration21);
        java.time.Duration duration24 = duration19.minusMinutes((long) 'a');
        long long25 = duration19.toMinutes();
        long long26 = duration19.toHours();
        java.time.Duration duration28 = duration19.minusMinutes((long) ' ');
        java.time.chrono.ChronoLocalDate chronoLocalDate29 = localDate17.plus((java.time.temporal.TemporalAmount) duration19);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime31 = localDateTime30.toLocalTime();
        java.time.LocalDateTime localDateTime33 = localDateTime30.withNano(0);
        java.time.Duration duration35 = java.time.Duration.ofHours(0L);
        java.time.Duration duration37 = java.time.Duration.ofHours(0L);
        int int38 = duration35.compareTo(duration37);
        java.time.Duration duration40 = duration35.minusMinutes((long) 'a');
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList41 = duration35.getUnits();
        java.time.temporal.Temporal temporal42 = localDateTime33.plus((java.time.temporal.TemporalAmount) duration35);
        java.time.LocalDate localDate43 = localDateTime33.toLocalDate();
        java.time.Period period44 = localDate17.until((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.chrono.IsoChronology isoChronology45 = localDate17.getChronology();
        java.time.Period period49 = isoChronology45.period((int) (short) 1, 2147483647, (int) (short) 100);
        java.time.Duration duration51 = java.time.Duration.ofHours(0L);
        java.time.Duration duration53 = java.time.Duration.ofHours(0L);
        int int54 = duration51.compareTo(duration53);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList55 = duration51.getUnits();
        java.time.Duration duration56 = duration51.abs();
        java.time.Clock clock57 = java.time.Clock.systemUTC();
        java.time.Instant instant58 = clock57.instant();
        java.util.Date date59 = java.util.Date.from(instant58);
        java.time.Clock clock60 = java.time.Clock.systemUTC();
        java.time.Instant instant61 = clock60.instant();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.ofInstant(instant61, (java.time.ZoneId) zoneOffset63);
        java.time.OffsetDateTime offsetDateTime65 = java.time.OffsetDateTime.ofInstant(instant58, (java.time.ZoneId) zoneOffset63);
        java.time.LocalTime localTime66 = offsetDateTime65.toLocalTime();
        java.time.Duration duration68 = java.time.Duration.ofHours(0L);
        java.time.Duration duration70 = java.time.Duration.ofHours(0L);
        int int71 = duration68.compareTo(duration70);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList72 = duration68.getUnits();
        java.time.Duration duration73 = duration68.abs();
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime65.minus((java.time.temporal.TemporalAmount) duration68);
        java.time.Duration duration75 = duration56.minus(duration68);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period76 = period49.minus((java.time.temporal.TemporalAmount) duration75);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(chronoLocalDate29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(temporalUnitList41);
        org.junit.Assert.assertNotNull(temporal42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(isoChronology45);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(temporalUnitList55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(clock57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(date59);
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Mon Feb 21 09:34:46 UTC 2022");
        org.junit.Assert.assertNotNull(clock60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(temporalUnitList72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(duration75);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.PrimitiveIterator.OfDouble ofDouble2 = doubleStream1.iterator();
        java.util.stream.DoubleStream doubleStream3 = doubleStream1.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfDouble ofDouble4 = doubleStream3.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(ofDouble2);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now(dateTimeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(localTime6);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.util.Date date2 = java.util.Date.from(instant1);
        date2.setHours((int) (short) 10);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = localDate5.getFields();
        org.joda.time.DateMidnight dateMidnight7 = localDate5.toDateMidnight();
        org.joda.time.LocalDate localDate9 = localDate5.withYear(50);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 10:34:46 UTC 2022");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        boolean boolean9 = interval3.isBefore((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.monthOfYear();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.halfdays();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L, chronology14);
        org.joda.time.Interval interval17 = interval7.withChronology(chronology14);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Hours hours19 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean21 = mutableInterval18.isBefore((long) 2147483647);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("USA", "-999999999 - 999999999");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.util.Date date2 = java.util.Date.from(instant1);
        java.time.Clock clock3 = java.time.Clock.systemUTC();
        java.time.Instant instant4 = clock3.instant();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofInstant(instant4, (java.time.ZoneId) zoneOffset6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalTime localTime9 = offsetDateTime8.toLocalTime();
        java.time.Duration duration11 = java.time.Duration.ofHours(0L);
        java.time.Duration duration13 = java.time.Duration.ofHours(0L);
        int int14 = duration11.compareTo(duration13);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList15 = duration11.getUnits();
        java.time.Duration duration16 = duration11.abs();
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime8.minus((java.time.temporal.TemporalAmount) duration11);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime19 = localDateTime18.toLocalTime();
        java.time.LocalDateTime localDateTime21 = localDateTime18.withNano(0);
        java.time.LocalDate localDate22 = localDateTime21.toLocalDate();
        java.time.Month month23 = localDate22.getMonth();
        java.time.LocalTime localTime24 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime26 = localTime24.minusHours((long) '4');
        java.time.LocalDateTime localDateTime27 = localDate22.atTime(localTime26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal28 = offsetDateTime17.adjustInto((java.time.temporal.Temporal) localDate22);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 09:34:46 UTC 2022");
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(temporalUnitList15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + month23 + "' != '" + java.time.Month.FEBRUARY + "'", month23.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.io.File file5 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file7 = new java.io.File(file5, "2022-02-21T09:33:57.064");
        java.nio.file.Path path8 = file5.toPath();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter(file5);
        printWriter9.print((double) 35);
        java.io.PrintWriter printWriter13 = printWriter9.append(' ');
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo((java.lang.Appendable) printWriter13, (long) 96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file7.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file7.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path8);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.minusSeconds(1);
        java.lang.String str5 = timeOfDay1.toString();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = timeOfDay1.toString("/experiment/2022-02-21T09:33:57.064", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "T00:00:00.032" + "'", str5, "T00:00:00.032");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDate localDate9 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset8);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime10 = java.time.OffsetDateTime.of(1024, 43, 457000000, 442000000, 6, 23, (int) (byte) 10, zoneOffset8);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 43");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.io.File file6 = new java.io.File(file4, "T00:00:00.032");
        java.io.File file7 = file4.getAbsoluteFile();
        boolean boolean8 = file7.isDirectory();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.getParent(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064/T00:00:00.032");
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file7.toString(), "/experiment/2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer2 = charBuffer1.clear();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer6 = charBuffer5.clear();
        int int7 = charBuffer3.compareTo(charBuffer5);
        java.lang.String str8 = charBuffer3.toString();
        java.util.stream.IntStream intStream9 = charBuffer3.chars();
        java.util.stream.LongStream longStream10 = intStream9.asLongStream();
        java.util.stream.Stream<java.lang.Long> longStream11 = longStream10.boxed();
        java.lang.Object[] objArray12 = longStream11.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.Long> longOptional13 = longStream11.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional.empty" + "'", str8, "Optional.empty");
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[79, 112, 116, 105, 111, 110, 97, 108, 46, 101, 109, 112, 116, 121]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[79, 112, 116, 105, 111, 110, 97, 108, 46, 101, 109, 112, 116, 121]");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology4 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.halfdays();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) 1);
        long long11 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = property8.getAsText(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology4, locale12);
        java.lang.Object obj15 = dateTimeParserBucket14.saveState();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((java.lang.Object) dateTimeParserBucket14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeParserBucket");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(10);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(0);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar8 = new java.util.GregorianCalendar(locale7);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay9.toDateMidnight(dateTimeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTime dateTime16 = dateMidnight11.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = yearMonthDay2.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay2.minusDays((int) '-');
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod31.setYears(100);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long36 = duration35.getStandardDays();
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime22.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime22.minusYears(100);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod49.setYears((int) '#');
        mutablePeriod49.addSeconds(1);
        mutablePeriod49.addSeconds(100);
        org.joda.time.MutableInterval mutableInterval57 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval57.setEndMillis((long) 4096);
        org.joda.time.Duration duration60 = mutableInterval57.toDuration();
        mutablePeriod49.setPeriod((org.joda.time.ReadableDuration) duration60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime40.withDurationAdded((org.joda.time.ReadableDuration) duration60, 70);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime40.minusMonths(27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period66 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) yearMonthDay19, (org.joda.time.ReadablePartial) localDateTime65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.text.ParseException parseException3 = new java.text.ParseException("2022-02-21T09:33:58.303", 1970);
        java.security.cert.CertificateEncodingException certificateEncodingException4 = new java.security.cert.CertificateEncodingException("2022-02-21T09:34:09.776", (java.lang.Throwable) parseException3);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.util.Date date2 = java.util.Date.from(instant1);
        java.time.Clock clock3 = java.time.Clock.systemUTC();
        java.time.Instant instant4 = clock3.instant();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofInstant(instant4, (java.time.ZoneId) zoneOffset6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalTime localTime9 = offsetDateTime8.toLocalTime();
        java.time.Duration duration11 = java.time.Duration.ofHours(0L);
        java.time.Duration duration13 = java.time.Duration.ofHours(0L);
        int int14 = duration11.compareTo(duration13);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList15 = duration11.getUnits();
        java.time.Duration duration16 = duration11.abs();
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime8.minus((java.time.temporal.TemporalAmount) duration11);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now();
        boolean boolean20 = localDateTime18.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.LocalDateTime localDateTime22 = localDateTime18.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.now();
        boolean boolean25 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        boolean boolean26 = localDateTime22.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime28 = localDateTime22.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.now();
        boolean boolean31 = localDateTime29.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime33 = localDateTime29.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        boolean boolean36 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean37 = localDateTime33.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean38 = localDateTime28.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange40 = chronoField39.range();
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField39.getRangeUnit();
        boolean boolean42 = localDateTime35.isSupported(temporalUnit41);
        boolean boolean43 = temporalUnit41.isDurationEstimated();
        boolean boolean44 = offsetDateTime17.isSupported(temporalUnit41);
        java.time.Clock clock45 = java.time.Clock.systemUTC();
        java.time.Instant instant46 = clock45.instant();
        java.time.Instant instant48 = instant46.plusMillis((long) (byte) -1);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.of(4096, 10, (int) (byte) 1, 0, 32, (int) '4');
        java.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((long) 'a');
        java.time.Clock clock58 = java.time.Clock.systemUTC();
        java.time.Instant instant59 = clock58.instant();
        java.util.Date date60 = java.util.Date.from(instant59);
        java.time.Clock clock61 = java.time.Clock.systemUTC();
        java.time.Instant instant62 = clock61.instant();
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.ofInstant(instant62, (java.time.ZoneId) zoneOffset64);
        java.time.OffsetDateTime offsetDateTime66 = java.time.OffsetDateTime.ofInstant(instant59, (java.time.ZoneId) zoneOffset64);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime67 = localDateTime57.atZone((java.time.ZoneId) zoneOffset64);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofInstant(instant48, (java.time.ZoneId) zoneOffset64);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant70 = temporalUnit41.addTo(instant48, (long) 43);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Forever");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 09:34:46 UTC 2022");
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(temporalUnitList15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField39.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange40);
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(clock45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(clock58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Feb 21 09:34:46 UTC 2022");
        org.junit.Assert.assertNotNull(clock61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", "2022-02-21T09:34:38.107");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 2022-02-21T09:34:38.107");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(256000000, 2022);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 256000000 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        int int2 = dateMidnight1.getDayOfMonth();
        int int3 = dateMidnight1.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight1.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        short[] shortArray4 = new short[] { (short) 100, (short) -1, (short) 10, (byte) 10 };
        java.nio.ShortBuffer shortBuffer5 = java.nio.ShortBuffer.wrap(shortArray4);
        short[] shortArray10 = new short[] { (short) 100, (short) -1, (short) 10, (byte) 10 };
        java.nio.ShortBuffer shortBuffer11 = java.nio.ShortBuffer.wrap(shortArray10);
        java.nio.ShortBuffer shortBuffer13 = shortBuffer11.put((short) 1);
        int int14 = shortBuffer13.position();
        int int15 = shortBuffer5.compareTo(shortBuffer13);
        java.nio.ShortBuffer shortBuffer18 = shortBuffer13.put(0, (short) 10);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, -1, 10, 10]");
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, -1, 10, 10]");
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 101 + "'", int15 == 101);
        org.junit.Assert.assertNotNull(shortBuffer18);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format7 = dateTimeFormatter6.toFormat();
        java.time.format.ResolverStyle resolverStyle8 = dateTimeFormatter6.getResolverStyle();
        java.time.ZoneId zoneId9 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZone(zoneId9);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.time.ZoneId zoneId17 = timeZone14.toZoneId();
        java.time.ZonedDateTime zonedDateTime18 = localDateTime11.atZone(zoneId17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(zoneId17);
        java.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter6.withZone(zoneId17);
        java.lang.String str21 = zonedDateTime5.format(dateTimeFormatter6);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(1024);
        java.lang.String str25 = parsePosition24.toString();
        parsePosition24.setIndex(2);
        java.lang.String str28 = parsePosition24.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor29 = dateTimeFormatter6.parse((java.lang.CharSequence) "java.util.GregorianCalendar[time=1645436052229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=12,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]", parsePosition24);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.util.GregorianCalendar[time=1645436052229,areFieldsSet=true...' could not be parsed at index 2");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(format7);
        org.junit.Assert.assertTrue("'" + resolverStyle8 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle8.equals(java.time.format.ResolverStyle.STRICT));
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T09:34:46.782" + "'", str21, "2022-02-21T09:34:46.782");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.ParsePosition[index=1024,errorIndex=-1]" + "'", str25, "java.text.ParsePosition[index=1024,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.ParsePosition[index=2,errorIndex=-1]" + "'", str28, "java.text.ParsePosition[index=2,errorIndex=-1]");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.net.URI uRI1 = java.net.URI.create("January");
        java.lang.String str2 = uRI1.getRawUserInfo();
        java.lang.String str3 = uRI1.getRawPath();
        java.lang.String str4 = uRI1.getHost();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file5 = new java.io.File(uRI1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URI is not absolute");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "January" + "'", str3, "January");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.Period period12 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean14 = period12.equals((java.lang.Object) (-1));
        java.time.Period period16 = period12.plusMonths((long) 12);
        java.time.LocalDateTime localDateTime17 = localDateTime10.minus((java.time.temporal.TemporalAmount) period12);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        int int2 = dateMidnight1.getDayOfMonth();
        int int3 = dateMidnight1.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.halfdays();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L, chronology11);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay6.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType4.getField(chronology11);
        int int16 = dateMidnight1.get(dateTimeFieldType4);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone22);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        org.joda.time.DateTime.Property property35 = dateTime34.centuryOfEra();
        int int36 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone22);
        mutableDateTime17.setZoneRetainFields(dateTimeZone22);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone42);
        org.joda.time.Period period44 = interval43.toPeriod();
        int int45 = period44.getSeconds();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight1.minus((org.joda.time.ReadablePeriod) period44);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.time.Period period1 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean3 = period1.equals((java.lang.Object) (-1));
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withChronology(chronology11);
        boolean boolean13 = period1.equals((java.lang.Object) dateTime12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime12.toLocalDateTime();
        int int15 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withCenturyOfEra(4);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 37930000 + "'", int15 == 37930000);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long3 = timeUnit1.toNanos((long) (byte) 0);
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from((long) 4096, timeUnit1);
        long long5 = fileTime4.toMillis();
        java.lang.String str6 = fileTime4.toString();
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4L + "'", long5 == 4L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.004096Z" + "'", str6, "1970-01-01T00:00:00.004096Z");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.joda.time.ReadableInstant readableInstant0 = null;
        java.lang.Object obj2 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.monthOfYear();
        org.joda.time.Chronology chronology6 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj2, chronology6);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 2, chronology6);
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableDuration11, (org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Interval interval15 = interval10.gap((org.joda.time.ReadableInterval) interval13);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNull(interval15);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.nio.channels.FileChannel.MapMode mapMode0 = java.nio.channels.FileChannel.MapMode.PRIVATE;
        java.lang.String str1 = mapMode0.toString();
        org.junit.Assert.assertNotNull(mapMode0);
        org.junit.Assert.assertEquals(mapMode0.toString(), "PRIVATE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PRIVATE" + "'", str1, "PRIVATE");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        boolean boolean6 = languageRangeList4.contains((java.lang.Object) "");
        boolean boolean7 = languageRangeList4.isEmpty();
        boolean boolean9 = languageRangeList4.remove((java.lang.Object) 10L);
        boolean boolean10 = languageRangeList4.isEmpty();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap17);
        boolean boolean20 = languageRangeList18.contains((java.lang.Object) "");
        boolean boolean21 = languageRangeList18.isEmpty();
        boolean boolean23 = languageRangeList18.remove((java.lang.Object) 10L);
        boolean boolean24 = strSet13.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        int int25 = strSet13.size();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (short) 1);
        long long31 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight30);
        boolean boolean32 = strSet13.contains((java.lang.Object) dateMidnight30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet13, filteringMode33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = strSet13.add("2022-02-21T09:34:09.776");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList34);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.junit.Assert.assertNotNull(weeks0);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setLanguage("2022-02-21T09:34:31.928");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-21T09:34:31.928 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        int int0 = java.util.TimeZone.SHORT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Days days1 = org.joda.time.Days.ZERO;
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.plus((org.joda.time.ReadablePeriod) days1);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(dateMidnight2);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        boolean boolean9 = interval3.isBefore((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.monthOfYear();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.halfdays();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L, chronology14);
        org.joda.time.Interval interval17 = interval7.withChronology(chronology14);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Hours hours19 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Hours hours20 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) mutableInterval18);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean11 = languageRangeList9.contains((java.lang.Object) "");
        boolean boolean12 = languageRangeList9.isEmpty();
        boolean boolean14 = languageRangeList9.remove((java.lang.Object) 10L);
        boolean boolean15 = strSet4.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        int int16 = strSet4.size();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.Object obj18 = properties1.replace((java.lang.Object) int16, (java.lang.Object) duration17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.setWeekyear(0);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar23 = new java.util.GregorianCalendar(locale22);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay24.toDateMidnight(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField28 = yearMonthDay24.getField((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone29);
        java.lang.Object obj31 = properties1.getOrDefault((java.lang.Object) 0, (java.lang.Object) dateMidnight30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties1.keys();
        java.lang.Object obj33 = properties1.clone();
        java.lang.String str35 = properties1.getProperty("PT0S");
        boolean boolean37 = properties1.containsValue((java.lang.Object) 64);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        long long18 = localDate17.toEpochDay();
        int int19 = localDate17.lengthOfYear();
        java.time.chrono.Era era20 = localDate17.getEra();
        int int21 = era20.getValue();
        java.io.File file24 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.PrintStream printStream25 = new java.io.PrintStream(file24);
        printStream25.print('a');
        printStream25.println(false);
        char[] charArray35 = new char[] { 'a', '\uffff', '\uffff', 'x', ' ' };
        printStream25.print(charArray35);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar39 = new java.util.GregorianCalendar(locale38);
        org.joda.time.YearMonthDay yearMonthDay40 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.plusMonths(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = yearMonthDay40.getFieldTypes();
        java.io.PrintStream printStream44 = printStream25.printf("2022-02-21T09:34:05.527", (java.lang.Object[]) dateTimeFieldTypeArray43);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0 };
        java.net.InetAddress inetAddress51 = java.net.InetAddress.getByAddress("Optional.empty", byteArray50);
        printStream25.write(byteArray50);
        java.time.Clock clock53 = java.time.Clock.systemUTC();
        java.time.Instant instant54 = clock53.instant();
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofInstant(instant54, (java.time.ZoneId) zoneOffset56);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.time.ZoneId zoneId61 = timeZone58.toZoneId();
        java.time.ZonedDateTime zonedDateTime62 = java.time.ZonedDateTime.ofInstant(instant54, zoneId61);
        printStream25.print((java.lang.Object) instant54);
        java.lang.String str64 = instant54.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal65 = era20.adjustInto((java.time.temporal.Temporal) instant54);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Era");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(charArray35);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\uffff\uffffx ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\uffff\uffffx ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "\uffff\uffff, x,  ]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, -1, -1, 0]");
        org.junit.Assert.assertNotNull(inetAddress51);
        org.junit.Assert.assertNotNull(clock53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(zoneId61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-21T09:34:47.464Z" + "'", str64, "2022-02-21T09:34:47.464Z");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.compact();
        double double4 = byteBuffer1.getDouble(72);
        java.nio.FloatBuffer floatBuffer5 = byteBuffer1.asFloatBuffer();
        java.nio.FloatBuffer floatBuffer6 = floatBuffer5.slice();
        float[] floatArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer8 = floatBuffer6.put(floatArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer6);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.Period period4 = interval3.toPeriod();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = period4.get(durationFieldType5);
        org.joda.time.Period period7 = period4.toPeriod();
        org.joda.time.Period period9 = period4.minusHours((int) (byte) 1);
        org.joda.time.Period period11 = period4.plusMillis(2);
        java.time.format.DecimalStyle decimalStyle12 = java.time.format.DecimalStyle.STANDARD;
        java.time.format.DecimalStyle decimalStyle14 = decimalStyle12.withZeroDigit('a');
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 1);
        int int17 = dateMidnight16.getDayOfMonth();
        int int18 = dateMidnight16.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.withYear(8);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long23 = duration22.getStandardDays();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Period period26 = duration22.toPeriodTo(readableInstant24, periodType25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone29);
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = period31.get(durationFieldType32);
        org.joda.time.Period period34 = period31.toPeriod();
        org.joda.time.Hours hours35 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType36 = hours35.getFieldType();
        org.joda.time.DurationFieldType durationFieldType37 = hours35.getFieldType();
        int int38 = period31.indexOf(durationFieldType37);
        int int39 = period26.get(durationFieldType37);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight16.withFieldAdded(durationFieldType37, 21);
        boolean boolean42 = decimalStyle12.equals((java.lang.Object) dateMidnight16);
        org.joda.time.Duration duration43 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Period period45 = period11.withHours(943000000);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(decimalStyle12);
        org.junit.Assert.assertNotNull(decimalStyle14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long3 = timeUnit1.toNanos((long) (byte) 0);
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from((long) 4096, timeUnit1);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.minuteOfHour();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withChronology(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 1);
        int int20 = dateMidnight19.getDayOfMonth();
        int int21 = dateMidnight19.getMinuteOfHour();
        boolean boolean22 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateMidnight19);
        int int23 = property7.compareTo((org.joda.time.ReadableInstant) dateMidnight19);
        int int24 = dateMidnight19.getDayOfWeek();
        boolean boolean25 = fileTime4.equals((java.lang.Object) dateMidnight19);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putFloat(3, (float) 16);
        byte byte6 = byteBuffer1.get((int) 'x');
        java.nio.LongBuffer longBuffer7 = byteBuffer1.asLongBuffer();
        int int9 = byteBuffer1.getInt(57);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getYearOfEra();
        int int2 = localDate0.getWeekOfWeekyear();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        boolean boolean14 = languageRangeList12.contains((java.lang.Object) "");
        boolean boolean15 = languageRangeList12.isEmpty();
        boolean boolean17 = languageRangeList12.remove((java.lang.Object) 10L);
        boolean boolean18 = strSet7.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        int int19 = strSet7.size();
        java.time.Duration duration20 = java.time.Duration.ZERO;
        java.lang.Object obj21 = properties4.replace((java.lang.Object) int19, (java.lang.Object) duration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean23 = properties4.equals((java.lang.Object) dateTimeFieldType22);
        int int24 = localDate0.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = localDate0.toDateTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer2 = charBuffer1.clear();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer6 = charBuffer5.clear();
        int int7 = charBuffer3.compareTo(charBuffer5);
        java.lang.String str8 = charBuffer3.toString();
        java.util.stream.IntStream intStream9 = charBuffer3.chars();
        java.util.stream.LongStream longStream10 = intStream9.asLongStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream12 = intStream9.skip((long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional.empty" + "'", str8, "Optional.empty");
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(longStream10);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.minusSeconds(1);
        java.lang.String str5 = timeOfDay1.toString();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.era();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay1.withChronologyRetainFields(chronology9);
        int int13 = timeOfDay1.getHourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "T00:00:00.032" + "'", str5, "T00:00:00.032");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours(16);
        org.joda.time.DateTime dateTime15 = dateTime10.withTime((int) (byte) 1, 12, (int) (short) 0, 5);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) 70);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withDayOfYear(100);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withYearOfEra((int) (byte) 1);
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateMidnight21);
        long long23 = dateMidnight21.getMillis();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(locale24);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay26.toDateMidnight(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField30 = yearMonthDay26.getField((int) (byte) 1);
        int int32 = dateTimeField30.getMinimumValue((long) 1024);
        int int34 = dateTimeField30.get(25920000009L);
        long long37 = dateTimeField30.add((long) 256000000, (long) 50);
        int int38 = dateMidnight21.get(dateTimeField30);
        int int41 = dateTimeField30.getDifference((long) 19, (long) 867);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-62127043200000L) + "'", long23 == (-62127043200000L));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 131584000000L + "'", long37 == 131584000000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0 };
        java.net.InetAddress inetAddress6 = java.net.InetAddress.getByAddress("Optional.empty", byteArray5);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.wrap(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.wrap(byteArray5, 47, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, 0]");
        org.junit.Assert.assertNotNull(inetAddress6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.setYear(0);
        int int7 = mutableDateTime4.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "minuteOfHour", 28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 34 + "'", int7 == 34);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(3);
        java.nio.LongBuffer longBuffer2 = longBuffer1.duplicate();
        java.nio.LongBuffer longBuffer4 = java.nio.LongBuffer.allocate(3);
        java.nio.LongBuffer longBuffer5 = longBuffer4.duplicate();
        int int6 = longBuffer1.compareTo(longBuffer5);
        boolean boolean7 = longBuffer1.hasArray();
        long long8 = longBuffer1.get();
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 'a', 100L);
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        java.util.stream.LongStream longStream4 = longStream2.sorted();
        java.util.stream.LongStream.Builder builder5 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder6 = java.util.stream.LongStream.builder();
        java.util.function.LongConsumer longConsumer7 = builder5.andThen((java.util.function.LongConsumer) builder6);
        java.util.stream.LongStream longStream8 = longStream4.peek(longConsumer7);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(longConsumer7);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod8.setYears((int) '#');
        mutablePeriod8.addSeconds(1);
        mutablePeriod8.addSeconds(100);
        org.joda.time.MutableInterval mutableInterval16 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval16.setEndMillis((long) 4096);
        org.joda.time.Duration duration19 = mutableInterval16.toDuration();
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration19);
        mutablePeriod8.addSeconds((int) '4');
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(duration19);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("P35Y100MT32H97M97.001S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P35Y100MT32H97M97.001S\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.addWrapFieldToCopy(2);
        org.joda.time.LocalTime localTime6 = property2.addCopy(256);
        org.joda.time.LocalTime localTime7 = property2.roundHalfFloorCopy();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(locale8);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.plusMonths(10);
        org.joda.time.LocalDate localDate13 = yearMonthDay12.toLocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        int int15 = localDate13.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days16 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localDate13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.firstKey();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.lang.String str3 = strMap0.lastKey();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap4 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str5 = strMap4.firstKey();
        java.util.Set<java.lang.String> strSet6 = strMap4.keySet();
        java.util.Hashtable<java.lang.Object, java.lang.Object> objMap7 = new java.util.Hashtable<java.lang.Object, java.lang.Object>((java.util.Map<java.lang.String, java.nio.charset.Charset>) strMap4);
        // The following exception was thrown during execution in test generation
        try {
            strMap0.putAll((java.util.Map<java.lang.String, java.nio.charset.Charset>) strMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Big5" + "'", str1, "Big5");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "x-windows-iso2022jp" + "'", str3, "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Big5" + "'", str5, "Big5");
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDate localDate3 = localDateTime0.toLocalDate();
        boolean boolean4 = localDate3.isLeapYear();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        boolean boolean8 = localDateTime6.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime10 = localDateTime6.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        boolean boolean14 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime16 = localDateTime10.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange19 = chronoField18.range();
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField18.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit21 = chronoField18.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime22 = localDateTime16.plus((long) 4096, temporalUnit21);
        boolean boolean23 = temporalUnit21.isTimeBased();
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = localDate3.plus((long) 940000000, temporalUnit21);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField18.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit21 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit21.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        gregorianCalendar1.setTimeInMillis((-999999999L));
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar8 = new java.util.GregorianCalendar(locale7);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        java.time.Instant instant10 = gregorianCalendar8.toInstant();
        java.util.TimeZone timeZone11 = gregorianCalendar8.getTimeZone();
        gregorianCalendar1.setTimeZone(timeZone11);
        java.time.ZoneId zoneId13 = timeZone11.toZoneId();
        java.util.TimeZone.setDefault(timeZone11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId13);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.plusSeconds((long) 5);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.time.DayOfWeek dayOfWeek8 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange10 = chronoField9.range();
        boolean boolean11 = chronoField9.isDateBased();
        boolean boolean12 = dayOfWeek8.isSupported((java.time.temporal.TemporalField) chronoField9);
        boolean boolean13 = zonedDateTime6.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDate localDate14 = zonedDateTime6.toLocalDate();
        int int15 = localDate14.lengthOfMonth();
        java.time.chrono.IsoChronology isoChronology16 = localDate14.getChronology();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(locale17);
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar18);
        java.time.Instant instant20 = gregorianCalendar18.toInstant();
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.time.ZoneId zoneId25 = timeZone22.toZoneId();
        java.time.OffsetDateTime offsetDateTime26 = java.time.OffsetDateTime.ofInstant(instant20, zoneId25);
        java.time.OffsetDateTime offsetDateTime28 = offsetDateTime26.minusDays(1645436047L);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime28.minusYears(0L);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime28.minusDays(88473600000L);
        java.time.LocalDateTime localDateTime33 = isoChronology16.localDateTime((java.time.temporal.TemporalAccessor) offsetDateTime32);
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition34 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD;
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now();
        boolean boolean37 = localDateTime35.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime39 = localDateTime35.plusSeconds((long) '4');
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        int int42 = zoneOffset41.getTotalSeconds();
        java.util.Calendar.Builder builder43 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        int int47 = timeZone45.getRawOffset();
        java.util.Calendar.Builder builder48 = builder43.setTimeZone(timeZone45);
        java.time.Clock clock49 = java.time.Clock.systemUTC();
        java.time.Instant instant50 = clock49.instant();
        java.util.Date date51 = java.util.Date.from(instant50);
        date51.setHours((int) (short) 10);
        java.util.Calendar.Builder builder54 = builder48.setInstant(date51);
        boolean boolean55 = zoneOffset41.equals((java.lang.Object) builder54);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.now();
        boolean boolean58 = localDateTime56.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime57);
        java.time.LocalDateTime localDateTime60 = localDateTime56.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.now();
        boolean boolean63 = localDateTime61.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime62);
        boolean boolean64 = localDateTime60.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime62);
        java.time.LocalDateTime localDateTime66 = localDateTime60.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.now();
        boolean boolean69 = localDateTime67.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime68);
        java.time.LocalDateTime localDateTime71 = localDateTime67.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.now();
        boolean boolean74 = localDateTime72.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime73);
        boolean boolean75 = localDateTime71.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime73);
        boolean boolean76 = localDateTime66.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime73);
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.ofStrict(localDateTime66, zoneOffset78, (java.time.ZoneId) zoneOffset80);
        java.time.OffsetTime offsetTime82 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset80);
        java.time.LocalDateTime localDateTime83 = timeDefinition34.createDateTime(localDateTime39, zoneOffset41, zoneOffset80);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime84 = isoChronology16.zonedDateTime((java.time.temporal.TemporalAccessor) zoneOffset41);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: +10:00 of type java.time.ZoneOffset");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField9.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 28 + "'", int15 == 28);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + timeDefinition34 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD + "'", timeDefinition34.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000 + "'", int42 == 36000);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(clock49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Mon Feb 21 10:34:48 UTC 2022");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(offsetTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod26.setYears((int) '#');
        mutablePeriod26.addSeconds(1);
        mutablePeriod26.addSeconds(100);
        org.joda.time.MutableInterval mutableInterval34 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval34.setEndMillis((long) 4096);
        org.joda.time.Duration duration37 = mutableInterval34.toDuration();
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long43 = duration42.getStandardDays();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.time();
        org.joda.time.Period period46 = duration42.toPeriodTo(readableInstant44, periodType45);
        org.joda.time.Duration duration47 = duration40.minus((org.joda.time.ReadableDuration) duration42);
        boolean boolean48 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime17.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.weeks();
        boolean boolean51 = localDateTime49.isSupported(durationFieldType50);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.roundHalfCeilingCopy();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalTime localTime5 = property2.getLocalTime();
        org.joda.time.LocalTime localTime7 = localTime5.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        int int9 = localDate8.getMonthOfYear();
        org.joda.time.LocalDate.Property property10 = localDate8.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long14 = duration13.getStandardDays();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long17 = duration16.getStandardDays();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime28 = property27.roundFloorCopy();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28, periodType29);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod40.setYears((int) '#');
        mutablePeriod31.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.monthOfYear();
        org.joda.time.Chronology chronology49 = dateMidnight47.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.days();
        mutablePeriod40.setPeriod((long) 3, (long) 9, chronology49);
        boolean boolean52 = durationFieldType11.isSupported(chronology49);
        org.joda.time.LocalDate localDate54 = localDate8.withFieldAdded(durationFieldType11, 5);
        org.joda.time.LocalDate localDate56 = localDate54.plusWeeks(8);
        org.joda.time.LocalDate localDate58 = localDate56.withYear(9);
        org.joda.time.DateTime dateTime59 = localDate58.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate61 = localDate58.withWeekyear(0);
        org.joda.time.LocalDate localDate63 = localDate58.withWeekyear(23);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = localTime5.compareTo((org.joda.time.ReadablePartial) localDate58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property6.addWrapFieldToCopy(2);
        org.joda.time.LocalTime localTime10 = property6.addCopy(256);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant3, readableInstant4);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period5);
        mutableDateTime0.setTime((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(8553600000L);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.copy();
        mutableDateTime12.addDays(366);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (-1L));
        java.util.stream.DoubleStream doubleStream2 = java.util.stream.DoubleStream.empty();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = doubleStream2.summaryStatistics();
        double double4 = doubleSummaryStatistics3.getMax();
        optionalDouble1.ifPresent((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
        java.lang.String str6 = optionalDouble1.toString();
        double double7 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleSummaryStatistics3);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=1, sum=-1.000000, min=-1.000000, average=-1.000000, max=-1.000000}");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.NEGATIVE_INFINITY + "'", double4 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalDouble[-1.0]" + "'", str6, "OptionalDouble[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        double[] doubleArray3 = new double[] { 97, 10, '#' };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        java.time.format.DecimalStyle decimalStyle6 = java.time.format.DecimalStyle.STANDARD;
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withZeroDigit('a');
        java.io.File file11 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file13 = new java.io.File(file11, "2022-02-21T09:33:57.064");
        java.io.File file15 = new java.io.File(file13, "T00:00:00.032");
        boolean boolean16 = decimalStyle8.equals((java.lang.Object) file15);
        boolean boolean17 = file15.mkdirs();
        boolean boolean18 = doubleBuffer4.equals((java.lang.Object) boolean17);
        java.nio.DoubleBuffer doubleBuffer19 = doubleBuffer4.slice();
        java.nio.Buffer buffer20 = doubleBuffer4.rewind();
        java.nio.DoubleBuffer doubleBuffer22 = doubleBuffer4.put((double) 203L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[203.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file13.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file13.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file15.getParent(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file15.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064/T00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(buffer20);
        org.junit.Assert.assertNotNull(doubleBuffer22);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        long long18 = localDate17.toEpochDay();
        int int19 = localDate17.lengthOfYear();
        java.time.chrono.Era era20 = localDate17.getEra();
        java.lang.String str21 = localDate17.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21" + "'", str21, "2022-02-21");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period3 = period1.multipliedBy(432000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 32 * 432000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.io.File file6 = new java.io.File(file2, "P20Y-1M");
        java.lang.String str7 = file6.getAbsolutePath();
        java.io.File file9 = new java.io.File("ISO");
        boolean boolean12 = file9.setExecutable(false, false);
        java.net.URL uRL13 = file9.toURL();
        int int14 = file6.compareTo(file9);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.toString(), "2022-02-21T09:33:57.064/P20Y-1M");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/2022-02-21T09:33:57.064/P20Y-1M" + "'", str7, "/experiment/2022-02-21T09:33:57.064/P20Y-1M");
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "ISO");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRL13);
        org.junit.Assert.assertEquals(uRL13.toString(), "file:/experiment/ISO");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-23) + "'", int14 == (-23));
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime3 = localDateTime0.withNano(0);
        java.time.LocalDate localDate4 = localDateTime3.toLocalDate();
        java.time.Month month5 = localDate4.getMonth();
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit7 = chronoField6.getRangeUnit();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (short) 1);
        long long13 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight12);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.lang.String str15 = property10.getAsText(locale14);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (short) 1);
        long long21 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        int int23 = property18.getMaximumTextLength(locale22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.monthOfYear();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (short) 1);
        long long29 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        int int31 = property26.getMaximumTextLength(locale30);
        java.lang.String str32 = locale22.getDisplayCountry(locale30);
        java.lang.String str33 = locale14.getDisplayVariant(locale30);
        java.lang.String str34 = chronoField6.getDisplayName(locale30);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = month5.get((java.time.temporal.TemporalField) chronoField6);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.FEBRUARY + "'", month5.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField6.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit7 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit7.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "January" + "'", str15, "January");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "United States" + "'", str32, "United States");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "InstantSeconds" + "'", str34, "InstantSeconds");
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        java.io.File file6 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file8 = new java.io.File(file6, "2022-02-21T09:33:57.064");
        java.nio.file.Path path9 = file6.toPath();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter(file6);
        printWriter10.print((double) 35);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.addWrapFieldToCopy(2);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo((java.io.Writer) printWriter10, (org.joda.time.ReadablePartial) localTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file8.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file8.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        java.util.function.LongConsumer longConsumer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.function.LongConsumer longConsumer2 = builder0.andThen(longConsumer1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod9.setYears(100);
        int int12 = mutablePeriod9.getDays();
        mutablePeriod9.addMinutes(12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod9);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval15.setInterval(1645349658915L, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusMonths((int) '#');
        int int4 = dateMidnight3.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withMillis((long) (short) -1);
        org.joda.time.MutableInterval mutableInterval8 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval8.setEndMillis((long) 4096);
        org.joda.time.Duration duration11 = mutableInterval8.toDuration();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        org.joda.time.Duration duration14 = duration11.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long19 = duration18.getStandardDays();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.Period period22 = duration18.toPeriodTo(readableInstant20, periodType21);
        org.joda.time.Duration duration23 = duration16.minus((org.joda.time.ReadableDuration) duration18);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight6.plus((org.joda.time.ReadableDuration) duration11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.firstKey();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.Hashtable<java.lang.Object, java.lang.Object> objMap3 = new java.util.Hashtable<java.lang.Object, java.lang.Object>((java.util.Map<java.lang.String, java.nio.charset.Charset>) strMap0);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(locale4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        java.time.Instant instant7 = gregorianCalendar5.toInstant();
        java.nio.file.attribute.FileTime fileTime8 = java.nio.file.attribute.FileTime.from(instant7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.time.ZoneId zoneId12 = timeZone9.toZoneId();
        java.time.OffsetDateTime offsetDateTime13 = java.time.OffsetDateTime.ofInstant(instant7, zoneId12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusDays(1645436047L);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime13.plusWeeks((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset18 = strMap0.remove((java.lang.Object) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Big5" + "'", str1, "Big5");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime5 = property2.addCopy((long) 100);
        long long6 = property2.remainder();
        org.joda.time.LocalTime localTime7 = property2.getLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(19);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 628L + "'", long6 == 628L);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDateTime localDateTime23 = property21.roundFloorCopy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod34.setYears(100);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long39 = duration38.getStandardDays();
        mutablePeriod34.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime25.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime25.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property45 = localDateTime25.property(dateTimeFieldType44);
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField46.getType();
        org.joda.time.LocalDateTime.Property property48 = localDateTime23.property(dateTimeFieldType47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime23.millisOfSecond();
        int int50 = localDateTime23.getYearOfCentury();
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long2 = duration1.getStandardDays();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long5 = duration4.getStandardDays();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod28.setYears((int) '#');
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.monthOfYear();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        mutablePeriod28.setPeriod((long) 3, (long) 9, chronology37);
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        mutablePeriod28.add((org.joda.time.ReadablePeriod) days40);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(days40);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(34476886000000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = dateTimeField22.getAsText((long) 21, locale25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime28, 0, locale30);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (short) 1);
        long long39 = property36.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight38);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.lang.String str41 = property36.getAsText(locale40);
        java.lang.String str42 = dateTimeField22.getAsText((long) 15, locale40);
        java.time.chrono.Chronology chronology43 = java.time.chrono.Chronology.ofLocale(locale40);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "January" + "'", str41, "January");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant3, readableInstant4);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period5);
        mutableDateTime0.setYear(85800);
        org.junit.Assert.assertNotNull(mutableDateTime0);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645436089719,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=49,MILLISECOND=719,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long3 = duration2.getStandardDays();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long6 = duration5.getStandardDays();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundFloorCopy();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod29.setYears((int) '#');
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.monthOfYear();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        mutablePeriod29.setPeriod((long) 3, (long) 9, chronology38);
        boolean boolean41 = durationFieldType0.isSupported(chronology38);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar43 = new java.util.GregorianCalendar(locale42);
        org.joda.time.YearMonthDay yearMonthDay44 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = yearMonthDay44.toDateMidnight(dateTimeZone45);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateTime dateTime51 = dateMidnight46.toDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology38.withZone(dateTimeZone50);
        java.lang.String str54 = dateTimeZone50.getShortName((long) 7);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime55);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long6 = duration5.getStandardDays();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long9 = duration8.getStandardDays();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod32.setYears((int) '#');
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.monthOfYear();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        mutablePeriod32.setPeriod((long) 3, (long) 9, chronology41);
        boolean boolean44 = durationFieldType3.isSupported(chronology41);
        org.joda.time.LocalDate localDate46 = localDate0.withFieldAdded(durationFieldType3, 5);
        int int47 = localDate46.getMonthOfYear();
        org.joda.time.LocalDate.Property property48 = localDate46.monthOfYear();
        org.joda.time.LocalDate localDate49 = property48.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate51 = property48.setCopy(8);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.plusSeconds((long) 5);
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.CE;
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange9 = chronoField8.range();
        boolean boolean10 = isoEra7.isSupported((java.time.temporal.TemporalField) chronoField8);
        int int11 = zonedDateTime4.get((java.time.temporal.TemporalField) chronoField8);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime4.withHour(22);
        java.time.chrono.Chronology chronology14 = zonedDateTime13.getChronology();
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.lang.String str16 = chronoField15.toString();
        java.time.temporal.ValueRange valueRange17 = chronology14.range(chronoField15);
        java.time.Clock clock18 = java.time.Clock.systemUTC();
        java.time.Instant instant19 = java.time.Instant.now(clock18);
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.now(clock18);
        java.time.chrono.ChronoLocalDate chronoLocalDate21 = chronology14.dateNow(clock18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra7.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField8.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField15.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NanoOfDay" + "'", str16, "NanoOfDay");
        org.junit.Assert.assertNotNull(valueRange17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(chronoLocalDate21);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime3 = localDateTime0.withNano(0);
        java.time.LocalDate localDate4 = localDateTime3.toLocalDate();
        java.time.Month month5 = localDate4.getMonth();
        java.time.DayOfWeek dayOfWeek6 = localDate4.getDayOfWeek();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.time.chrono.Chronology chronology10 = java.time.chrono.Chronology.ofLocale(locale7);
        java.time.chrono.ChronoLocalDate chronoLocalDate11 = chronology10.dateNow();
        boolean boolean12 = localDate4.isEqual(chronoLocalDate11);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.FEBRUARY + "'", month5.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + dayOfWeek6 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek6.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronoLocalDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        long long5 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        int int7 = property2.getMaximumTextLength(locale6);
        java.util.Locale.setDefault(locale6);
        java.lang.String str10 = locale6.getExtension('x');
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType14 = periodType13.withMillisRemoved();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.monthOfYear();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.halfdays();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 27, (long) 4, periodType14, chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object) 'x', chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType1 = periodType0.withHoursRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = property21.getAsText(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property21.addToCopy((long) 7);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withSecondOfMinute(16);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.dayOfYear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.era();
        int int31 = localDateTime26.getYearOfCentury();
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "8" + "'", str24, "8");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((-23), 21, 171);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.net.FileNameMap fileNameMap0 = java.net.URLConnection.getFileNameMap();
        java.lang.String str2 = fileNameMap0.getContentTypeFor("java.text.ParsePosition[index=2,errorIndex=-1]");
        org.junit.Assert.assertNotNull(fileNameMap0);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.time.Period period1 = java.time.Period.ofMonths((int) (byte) -1);
        java.time.Period period3 = period1.plusYears((long) 20);
        java.time.Period period5 = period3.withMonths(96);
        java.lang.String str6 = period3.toString();
        java.time.Period period8 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean10 = period8.equals((java.lang.Object) (-1));
        java.time.Period period12 = period8.plusMonths((long) 4096);
        java.time.Period period13 = period3.plus((java.time.temporal.TemporalAmount) period12);
        java.time.Period period15 = period12.minusDays((long) '#');
        java.time.Period period16 = period12.normalized();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P20Y-1M" + "'", str6, "P20Y-1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        boolean boolean3 = file2.setReadOnly();
        java.lang.String str4 = file2.getCanonicalPath();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/experiment/2022-02-21T09:33:57.064" + "'", str4, "/experiment/2022-02-21T09:33:57.064");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        long long5 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withField(dateTimeFieldType6, (int) ' ');
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks((-999948));
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = property20.addToCopy(10);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((long) 2022);
        org.joda.time.DateTime dateTime26 = property20.addToCopy(1);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds30 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -62108515670");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime3 = localDateTime0.withNano(0);
        java.time.Duration duration5 = java.time.Duration.ofHours(0L);
        java.time.Duration duration7 = java.time.Duration.ofHours(0L);
        int int8 = duration5.compareTo(duration7);
        java.time.Duration duration10 = duration5.minusMinutes((long) 'a');
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList11 = duration5.getUnits();
        java.time.temporal.Temporal temporal12 = localDateTime3.plus((java.time.temporal.TemporalAmount) duration5);
        boolean boolean13 = duration5.isNegative();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(temporalUnitList11);
        org.junit.Assert.assertNotNull(temporal12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.Period period4 = interval3.toPeriod();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = period4.get(durationFieldType5);
        org.joda.time.Period period7 = period4.toPeriod();
        org.joda.time.Hours hours8 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType9 = hours8.getFieldType();
        org.joda.time.DurationFieldType durationFieldType10 = hours8.getFieldType();
        int int11 = period4.indexOf(durationFieldType10);
        org.joda.time.Period period13 = period4.withMinutes((int) (byte) 10);
        int[] intArray14 = period4.getValues();
        org.joda.time.Period period16 = period4.minusMillis(0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long6 = duration5.getStandardDays();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long9 = duration8.getStandardDays();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod32.setYears((int) '#');
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.monthOfYear();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        mutablePeriod32.setPeriod((long) 3, (long) 9, chronology41);
        boolean boolean44 = durationFieldType3.isSupported(chronology41);
        org.joda.time.LocalDate localDate46 = localDate0.withFieldAdded(durationFieldType3, 5);
        int int47 = localDate46.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean49 = localDate46.isSupported(dateTimeFieldType48);
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = null;
        org.joda.time.format.DateTimeParser dateTimeParser51 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter50, dateTimeParser51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter52.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = localDate46.toString(dateTimeFormatter53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        java.time.Duration duration19 = java.time.Duration.ofHours(0L);
        java.time.Duration duration21 = java.time.Duration.ofHours(0L);
        int int22 = duration19.compareTo(duration21);
        java.time.Duration duration24 = duration19.minusMinutes((long) 'a');
        long long25 = duration19.toMinutes();
        long long26 = duration19.toHours();
        java.time.Duration duration28 = duration19.minusMinutes((long) ' ');
        java.time.chrono.ChronoLocalDate chronoLocalDate29 = localDate17.plus((java.time.temporal.TemporalAmount) duration19);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime31 = localDateTime30.toLocalTime();
        java.time.LocalDateTime localDateTime33 = localDateTime30.withNano(0);
        java.time.Duration duration35 = java.time.Duration.ofHours(0L);
        java.time.Duration duration37 = java.time.Duration.ofHours(0L);
        int int38 = duration35.compareTo(duration37);
        java.time.Duration duration40 = duration35.minusMinutes((long) 'a');
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList41 = duration35.getUnits();
        java.time.temporal.Temporal temporal42 = localDateTime33.plus((java.time.temporal.TemporalAmount) duration35);
        java.time.LocalDate localDate43 = localDateTime33.toLocalDate();
        java.time.Period period44 = localDate17.until((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.chrono.IsoChronology isoChronology45 = localDate17.getChronology();
        java.time.Period period49 = isoChronology45.period((int) (short) 1, 2147483647, (int) (short) 100);
        java.lang.String str50 = isoChronology45.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(chronoLocalDate29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(temporalUnitList41);
        org.junit.Assert.assertNotNull(temporal42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(isoChronology45);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISO" + "'", str50, "ISO");
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        java.lang.String str1 = duration0.toString();
        org.joda.time.Seconds seconds2 = duration0.toStandardSeconds();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        java.lang.String str5 = localDateTime4.toString();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMinutes(9);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration0, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period11 = interval9.toPeriod(periodType10);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0S" + "'", str1, "PT0S");
        org.junit.Assert.assertNotNull(seconds2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21T09:34:50.365" + "'", str5, "2022-02-21T09:34:50.365");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.security.cert.CertificateEncodingException certificateEncodingException1 = new java.security.cert.CertificateEncodingException("2022-02-21T09:34:11.918");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        int int2 = dateMidnight1.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.monthOfYear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.minus(readableDuration6);
        int int8 = dateMidnight4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateMidnight4);
        int int10 = dateMidnight1.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 70 + "'", int10 == 70);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("2022-02-21T09:34:02.096");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((java.lang.Object) hours0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Hours");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer3 = charBuffer1.append(':');
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.OffsetTime offsetTime2 = offsetTime0.plusHours((long) 20);
        java.time.OffsetTime offsetTime4 = offsetTime0.plusHours(0L);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime4);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream0 = java.util.stream.Stream.empty();
        org.junit.Assert.assertNotNull(characteristicsStream0);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        int int3 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromDateFields(date0);
        java.util.Date date2 = new java.util.Date();
        date2.setMonth((int) '4');
        boolean boolean5 = date0.before(date2);
        int int6 = date0.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 09:34:50 UTC 2022");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertEquals(date2.toString(), "Thu May 21 09:34:50 UTC 2026");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        double[] doubleArray3 = new double[] { 48816000000000000L, 32L, 15 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray3, (-23), (-30));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[4.8816E16, 32.0, 15.0]");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        int int3 = property2.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 1);
        long long9 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        int int11 = property6.getMaximumTextLength(locale10);
        java.util.Locale.setDefault(locale10);
        java.lang.String str13 = property2.getAsText(locale10);
        org.joda.time.TimeOfDay timeOfDay14 = property2.getTimeOfDay();
        int int15 = property2.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay16 = property2.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minusMinutes(17);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.time.Clock clock0 = null;
        java.time.OffsetTime offsetTime1 = java.time.OffsetTime.MAX;
        java.time.OffsetTime offsetTime3 = offsetTime1.plusSeconds((long) (short) 0);
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Instant instant5 = clock4.instant();
        java.util.Date date6 = java.util.Date.from(instant5);
        java.time.Clock clock7 = java.time.Clock.systemUTC();
        java.time.Instant instant8 = clock7.instant();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofInstant(instant8, (java.time.ZoneId) zoneOffset10);
        java.time.OffsetDateTime offsetDateTime12 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset10);
        java.time.LocalTime localTime13 = offsetDateTime12.toLocalTime();
        java.time.Duration duration15 = java.time.Duration.ofHours(0L);
        java.time.Duration duration17 = java.time.Duration.ofHours(0L);
        int int18 = duration15.compareTo(duration17);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList19 = duration15.getUnits();
        java.time.Duration duration20 = duration15.abs();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime12.minus((java.time.temporal.TemporalAmount) duration15);
        java.time.OffsetTime offsetTime22 = offsetTime1.plus((java.time.temporal.TemporalAmount) duration15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Clock clock23 = java.time.Clock.offset(clock0, duration15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: baseClock");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime1);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 09:34:50 UTC 2022");
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(temporalUnitList19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetTime22);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        int int5 = gregorianCalendar1.getLeastMaximum(8);
        gregorianCalendar1.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = gregorianCalendar1.getActualMinimum(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32769");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(10);
        int int12 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.junit.Assert.assertNotNull(seconds0);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.TWO;
        org.joda.time.DurationFieldType durationFieldType2 = minutes1.getFieldType();
        boolean boolean3 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Period period4 = minutes0.toPeriod();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        boolean boolean9 = interval3.isBefore((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.monthOfYear();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.halfdays();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L, chronology14);
        org.joda.time.Interval interval17 = interval7.withChronology(chronology14);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.era();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 'a', 100L);
        java.util.stream.LongStream longStream4 = longStream2.limit(203L);
        java.util.function.LongBinaryOperator longBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong6 = longStream4.reduce(longBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-21T09:34:07.351");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t09:34:07.351");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        boolean boolean4 = interval3.containsNow();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        long long10 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withField(dateTimeFieldType11, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.withZoneRetainFields(dateTimeZone14);
        boolean boolean16 = interval3.isBefore((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        int int28 = dateMidnight15.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight15.withYear(16384);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.minusDays(505000000);
        int int33 = dateMidnight32.getEra();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.time.Period period1 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean3 = period1.equals((java.lang.Object) (-1));
        java.time.Period period5 = period1.plusMonths((long) 4096);
        java.time.Period period7 = period1.plusMonths((-999999999L));
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.dayOfWeek();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-999999999L), chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekOfWeekyear();
        int int18 = dateTimeField15.getDifference((long) 347000000, (long) 21);
        java.lang.String str19 = dateTimeField15.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str19, "DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.net.URI uRI1 = java.net.URI.create("January");
        java.net.URI uRI3 = java.net.URI.create("January");
        java.net.URI uRI4 = uRI1.relativize(uRI3);
        java.net.URI uRI6 = java.net.URI.create("January");
        java.net.URI uRI8 = java.net.URI.create("January");
        java.net.URI uRI9 = uRI6.relativize(uRI8);
        java.net.URI uRI10 = uRI4.relativize(uRI8);
        java.net.URI uRI12 = java.net.URI.create("January");
        java.net.URI uRI14 = java.net.URI.create("January");
        java.net.URI uRI15 = uRI12.relativize(uRI14);
        java.net.URI uRI16 = uRI4.relativize(uRI12);
        java.lang.String str17 = uRI12.getRawUserInfo();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNotNull(uRI3);
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(uRI10);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        boolean boolean18 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean19 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean20 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange22 = chronoField21.range();
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField21.getRangeUnit();
        boolean boolean24 = localDateTime17.isSupported(temporalUnit23);
        int int25 = localDateTime17.getMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange22);
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 34 + "'", int25 == 34);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.Days days2 = org.joda.time.Days.THREE;
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.Days days4 = days2.negated();
        org.joda.time.Days days5 = org.joda.time.Days.THREE;
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        org.joda.time.Days days7 = days4.plus(days5);
        org.joda.time.Days days8 = days0.plus(days4);
        org.joda.time.Days days9 = org.joda.time.Days.THREE;
        org.joda.time.PeriodType periodType10 = days9.getPeriodType();
        org.joda.time.Days days12 = days9.plus((int) (byte) 100);
        org.joda.time.Days days13 = days0.minus(days9);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        java.lang.String str2 = localDateTime1.toString();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.yearOfCentury();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod14.setYears(100);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long19 = duration18.getStandardDays();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime5.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime5.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime5.property(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType24.getDurationType();
        org.joda.time.LocalDateTime.Property property27 = localDateTime1.property(dateTimeFieldType24);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.monthOfYear();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        boolean boolean33 = dateTimeFieldType24.isSupported(chronology31);
        long long37 = chronology31.add(1645349658915L, 48816000000000000L, 0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T09:34:51.333" + "'", str2, "2022-02-21T09:34:51.333");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645349658915L + "'", long37 == 1645349658915L);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        boolean boolean9 = languageRangeList7.contains((java.lang.Object) "");
        boolean boolean10 = languageRangeList7.isEmpty();
        boolean boolean12 = languageRangeList7.remove((java.lang.Object) 10L);
        boolean boolean13 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7);
        int int14 = strSet2.size();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 1);
        long long20 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight19);
        boolean boolean21 = strSet2.contains((java.lang.Object) dateMidnight19);
        org.joda.time.DateMidnight.Property property22 = dateMidnight19.weekyear();
        org.joda.time.DateMidnight dateMidnight23 = property22.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDateTime localDateTime23 = property21.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMonths(7000000);
        int int26 = localDateTime25.getMonthOfYear();
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        mutableDateTime0.add((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean8 = mutableInterval6.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period13.get(durationFieldType14);
        org.joda.time.Period period16 = period13.toPeriod();
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period19 = period13.plusMinutes((int) (byte) 100);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long25 = duration24.getStandardDays();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Period period28 = duration24.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long33 = duration32.getStandardDays();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.time();
        org.joda.time.Period period36 = duration32.toPeriodTo(readableInstant34, periodType35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = period41.get(durationFieldType42);
        org.joda.time.Period period44 = period41.toPeriod();
        org.joda.time.Hours hours45 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType46 = hours45.getFieldType();
        org.joda.time.DurationFieldType durationFieldType47 = hours45.getFieldType();
        int int48 = period41.indexOf(durationFieldType47);
        int int49 = period36.get(durationFieldType47);
        mutableDateTime0.add(durationFieldType47, 2);
        mutableDateTime0.setMinuteOfDay(27);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime0.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime56 = property54.set(256000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 256000000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.Spliterator.OfDouble ofDouble2 = doubleStream1.spliterator();
        boolean boolean4 = ofDouble2.hasCharacteristics(2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Double> wildcardComparator5 = ofDouble2.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(ofDouble2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.YEAR;
        java.lang.String str7 = chronoField6.toString();
        java.time.temporal.ValueRange valueRange8 = zonedDateTime5.range((java.time.temporal.TemporalField) chronoField6);
        java.time.chrono.Chronology chronology9 = zonedDateTime5.getChronology();
        java.time.chrono.ChronoLocalDate chronoLocalDate11 = chronology9.dateEpochDay(1645365600L);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar13 = new java.util.GregorianCalendar(locale12);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        java.time.Instant instant15 = gregorianCalendar13.toInstant();
        java.time.ZonedDateTime zonedDateTime16 = gregorianCalendar13.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime16.plusSeconds((long) 5);
        java.time.Period period20 = java.time.Period.ofMonths((int) (byte) -1);
        java.time.temporal.Temporal temporal21 = zonedDateTime18.minus((java.time.temporal.TemporalAmount) period20);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime24 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset23);
        boolean boolean25 = period20.equals((java.lang.Object) zoneOffset23);
        java.time.temporal.Temporal temporal26 = chronoLocalDate11.minus((java.time.temporal.TemporalAmount) period20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField6.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Year" + "'", str7, "Year");
        org.junit.Assert.assertNotNull(valueRange8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronoLocalDate11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(temporal21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(temporal26);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.time.LocalTime localTime9 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        boolean boolean15 = localTime9.equals((java.lang.Object) languageRangeList11);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap19);
        boolean boolean22 = languageRangeList20.contains((java.lang.Object) "");
        boolean boolean23 = languageRangeList20.isEmpty();
        boolean boolean25 = languageRangeList20.remove((java.lang.Object) 10L);
        boolean boolean26 = languageRangeList20.isEmpty();
        boolean boolean27 = languageRangeList11.remove((java.lang.Object) boolean26);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strCollection28);
        boolean boolean30 = languageRangeList1.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator31 = languageRangeList11.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(languageRangeSpliterator31);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.Period period4 = interval3.toPeriod();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = period4.get(durationFieldType5);
        org.joda.time.Period period7 = period4.toPeriod();
        org.joda.time.Period period9 = period4.minusHours((int) (byte) 1);
        org.joda.time.Period period11 = period4.plusMillis(2);
        int int12 = period4.getWeeks();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI5 = new java.net.URI("Year", "+35:10", "2022-02-21T09:34:47.744", "ISO", "");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: Year://+35:102022-02-21T09:34:47.744?ISO#");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean3 = mutableInterval1.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = period8.get(durationFieldType9);
        org.joda.time.Period period11 = period8.toPeriod();
        mutableInterval1.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        org.joda.time.MutableInterval mutableInterval14 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean16 = mutableInterval14.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = period21.get(durationFieldType22);
        org.joda.time.Period period24 = period21.toPeriod();
        mutableInterval14.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period26 = mutableInterval14.toPeriod();
        boolean boolean27 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 1);
        mutableInterval14.setStart((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.monthOfYear();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) 1);
        long long36 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight35.withField(dateTimeFieldType37, (int) ' ');
        boolean boolean40 = dateMidnight29.isSupported(dateTimeFieldType37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = dateMidnight29.withCenturyOfEra(445000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 445000000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        mutableDateTime0.add((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean8 = mutableInterval6.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period13.get(durationFieldType14);
        org.joda.time.Period period16 = period13.toPeriod();
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period19 = period13.plusMinutes((int) (byte) 100);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long25 = duration24.getStandardDays();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Period period28 = duration24.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long33 = duration32.getStandardDays();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.time();
        org.joda.time.Period period36 = duration32.toPeriodTo(readableInstant34, periodType35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = period41.get(durationFieldType42);
        org.joda.time.Period period44 = period41.toPeriod();
        org.joda.time.Hours hours45 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType46 = hours45.getFieldType();
        org.joda.time.DurationFieldType durationFieldType47 = hours45.getFieldType();
        int int48 = period41.indexOf(durationFieldType47);
        int int49 = period36.get(durationFieldType47);
        mutableDateTime0.add(durationFieldType47, 2);
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar53 = new java.util.GregorianCalendar(locale52);
        org.joda.time.YearMonthDay yearMonthDay54 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay54.toDateMidnight(dateTimeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTime dateTime61 = dateMidnight56.toDateTime(dateTimeZone60);
        mutableDateTime0.setZone(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime0.toMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = dateTimeFormatter3.parseLocalDateTime("P-30W");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setLanguageTag("1970-01-01T00:00:00.000Z/1970-01-01T00:00:04.096Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1970 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("InstantSeconds");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"InstantSeconds\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset1);
        java.time.OffsetTime offsetTime4 = offsetTime2.withMinute((int) (short) 0);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset6);
        int int8 = offsetTime7.getSecond();
        boolean boolean9 = offsetTime4.isEqual(offsetTime7);
        int int10 = offsetTime7.getSecond();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        boolean boolean18 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean19 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange24 = chronoField23.range();
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField23.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit26 = chronoField23.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime27 = localDateTime21.plus((long) 4096, temporalUnit26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime28 = offsetTime7.truncatedTo(temporalUnit26);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField23.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange24);
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit26 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit26.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime27);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean11 = languageRangeList9.contains((java.lang.Object) "");
        boolean boolean12 = languageRangeList9.isEmpty();
        boolean boolean14 = languageRangeList9.remove((java.lang.Object) 10L);
        boolean boolean15 = strSet4.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        int int16 = strSet4.size();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.Object obj18 = properties1.replace((java.lang.Object) int16, (java.lang.Object) duration17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.setWeekyear(0);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar23 = new java.util.GregorianCalendar(locale22);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay24.toDateMidnight(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField28 = yearMonthDay24.getField((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone29);
        java.lang.Object obj31 = properties1.getOrDefault((java.lang.Object) 0, (java.lang.Object) dateMidnight30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties1.keys();
        java.lang.Object obj33 = properties1.clone();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) 1);
        int int36 = dateMidnight35.getDayOfMonth();
        int int37 = dateMidnight35.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight35.withYear(8);
        java.util.Optional<java.time.Period> periodOptional40 = java.util.Optional.empty();
        java.lang.String str41 = periodOptional40.toString();
        java.lang.Object obj42 = properties1.put((java.lang.Object) 8, (java.lang.Object) periodOptional40);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withChronology(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime55 = dateTime51.withCenturyOfEra(9);
        boolean boolean56 = periodOptional40.equals((java.lang.Object) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime55.plusWeeks((int) (byte) -1);
        int int59 = dateTime58.getWeekyear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(periodOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Optional.empty" + "'", str41, "Optional.empty");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 901 + "'", int59 == 901);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.net.Proxy.Type type0 = java.net.Proxy.Type.DIRECT;
        java.net.SocketAddress socketAddress1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy2 = new java.net.Proxy(type0, socketAddress1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type0.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.nio.file.AccessMode accessMode0 = java.nio.file.AccessMode.READ;
        org.junit.Assert.assertTrue("'" + accessMode0 + "' != '" + java.nio.file.AccessMode.READ + "'", accessMode0.equals(java.nio.file.AccessMode.READ));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        int int0 = java.util.Spliterator.SIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 64 + "'", int0 == 64);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.time.Duration duration1 = java.time.Duration.ofHours(0L);
        java.time.Duration duration3 = java.time.Duration.ofHours(0L);
        int int4 = duration1.compareTo(duration3);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration1.getUnits();
        java.time.Duration duration6 = duration1.abs();
        java.time.Duration duration8 = duration1.withNanos(100);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        boolean boolean9 = interval3.isBefore((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone12);
        boolean boolean14 = interval13.containsNow();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 1);
        long long20 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.withField(dateTimeFieldType21, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight19.withZoneRetainFields(dateTimeZone24);
        boolean boolean26 = interval13.isBefore((org.joda.time.ReadableInstant) dateMidnight25);
        boolean boolean27 = interval7.contains((org.joda.time.ReadableInterval) interval13);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.net.URI uRI1 = java.net.URI.create("January");
        java.net.URI uRI3 = java.net.URI.create("January");
        java.net.URI uRI4 = uRI1.relativize(uRI3);
        java.net.URI uRI6 = java.net.URI.create("January");
        java.net.URI uRI8 = java.net.URI.create("January");
        java.net.URI uRI9 = uRI6.relativize(uRI8);
        java.net.URI uRI10 = uRI4.relativize(uRI8);
        java.net.URI uRI12 = java.net.URI.create("January");
        java.net.URI uRI14 = java.net.URI.create("January");
        java.net.URI uRI15 = uRI12.relativize(uRI14);
        java.net.URI uRI16 = uRI4.relativize(uRI12);
        java.net.URI uRI18 = java.net.URI.create("January");
        java.net.URI uRI20 = java.net.URI.create("January");
        java.net.URI uRI21 = uRI18.relativize(uRI20);
        java.net.URI uRI23 = java.net.URI.create("January");
        java.lang.String str24 = uRI23.getRawUserInfo();
        java.lang.String str25 = uRI23.getRawPath();
        java.lang.String str26 = uRI23.getHost();
        java.net.URI uRI27 = uRI20.relativize(uRI23);
        java.net.URI uRI28 = uRI23.normalize();
        java.net.URI uRI29 = uRI16.relativize(uRI23);
        int int30 = uRI23.getPort();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNotNull(uRI3);
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(uRI10);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertNotNull(uRI18);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertNotNull(uRI23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "January" + "'", str25, "January");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertNotNull(uRI28);
        org.junit.Assert.assertNotNull(uRI29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(1024);
        java.lang.String str2 = parsePosition1.toString();
        java.io.File file4 = new java.io.File("ISO");
        boolean boolean7 = file4.setExecutable(false, false);
        java.net.URL uRL8 = file4.toURL();
        java.net.URI uRI9 = uRL8.toURI();
        java.lang.String str10 = uRL8.getPath();
        boolean boolean11 = parsePosition1.equals((java.lang.Object) uRL8);
        java.io.File file13 = new java.io.File("ISO");
        boolean boolean16 = file13.setExecutable(false, false);
        java.net.URL uRL17 = file13.toURL();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar19 = new java.util.GregorianCalendar(locale18);
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.plusMonths(10);
        org.joda.time.LocalDate localDate23 = yearMonthDay22.toLocalDate();
        java.lang.Class<?> wildcardClass24 = localDate23.getClass();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar26 = new java.util.GregorianCalendar(locale25);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.plusMonths(10);
        org.joda.time.LocalDate localDate30 = yearMonthDay29.toLocalDate();
        java.lang.Class<?> wildcardClass31 = localDate30.getClass();
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass24, wildcardClass31 };
        java.lang.Object obj33 = null; // flaky: uRL17.getContent(classArray32);
        java.lang.Object obj34 = uRL8.getContent(classArray32);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=1024,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=1024,errorIndex=-1]");
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "ISO");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(uRL8);
        org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/ISO");
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/experiment/ISO" + "'", str10, "/experiment/ISO");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "ISO");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(uRL17);
        org.junit.Assert.assertEquals(uRL17.toString(), "file:/experiment/ISO");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset3);
        java.time.temporal.TemporalField temporalField5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant7 = instant1.with(temporalField5, (long) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        boolean boolean4 = interval3.containsNow();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        long long10 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withField(dateTimeFieldType11, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.withZoneRetainFields(dateTimeZone14);
        boolean boolean16 = interval3.isBefore((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        int int28 = dateMidnight15.compareTo((org.joda.time.ReadableInstant) dateTime25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTime25.toString("file");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0 };
        java.net.InetAddress inetAddress6 = java.net.InetAddress.getByAddress("Optional.empty", byteArray5);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.wrap(byteArray5);
        int int8 = byteBuffer7.arrayOffset();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, 0]");
        org.junit.Assert.assertNotNull(inetAddress6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours(16);
        org.joda.time.DateTime dateTime15 = dateTime10.withTime((int) (byte) 1, 12, (int) (short) 0, 5);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) 70);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withDayOfYear(100);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withYearOfEra((int) (byte) 1);
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DurationFieldType durationFieldType23 = weeks22.getFieldType();
        org.joda.time.Weeks weeks25 = weeks22.plus((int) 'u');
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime36 = dateTime34.minusHours(16);
        org.joda.time.DateTime dateTime41 = dateTime36.withTime((int) (byte) 1, 12, (int) (short) 0, 5);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 70);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withDayOfYear(100);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withYearOfEra((int) (byte) 1);
        org.joda.time.Weeks weeks48 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Weeks weeks49 = weeks48.negated();
        boolean boolean50 = weeks25.isGreaterThan(weeks48);
        org.joda.time.Duration duration51 = weeks25.toStandardDuration();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long54 = duration53.getStandardDays();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.time();
        org.joda.time.Period period57 = duration53.toPeriodTo(readableInstant55, periodType56);
        org.joda.time.Duration duration58 = duration51.plus((org.joda.time.ReadableDuration) duration53);
        long long59 = duration58.getStandardMinutes();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 876959L + "'", long59 == 876959L);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(locale4);
        java.lang.String str6 = property2.getAsShortText(locale4);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.net.URI uRI1 = java.net.URI.create("January");
        java.net.URI uRI3 = java.net.URI.create("January");
        java.net.URI uRI4 = uRI1.relativize(uRI3);
        java.lang.String str5 = uRI4.getRawSchemeSpecificPart();
        java.lang.String str6 = uRI4.getPath();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNotNull(uRI3);
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(86399999, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MICROSECONDS;
        long long3 = timeUnit1.toNanos((long) (byte) 0);
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from((long) 4096, timeUnit1);
        long long6 = timeUnit1.toDays((long) 96);
        timeUnit1.sleep((long) 432000000);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.io.File file1 = new java.io.File("ISO");
        boolean boolean4 = file1.setExecutable(false, false);
        java.net.URL uRL5 = file1.toURL();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar7 = new java.util.GregorianCalendar(locale6);
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(10);
        org.joda.time.LocalDate localDate11 = yearMonthDay10.toLocalDate();
        java.lang.Class<?> wildcardClass12 = localDate11.getClass();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(locale13);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusMonths(10);
        org.joda.time.LocalDate localDate18 = yearMonthDay17.toLocalDate();
        java.lang.Class<?> wildcardClass19 = localDate18.getClass();
        java.lang.Class[] classArray20 = new java.lang.Class[] { wildcardClass12, wildcardClass19 };
        java.lang.Object obj21 = null; // flaky: uRL5.getContent(classArray20);
        java.lang.String str22 = uRL5.getPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "ISO");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(uRL5);
        org.junit.Assert.assertEquals(uRL5.toString(), "file:/experiment/ISO");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/experiment/ISO" + "'", str22, "/experiment/ISO");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        long long18 = localDate17.toEpochDay();
        int int19 = localDate17.lengthOfYear();
        java.time.chrono.Era era20 = localDate17.getEra();
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.YEAR;
        java.lang.String str22 = chronoField21.toString();
        boolean boolean23 = localDate17.isSupported((java.time.temporal.TemporalField) chronoField21);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        boolean boolean26 = localDateTime24.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDate localDate27 = localDateTime24.toLocalDate();
        boolean boolean28 = localDate17.isBefore((java.time.chrono.ChronoLocalDate) localDate27);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.now();
        boolean boolean31 = localDateTime29.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime33 = localDateTime29.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        boolean boolean36 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean37 = localDateTime33.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime39 = localDateTime33.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.now();
        boolean boolean42 = localDateTime40.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.LocalDateTime localDateTime44 = localDateTime40.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.now();
        boolean boolean47 = localDateTime45.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        boolean boolean48 = localDateTime44.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        boolean boolean49 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.ofStrict(localDateTime39, zoneOffset51, (java.time.ZoneId) zoneOffset53);
        java.time.OffsetTime offsetTime55 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset53);
        java.time.OffsetDateTime offsetDateTime56 = localDate27.atTime(offsetTime55);
        java.time.format.FormatStyle formatStyle57 = java.time.format.FormatStyle.SHORT;
        java.time.format.DateTimeFormatter dateTimeFormatter58 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle57);
        java.time.temporal.TemporalQuery<java.lang.Boolean> booleanTemporalQuery59 = java.time.format.DateTimeFormatter.parsedLeapSecond();
        java.text.Format format60 = dateTimeFormatter58.toFormat(booleanTemporalQuery59);
        java.lang.Boolean boolean61 = offsetTime55.query(booleanTemporalQuery59);
        java.time.OffsetTime offsetTime63 = offsetTime55.minusNanos(1645436052L);
        java.util.Locale locale64 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar65 = new java.util.GregorianCalendar(locale64);
        org.joda.time.YearMonthDay yearMonthDay66 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar65);
        java.time.Instant instant67 = gregorianCalendar65.toInstant();
        java.util.TimeZone timeZone68 = gregorianCalendar65.getTimeZone();
        java.time.ZoneId zoneId69 = timeZone68.toZoneId();
        java.time.LocalTime localTime70 = java.time.LocalTime.now(zoneId69);
        org.joda.time.Days days71 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType72 = days71.getFieldType();
        boolean boolean73 = localTime70.equals((java.lang.Object) durationFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal74 = offsetTime55.adjustInto((java.time.temporal.Temporal) localTime70);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Year" + "'", str22, "Year");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(offsetTime55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + formatStyle57 + "' != '" + java.time.format.FormatStyle.SHORT + "'", formatStyle57.equals(java.time.format.FormatStyle.SHORT));
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(booleanTemporalQuery59);
        org.junit.Assert.assertNotNull(format60);
        org.junit.Assert.assertEquals("'" + boolean61 + "' != '" + false + "'", boolean61, false);
        org.junit.Assert.assertNotNull(offsetTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(days71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean3 = mutableInterval1.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = period8.get(durationFieldType9);
        org.joda.time.Period period11 = period8.toPeriod();
        mutableInterval1.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Days days13 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) mutableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days13);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.io.File file7 = new java.io.File("2022-02-21T09:33:57.064", "");
        boolean boolean8 = file2.renameTo(file7);
        java.io.File file9 = file7.getAbsoluteFile();
        java.io.File file11 = new java.io.File(file7, "hi!");
        boolean boolean13 = file11.setExecutable(false);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/experiment");
        org.junit.Assert.assertEquals(file9.toString(), "/experiment/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file11.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file11.toString(), "2022-02-21T09:33:57.064/hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer2 = charBuffer1.clear();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer6 = charBuffer5.clear();
        int int7 = charBuffer3.compareTo(charBuffer5);
        java.lang.String str8 = charBuffer3.toString();
        java.util.stream.IntStream intStream9 = charBuffer3.chars();
        java.util.stream.IntStream intStream10 = intStream9.distinct();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant11 = new org.joda.time.Instant((java.lang.Object) intStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.stream.IntPipeline$Head");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Optional.empty" + "'", str8, "Optional.empty");
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(intStream10);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 'x', (long) 53);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean3 = mutableInterval1.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = period8.get(durationFieldType9);
        org.joda.time.Period period11 = period8.toPeriod();
        mutableInterval1.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period13 = mutableInterval1.toPeriod();
        org.joda.time.Chronology chronology14 = mutableInterval1.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths((int) (short) 1);
        int int24 = dateTime23.getEra();
        boolean boolean26 = dateTime23.isBefore((long) 2022);
        org.joda.time.Duration duration27 = org.joda.time.Duration.ZERO;
        java.lang.String str28 = duration27.toString();
        org.joda.time.Seconds seconds29 = duration27.toStandardSeconds();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusMinutes(9);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27);
        boolean boolean38 = mutableInterval1.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0S" + "'", str28, "PT0S");
        org.junit.Assert.assertNotNull(seconds29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-21T09:42:05.052" + "'", str32, "2022-02-21T09:42:05.052");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.Clock clock4 = java.time.Clock.systemDefaultZone();
        boolean boolean5 = gregorianCalendar1.after((java.lang.Object) clock4);
        java.time.LocalTime localTime6 = java.time.LocalTime.now(clock4);
        java.time.ZonedDateTime zonedDateTime7 = java.time.ZonedDateTime.now(clock4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(zonedDateTime7);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusDays(97);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withWeekyear(345000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 345000000 for weekyear must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        boolean boolean9 = languageRangeList7.contains((java.lang.Object) "");
        boolean boolean10 = languageRangeList7.isEmpty();
        boolean boolean12 = languageRangeList7.remove((java.lang.Object) 10L);
        boolean boolean13 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7);
        int int14 = strSet2.size();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.monthOfYear();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 1);
        long long20 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight19);
        boolean boolean21 = strSet2.contains((java.lang.Object) dateMidnight19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean23 = dateMidnight19.isSupported(dateTimeFieldType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((java.lang.Object) dateTimeFieldType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.firstKey();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.lang.String str3 = strMap0.lastKey();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = strMap0.headMap("PT4.096S");
        java.lang.Object obj6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = strMap5.containsKey(obj6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Big5" + "'", str1, "Big5");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "x-windows-iso2022jp" + "'", str3, "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long3 = duration2.getStandardDays();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundFloorCopy();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime14, periodType15);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.monthOfYear();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.years();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) 64, chronology21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 14, chronology21);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(32769, 943000000, (int) (short) -1, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 32769");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0 };
        java.net.InetAddress inetAddress6 = java.net.InetAddress.getByAddress("Optional.empty", byteArray5);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.wrap(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            float float9 = byteBuffer7.getFloat(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, 0]");
        org.junit.Assert.assertNotNull(inetAddress6);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = yearMonthDay2.toDateMidnight(dateTimeZone3);
        boolean boolean6 = dateMidnight4.isBefore(996L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withDayOfWeek((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        java.lang.String str18 = localDate17.toString();
        int int19 = localDate17.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-21" + "'", str18, "2022-02-21");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.joda.time.Period period2 = new org.joda.time.Period(125L, (long) ' ');
        org.joda.time.Period period4 = period2.minusMonths(32);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime.Property property7 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime9 = property7.roundHalfEvenCopy();
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.THREE;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod19.setYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period26);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) seconds27);
        boolean boolean29 = seconds10.isGreaterThan(seconds27);
        org.joda.time.MutableInterval mutableInterval31 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean33 = mutableInterval31.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone36);
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.DurationFieldType durationFieldType39 = null;
        int int40 = period38.get(durationFieldType39);
        org.joda.time.Period period41 = period38.toPeriod();
        mutableInterval31.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period44 = period38.plusMinutes((int) (byte) 100);
        org.joda.time.Period period46 = period38.withYears(64);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.days();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long50 = duration49.getStandardDays();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long53 = duration52.getStandardDays();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property63 = dateTime62.hourOfDay();
        org.joda.time.DateTime dateTime64 = property63.roundFloorCopy();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime64, periodType65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod76.setYears((int) '#');
        mutablePeriod67.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property84 = dateMidnight83.monthOfYear();
        org.joda.time.Chronology chronology85 = dateMidnight83.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.days();
        mutablePeriod76.setPeriod((long) 3, (long) 9, chronology85);
        boolean boolean88 = durationFieldType47.isSupported(chronology85);
        org.joda.time.Period period90 = period38.withFieldAdded(durationFieldType47, 97);
        boolean boolean91 = seconds27.isSupported(durationFieldType47);
        boolean boolean92 = localTime9.isSupported(durationFieldType47);
        boolean boolean93 = period2.isSupported(durationFieldType47);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        java.net.URI uRI4 = java.net.URI.create("January");
        java.net.URI uRI6 = java.net.URI.create("January");
        java.net.URI uRI7 = uRI4.relativize(uRI6);
        java.net.URI uRI9 = java.net.URI.create("January");
        java.lang.String str10 = uRI9.getRawUserInfo();
        java.lang.String str11 = uRI9.getRawPath();
        java.lang.String str12 = uRI9.getHost();
        java.net.URI uRI13 = uRI6.relativize(uRI9);
        boolean boolean14 = localTime1.equals((java.lang.Object) uRI6);
        java.lang.String str15 = uRI6.getRawAuthority();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.net.UnknownHostException unknownHostException0 = new java.net.UnknownHostException();
        java.security.cert.CertificateEncodingException certificateEncodingException1 = new java.security.cert.CertificateEncodingException((java.lang.Throwable) unknownHostException0);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T09:34:38.107");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        mutableDateTime0.add((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean8 = mutableInterval6.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period13.get(durationFieldType14);
        org.joda.time.Period period16 = period13.toPeriod();
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period19 = period13.plusMinutes((int) (byte) 100);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long25 = duration24.getStandardDays();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Period period28 = duration24.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime0.millisOfSecond();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime0.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        mutableDateTime0.add((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean8 = mutableInterval6.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period13.get(durationFieldType14);
        org.joda.time.Period period16 = period13.toPeriod();
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period19 = period13.plusMinutes((int) (byte) 100);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long25 = duration24.getStandardDays();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Period period28 = duration24.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plusMonths((int) '#');
        boolean boolean36 = dateMidnight34.isAfter((long) (short) 1);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.withChronology(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime49 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.monthOfYear();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (short) 1);
        long long55 = property52.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.withField(dateTimeFieldType56, (int) ' ');
        boolean boolean59 = dateTime45.isSupported(dateTimeFieldType56);
        int int60 = dateMidnight34.get(dateTimeFieldType56);
        mutableDateTime0.set(dateTimeFieldType56, 7);
        mutableDateTime0.addWeekyears((int) (short) 1);
        mutableDateTime0.setTime((long) 9);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 72 + "'", int60 == 72);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.time.Month month1 = java.time.Month.MARCH;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate3 = java.time.LocalDate.of(0, month1, 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.MARCH + "'", month1.equals(java.time.Month.MARCH));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.net.URI uRI1 = java.net.URI.create("January");
        java.net.URI uRI3 = java.net.URI.create("January");
        java.net.URI uRI4 = uRI1.relativize(uRI3);
        java.net.URI uRI6 = java.net.URI.create("January");
        java.net.URI uRI8 = java.net.URI.create("January");
        java.net.URI uRI9 = uRI6.relativize(uRI8);
        java.net.URI uRI10 = uRI4.relativize(uRI8);
        java.net.URI uRI12 = java.net.URI.create("January");
        java.net.URI uRI14 = java.net.URI.create("January");
        java.net.URI uRI15 = uRI12.relativize(uRI14);
        java.net.URI uRI16 = uRI4.relativize(uRI12);
        java.net.URI uRI18 = java.net.URI.create("January");
        java.net.URI uRI20 = java.net.URI.create("January");
        java.net.URI uRI21 = uRI18.relativize(uRI20);
        java.net.URI uRI23 = java.net.URI.create("January");
        java.lang.String str24 = uRI23.getRawUserInfo();
        java.lang.String str25 = uRI23.getRawPath();
        java.lang.String str26 = uRI23.getHost();
        java.net.URI uRI27 = uRI20.relativize(uRI23);
        java.net.URI uRI28 = uRI23.normalize();
        java.net.URI uRI29 = uRI16.relativize(uRI23);
        java.lang.String str30 = uRI23.getUserInfo();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNotNull(uRI3);
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(uRI10);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertNotNull(uRI18);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertNotNull(uRI23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "January" + "'", str25, "January");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertNotNull(uRI28);
        org.junit.Assert.assertNotNull(uRI29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress[] inetAddressArray1 = java.net.InetAddress.getAllByName("clockhourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: clockhourOfHalfday: Name or service not known");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.util.Date date2 = java.util.Date.from(instant1);
        java.time.Clock clock3 = java.time.Clock.systemUTC();
        java.time.Instant instant4 = clock3.instant();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofInstant(instant4, (java.time.ZoneId) zoneOffset6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalTime localTime9 = offsetDateTime8.toLocalTime();
        int int10 = offsetDateTime8.getSecond();
        java.time.Period period12 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean14 = period12.equals((java.lang.Object) (-1));
        java.time.Period period16 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean18 = period16.equals((java.lang.Object) (-1));
        int int19 = period16.getDays();
        java.time.Period period20 = period12.minus((java.time.temporal.TemporalAmount) period16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime22 = localDateTime21.toLocalTime();
        java.time.LocalDateTime localDateTime24 = localDateTime21.withNano(0);
        java.time.Period period26 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean28 = period26.equals((java.lang.Object) (-1));
        java.time.Period period30 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean32 = period30.equals((java.lang.Object) (-1));
        int int33 = period30.getDays();
        java.time.Period period34 = period26.minus((java.time.temporal.TemporalAmount) period30);
        java.time.chrono.ChronoPeriod chronoPeriod35 = period30.normalized();
        java.time.temporal.Temporal temporal36 = localDateTime24.plus((java.time.temporal.TemporalAmount) chronoPeriod35);
        java.time.temporal.Temporal temporal37 = period16.addTo((java.time.temporal.Temporal) localDateTime24);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime8.minus((java.time.temporal.TemporalAmount) period16);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime40 = offsetDateTime8.withDayOfMonth(445000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 445000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 09:42:05 UTC 2022");
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronoPeriod35);
        org.junit.Assert.assertNotNull(temporal36);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone8);
        org.joda.time.Period period10 = interval9.toPeriod();
        boolean boolean11 = interval5.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.monthOfYear();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.halfdays();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L, chronology16);
        org.joda.time.Interval interval19 = interval9.withChronology(chronology16);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((long) 'a', chronology16);
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.minuteOfHour();
        int int25 = property24.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (short) 1);
        long long31 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        int int33 = property28.getMaximumTextLength(locale32);
        java.util.Locale.setDefault(locale32);
        java.lang.String str35 = property24.getAsText(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 16, chronology16, locale32, (java.lang.Integer) 14, 5);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        long long41 = dateTimeZone39.nextTransition(0L);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.util.function.IntSupplier intSupplier0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream1 = java.util.stream.IntStream.generate(intSupplier0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.time.Duration duration1 = java.time.Duration.ofHours(0L);
        java.time.Duration duration3 = java.time.Duration.ofHours(0L);
        int int4 = duration1.compareTo(duration3);
        java.time.Duration duration6 = duration1.minusMinutes((long) 'a');
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList7 = duration1.getUnits();
        long long8 = duration1.toNanos();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(temporalUnitList7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        mutableDateTime0.add(durationFieldType4, 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.centuryOfEra();
        boolean boolean9 = mutableDateTime0.isEqual((-4363199987L));
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.junit.Assert.assertNotNull(periodType0);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours(16);
        boolean boolean12 = dateTime8.isBefore(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime26, periodType27);
        boolean boolean29 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone36);
        org.joda.time.Period period38 = interval37.toPeriod();
        boolean boolean39 = interval33.isBefore((org.joda.time.ReadableInterval) interval37);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.monthOfYear();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.halfdays();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(0L, chronology44);
        org.joda.time.Interval interval47 = interval37.withChronology(chronology44);
        org.joda.time.DateTime dateTime48 = dateTime8.withChronology(chronology44);
        int int49 = dateTime8.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(256);
        boolean boolean2 = intBuffer1.isDirect();
        java.nio.IntBuffer intBuffer3 = intBuffer1.slice();
        java.nio.IntBuffer intBuffer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer5 = intBuffer1.put(intBuffer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intBuffer3);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.firstKey();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = strSet2.contains((java.lang.Object) dateTimeFieldType3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Big5" + "'", str1, "Big5");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(256);
        boolean boolean2 = intBuffer1.isDirect();
        java.nio.ByteOrder byteOrder3 = intBuffer1.order();
        java.nio.IntBuffer intBuffer5 = java.nio.IntBuffer.allocate(256);
        boolean boolean6 = intBuffer5.isDirect();
        int[] intArray7 = intBuffer5.array();
        java.nio.IntBuffer intBuffer10 = intBuffer1.get(intArray7, 9, (int) (short) 1);
        java.nio.Buffer buffer12 = intBuffer10.position(14);
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteOrder3);
        org.junit.Assert.assertNotNull(intBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime3 = java.time.LocalTime.of(943000000, 10, 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 943000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition7 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD;
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.now();
        boolean boolean10 = localDateTime8.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds((long) '4');
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        int int15 = zoneOffset14.getTotalSeconds();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        int int20 = timeZone18.getRawOffset();
        java.util.Calendar.Builder builder21 = builder16.setTimeZone(timeZone18);
        java.time.Clock clock22 = java.time.Clock.systemUTC();
        java.time.Instant instant23 = clock22.instant();
        java.util.Date date24 = java.util.Date.from(instant23);
        date24.setHours((int) (short) 10);
        java.util.Calendar.Builder builder27 = builder21.setInstant(date24);
        boolean boolean28 = zoneOffset14.equals((java.lang.Object) builder27);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.now();
        boolean boolean31 = localDateTime29.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime33 = localDateTime29.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        boolean boolean36 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean37 = localDateTime33.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime39 = localDateTime33.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.now();
        boolean boolean42 = localDateTime40.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.LocalDateTime localDateTime44 = localDateTime40.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.now();
        boolean boolean47 = localDateTime45.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        boolean boolean48 = localDateTime44.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        boolean boolean49 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.ofStrict(localDateTime39, zoneOffset51, (java.time.ZoneId) zoneOffset53);
        java.time.OffsetTime offsetTime55 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset53);
        java.time.LocalDateTime localDateTime56 = timeDefinition7.createDateTime(localDateTime12, zoneOffset14, zoneOffset53);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime57 = java.time.OffsetDateTime.of(403, 10, 445000000, 247, 20, 23, 17, zoneOffset53);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 445000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + timeDefinition7 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD + "'", timeDefinition7.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000 + "'", int15 == 36000);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(clock22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 10:42:05 UTC 2022");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(offsetTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.nio.file.Path path5 = file2.toPath();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter(file2);
        printWriter6.print((double) 35);
        java.io.PrintWriter printWriter10 = printWriter6.append(' ');
        printWriter10.flush();
        java.net.URL uRL13 = null;
        java.security.cert.Certificate[] certificateArray14 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource15 = new java.security.CodeSource(uRL13, certificateArray14);
        java.io.PrintWriter printWriter16 = printWriter10.printf("ISO", (java.lang.Object[]) certificateArray14);
        printWriter16.println("2022-02-21T09:34:34.381");
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "2022-02-21T09:34:00.693");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer23 = printWriter16.append((java.lang.CharSequence) "2022-02-21T09:34:00.693", 25, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(certificateArray14);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(charBuffer20);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0 };
        java.net.InetAddress inetAddress6 = java.net.InetAddress.getByAddress("Optional.empty", byteArray5);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.wrap(byteArray5);
        java.lang.String str9 = byteBuffer8.toString();
        // The following exception was thrown during execution in test generation
        try {
            float float11 = byteBuffer8.getFloat(565000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, 0]");
        org.junit.Assert.assertNotNull(inetAddress6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]" + "'", str9, "java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer2 = charBuffer1.clear();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.nio.CharBuffer charBuffer4 = charBuffer1.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer5 = charBuffer1.compact();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.util.OptionalLong optionalLong0 = java.util.OptionalLong.empty();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusMonths((int) '#');
        int int5 = dateMidnight4.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withMillis((long) (short) -1);
        boolean boolean8 = optionalLong0.equals((java.lang.Object) dateMidnight7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDayOfMonth(3);
        org.junit.Assert.assertNotNull(optionalLong0);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        boolean boolean4 = interval3.containsNow();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        long long10 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withField(dateTimeFieldType11, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.withZoneRetainFields(dateTimeZone14);
        boolean boolean16 = interval3.isBefore((org.joda.time.ReadableInstant) dateMidnight15);
        boolean boolean18 = interval3.isBefore((long) '4');
        org.joda.time.Duration duration19 = interval3.toDuration();
        boolean boolean20 = interval3.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        double[] doubleArray5 = new double[] { 96, 1024, 'a', 32, 100 };
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray5);
        boolean boolean7 = doubleBuffer6.hasArray();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        boolean boolean13 = doubleBuffer6.equals((java.lang.Object) chronology11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[96.0, 1024.0, 97.0, 32.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleBuffer14);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime5 = property2.addCopy((long) 100);
        long long6 = property2.remainder();
        org.joda.time.LocalTime localTime7 = property2.getLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property8.addCopy((long) '#');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 39L + "'", long6 == 39L);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.Spliterator.OfDouble ofDouble2 = doubleStream1.spliterator();
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        builder3.accept((double) 43200000L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream6 = doubleStream1.peek((java.util.function.DoubleConsumer) builder3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(ofDouble2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(256);
        boolean boolean2 = intBuffer1.isDirect();
        int[] intArray3 = intBuffer1.array();
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of(intArray3);
        java.util.function.IntToDoubleFunction intToDoubleFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream6 = intStream4.mapToDouble(intToDoubleFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file10 = new java.io.File(file8, "2022-02-21T09:33:57.064");
        java.nio.file.Path path11 = file8.toPath();
        int int12 = path5.compareTo(path11);
        java.nio.file.Path path14 = path5.resolveSibling("BIG_ENDIAN");
        java.io.File file17 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file19 = new java.io.File(file17, "2022-02-21T09:33:57.064");
        java.nio.file.Path path20 = file17.toPath();
        java.io.File file23 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file25 = new java.io.File(file23, "2022-02-21T09:33:57.064");
        java.nio.file.Path path26 = file23.toPath();
        int int27 = path20.compareTo(path26);
        java.nio.file.Path path29 = path20.resolveSibling("BIG_ENDIAN");
        int int30 = path14.compareTo(path29);
        java.nio.file.WatchService watchService31 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind32 = null;
        java.nio.file.WatchEvent.Kind[] kindArray34 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray35 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray34;
        wildcardKindArray35[0] = wildcardKind32;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey38 = path29.register(watchService31, wildcardKindArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file10.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file10.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file19.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file19.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file25.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file25.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(kindArray34);
        org.junit.Assert.assertNotNull(wildcardKindArray35);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod8.setYears(100);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long13 = duration12.getStandardDays();
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.monthOfYear();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.years();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0, chronology24);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar28 = new java.util.GregorianCalendar(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 32, chronology24, locale27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) 11, (long) (short) 100, chronology24);
        mutablePeriod8.setPeriod(5L, (long) 14, chronology24);
        mutablePeriod8.add(5220, 943000000, 457000000, 59, 28, 16, (int) (byte) 10, 20);
        int int41 = mutablePeriod8.getMonths();
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 943000000 + "'", int41 == 943000000);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.time.ZoneId zoneId8 = timeZone5.toZoneId();
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, zoneId8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusDays(1645436047L);
        java.time.Month month12 = offsetDateTime9.getMonth();
        java.time.Month month14 = month12.minus(1645437600L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertTrue("'" + month12 + "' != '" + java.time.Month.FEBRUARY + "'", month12.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.FEBRUARY + "'", month14.equals(java.time.Month.FEBRUARY));
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime12 = property9.addWrapFieldToCopy(19);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        boolean boolean6 = languageRangeList4.contains((java.lang.Object) "");
        boolean boolean7 = languageRangeList4.isEmpty();
        java.util.Locale.LanguageRange languageRange8 = null;
        boolean boolean9 = languageRangeList4.add(languageRange8);
        int int10 = languageRangeList4.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDateTime localDateTime23 = property21.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMonths(7000000);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withWeekOfWeekyear(17);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(15, 1970, 126, (int) '\uffff', (int) '4');
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.withDayOfMonth(20);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(4096);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.withFieldAdded(durationFieldType8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.ZonedDateTime zonedDateTime3 = gregorianCalendar1.toZonedDateTime();
        java.time.DayOfWeek dayOfWeek4 = zonedDateTime3.getDayOfWeek();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime3.minusHours((long) 6);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit9 = chronoField8.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime10 = zonedDateTime3.plus(88473600000L, temporalUnit9);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Forever");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(zonedDateTime3);
        org.junit.Assert.assertTrue("'" + dayOfWeek4 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek4.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField8.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit9 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit9.equals(java.time.temporal.ChronoUnit.FOREVER));
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.util.GregorianCalendar gregorianCalendar3 = new java.util.GregorianCalendar(2, 10, 11);
        int int4 = gregorianCalendar3.getFirstDayOfWeek();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.time.ZonedDateTime zonedDateTime2 = java.time.ZonedDateTime.now(clock0);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zonedDateTime2);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod8.setYears((int) '#');
        mutablePeriod8.addSeconds(1);
        mutablePeriod8.addSeconds(100);
        mutablePeriod8.addWeeks((int) ':');
        mutablePeriod8.addWeeks(13);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime5 = property2.addCopy((long) 100);
        long long6 = property2.remainder();
        org.joda.time.LocalTime localTime7 = property2.getLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.joda.time.LocalTime.Property property9 = localTime7.hourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 466L + "'", long6 == 466L);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.lang.String[] strArray0 = java.util.TimeZone.getAvailableIDs();
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.nio.file.Path path5 = file2.toPath();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter(file2);
        printWriter6.print((double) 35);
        char[] charArray12 = new char[] { ':', 'a', '#' };
        printWriter6.print(charArray12);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter6, true);
        java.net.URL uRL17 = null;
        java.security.cert.Certificate[] certificateArray18 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource19 = new java.security.CodeSource(uRL17, certificateArray18);
        java.io.PrintWriter printWriter20 = printWriter6.format("2022-02-21T09:34:22.998", (java.lang.Object[]) certificateArray18);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), ":a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), ":a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[:, a, #]");
        org.junit.Assert.assertNotNull(certificateArray18);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        mutableDateTime0.add((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean8 = mutableInterval6.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period13.get(durationFieldType14);
        org.joda.time.Period period16 = period13.toPeriod();
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period19 = period13.plusMinutes((int) (byte) 100);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long25 = duration24.getStandardDays();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Period period28 = duration24.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long33 = duration32.getStandardDays();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.time();
        org.joda.time.Period period36 = duration32.toPeriodTo(readableInstant34, periodType35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = period41.get(durationFieldType42);
        org.joda.time.Period period44 = period41.toPeriod();
        org.joda.time.Hours hours45 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType46 = hours45.getFieldType();
        org.joda.time.DurationFieldType durationFieldType47 = hours45.getFieldType();
        int int48 = period41.indexOf(durationFieldType47);
        int int49 = period36.get(durationFieldType47);
        mutableDateTime0.add(durationFieldType47, 2);
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar53 = new java.util.GregorianCalendar(locale52);
        org.joda.time.YearMonthDay yearMonthDay54 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay54.toDateMidnight(dateTimeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTime dateTime61 = dateMidnight56.toDateTime(dateTimeZone60);
        mutableDateTime0.setZone(dateTimeZone60);
        int int64 = dateTimeZone60.getStandardOffset((long) 15);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset1);
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.time.temporal.TemporalQuery<java.lang.Boolean> booleanTemporalQuery4 = java.time.format.DateTimeFormatter.parsedLeapSecond();
        java.lang.Boolean boolean5 = localTime3.query(booleanTemporalQuery4);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) localTime3);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetDateTime from TemporalAccessor: 19:42:06.671 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(booleanTemporalQuery4);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + false + "'", boolean5, false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod28.setYears((int) '#');
        mutablePeriod28.addSeconds(1);
        mutablePeriod28.addSeconds(100);
        org.joda.time.MutableInterval mutableInterval36 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval36.setEndMillis((long) 4096);
        org.joda.time.Duration duration39 = mutableInterval36.toDuration();
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration39, 70);
        org.joda.time.DateTime dateTime43 = localDateTime42.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(15);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        long long18 = localDate17.toEpochDay();
        int int19 = localDate17.lengthOfYear();
        java.time.chrono.Era era20 = localDate17.getEra();
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.YEAR;
        java.lang.String str22 = chronoField21.toString();
        boolean boolean23 = localDate17.isSupported((java.time.temporal.TemporalField) chronoField21);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        boolean boolean26 = localDateTime24.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDate localDate27 = localDateTime24.toLocalDate();
        boolean boolean28 = localDate17.isBefore((java.time.chrono.ChronoLocalDate) localDate27);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.now();
        boolean boolean31 = localDateTime29.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime33 = localDateTime29.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        boolean boolean36 = localDateTime34.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean37 = localDateTime33.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime39 = localDateTime33.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.now();
        boolean boolean42 = localDateTime40.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.LocalDateTime localDateTime44 = localDateTime40.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.now();
        boolean boolean47 = localDateTime45.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        boolean boolean48 = localDateTime44.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        boolean boolean49 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.ofStrict(localDateTime39, zoneOffset51, (java.time.ZoneId) zoneOffset53);
        java.time.OffsetTime offsetTime55 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset53);
        java.time.OffsetDateTime offsetDateTime56 = localDate27.atTime(offsetTime55);
        int int57 = offsetTime55.getHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Year" + "'", str22, "Year");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(offsetTime55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 19 + "'", int57 == 19);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0 };
        java.net.InetAddress inetAddress6 = java.net.InetAddress.getByAddress("Optional.empty", byteArray5);
        boolean boolean7 = inetAddress6.isSiteLocalAddress();
        boolean boolean8 = inetAddress6.isAnyLocalAddress();
        boolean boolean9 = inetAddress6.isLoopbackAddress();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, 0]");
        org.junit.Assert.assertNotNull(inetAddress6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = dateTimeField22.getAsText((long) 21, locale25);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        int int28 = dateTimeField22.getMaximumTextLength(locale27);
        boolean boolean30 = dateTimeField22.isLeap((long) 14);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.OffsetTime offsetTime2 = offsetTime0.minusSeconds((long) 6);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.MutableInterval mutableInterval5 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval5.setEndMillis((long) 4096);
        org.joda.time.Duration duration8 = mutableInterval5.toDuration();
        org.joda.time.Interval interval9 = interval3.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval15.setEndMillis((long) 4096);
        org.joda.time.Duration duration18 = mutableInterval15.toDuration();
        org.joda.time.Interval interval19 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        java.time.Clock clock20 = java.time.Clock.systemUTC();
        boolean boolean21 = duration18.equals((java.lang.Object) clock20);
        boolean boolean22 = duration8.isEqual((org.joda.time.ReadableDuration) duration18);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(clock20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone8);
        org.joda.time.Period period10 = interval9.toPeriod();
        boolean boolean11 = interval5.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.monthOfYear();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.halfdays();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L, chronology16);
        org.joda.time.Interval interval19 = interval9.withChronology(chronology16);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((long) 'a', chronology16);
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.minuteOfHour();
        int int25 = property24.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (short) 1);
        long long31 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        int int33 = property28.getMaximumTextLength(locale32);
        java.util.Locale.setDefault(locale32);
        java.lang.String str35 = property24.getAsText(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 16, chronology16, locale32, (java.lang.Integer) 14, 5);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        java.lang.String str40 = dateTimeZone39.getID();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.joda.time.Period period1 = org.joda.time.Period.hours(300000000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds2 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1080000000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        mutableDateTime0.add((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean8 = mutableInterval6.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period13.get(durationFieldType14);
        org.joda.time.Period period16 = period13.toPeriod();
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period19 = period13.plusMinutes((int) (byte) 100);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long25 = duration24.getStandardDays();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Period period28 = duration24.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plusMonths((int) '#');
        boolean boolean36 = dateMidnight34.isAfter((long) (short) 1);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.withChronology(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime49 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.monthOfYear();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (short) 1);
        long long55 = property52.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.withField(dateTimeFieldType56, (int) ' ');
        boolean boolean59 = dateTime45.isSupported(dateTimeFieldType56);
        int int60 = dateMidnight34.get(dateTimeFieldType56);
        mutableDateTime0.set(dateTimeFieldType56, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.set(dateTimeFieldType63, 57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 72 + "'", int60 == 72);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String[] strArray5 = new java.lang.String[] { "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z", "10", "Optional.empty", "2022-02-21T09:34:01.158" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        boolean boolean14 = languageRangeList12.contains((java.lang.Object) "");
        boolean boolean15 = languageRangeList12.isEmpty();
        boolean boolean17 = languageRangeList12.remove((java.lang.Object) 10L);
        boolean boolean18 = languageRangeList12.isEmpty();
        boolean boolean19 = strSet6.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor20 = languageRangeList12.listIterator();
        java.util.Locale.LanguageRange languageRange21 = null;
        languageRangeItor20.add(languageRange21);
        boolean boolean23 = languageRangeItor20.hasPrevious();
        boolean boolean24 = subject0.equals((java.lang.Object) boolean23);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeItor20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean11 = languageRangeList9.contains((java.lang.Object) "");
        boolean boolean12 = languageRangeList9.isEmpty();
        boolean boolean14 = languageRangeList9.remove((java.lang.Object) 10L);
        boolean boolean15 = strSet4.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        int int16 = strSet4.size();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.Object obj18 = properties1.replace((java.lang.Object) int16, (java.lang.Object) duration17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.setWeekyear(0);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar23 = new java.util.GregorianCalendar(locale22);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay24.toDateMidnight(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField28 = yearMonthDay24.getField((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone29);
        java.lang.Object obj31 = properties1.getOrDefault((java.lang.Object) 0, (java.lang.Object) dateMidnight30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties1.keys();
        java.lang.Object obj33 = properties1.clone();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) 1);
        int int36 = dateMidnight35.getDayOfMonth();
        int int37 = dateMidnight35.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight35.withYear(8);
        java.util.Optional<java.time.Period> periodOptional40 = java.util.Optional.empty();
        java.lang.String str41 = periodOptional40.toString();
        java.lang.Object obj42 = properties1.put((java.lang.Object) 8, (java.lang.Object) periodOptional40);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withChronology(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime55 = dateTime51.withCenturyOfEra(9);
        boolean boolean56 = periodOptional40.equals((java.lang.Object) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime55.plusWeeks((int) (byte) -1);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone63);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime73 = dateTime71.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property74 = dateTime73.hourOfDay();
        org.joda.time.DateTime dateTime75 = property74.roundFloorCopy();
        org.joda.time.DateTime.Property property76 = dateTime75.centuryOfEra();
        int int77 = dateTimeZone63.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(dateTimeZone63);
        org.joda.time.DateTime dateTime80 = dateTime58.toDateTime(dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(periodOptional40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Optional.empty" + "'", str41, "Optional.empty");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (short) 1);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.monthOfYear();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.years();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0, chronology7);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar11 = new java.util.GregorianCalendar(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 32, chronology7, locale10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) 11, (long) (short) 100, chronology7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone16);
        org.joda.time.MutableInterval mutableInterval19 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval19.setEndMillis((long) 4096);
        org.joda.time.Duration duration22 = mutableInterval19.toDuration();
        org.joda.time.Interval interval23 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        java.time.Clock clock24 = java.time.Clock.systemUTC();
        boolean boolean25 = duration22.equals((java.lang.Object) clock24);
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.monthOfYear();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.minus(readableDuration30);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.monthOfYear();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.minus(readableDuration35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.minusWeeks(100);
        mutableInterval13.setInterval((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableInstant) dateMidnight33);
        int int40 = dateMidnight33.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = dateMidnight33.withDayOfMonth(50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(clock24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod10.setYears(100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long15 = duration14.getStandardDays();
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = dateTimeField22.getAsText((long) 21, locale25);
        java.util.Locale locale27 = locale25.stripExtensions();
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.firstKey();
        java.util.Set<java.lang.String> strSet2 = strMap0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet3 = strMap0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet4 = strMap0.entrySet();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap7 = strMap0.subMap("P-1000000000M", "2022-02-21T09:34:14.586");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Big5" + "'", str1, "Big5");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strEntrySet3);
        org.junit.Assert.assertNotNull(strEntrySet4);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 7000000);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        int int5 = gregorianCalendar1.getLeastMaximum(8);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = gregorianCalendar1.getGreatestMinimum(442000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 442000000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        boolean boolean8 = localDateTime6.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime10 = localDateTime6.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        boolean boolean14 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime16 = localDateTime10.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        boolean boolean19 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime21 = localDateTime17.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.now();
        boolean boolean24 = localDateTime22.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean25 = localDateTime21.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean26 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange28 = chronoField27.range();
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField27.getRangeUnit();
        boolean boolean30 = localDateTime23.isSupported(temporalUnit29);
        boolean boolean31 = zonedDateTime5.isSupported(temporalUnit29);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.now();
        boolean boolean34 = localDateTime32.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime36 = localDateTime32.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.now();
        boolean boolean39 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean40 = localDateTime36.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        int int41 = localDateTime36.getNano();
        java.time.LocalDateTime localDateTime43 = localDateTime36.withSecond(6);
        boolean boolean44 = temporalUnit29.isSupportedBy((java.time.temporal.Temporal) localDateTime36);
        java.time.LocalDateTime localDateTime46 = localDateTime36.plusMinutes((long) 16);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.now();
        boolean boolean49 = localDateTime47.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.LocalDateTime localDateTime51 = localDateTime47.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.now();
        boolean boolean54 = localDateTime52.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        boolean boolean55 = localDateTime51.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime57 = localDateTime51.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.now();
        boolean boolean60 = localDateTime58.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        java.time.LocalDateTime localDateTime62 = localDateTime58.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.now();
        boolean boolean65 = localDateTime63.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime64);
        boolean boolean66 = localDateTime62.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime64);
        boolean boolean67 = localDateTime57.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime64);
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange69 = chronoField68.range();
        java.time.temporal.TemporalUnit temporalUnit70 = chronoField68.getRangeUnit();
        boolean boolean71 = localDateTime64.isSupported(temporalUnit70);
        boolean boolean72 = temporalUnit70.isDurationEstimated();
        boolean boolean73 = temporalUnit70.isDurationEstimated();
        boolean boolean74 = localDateTime46.isSupported(temporalUnit70);
        java.lang.String str75 = temporalUnit70.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField27.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 494000000 + "'", int41 == 494000000);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField68.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange69);
        org.junit.Assert.assertTrue("'" + temporalUnit70 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit70.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Forever" + "'", str75, "Forever");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        boolean boolean18 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean19 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean20 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate21 = localDateTime10.toLocalDate();
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.now();
        boolean boolean24 = localDateTime22.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime26 = localDateTime22.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.now();
        boolean boolean29 = localDateTime27.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean30 = localDateTime26.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime32 = localDateTime26.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange35 = chronoField34.range();
        java.time.temporal.TemporalUnit temporalUnit36 = chronoField34.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField34.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime38 = localDateTime32.plus((long) 4096, temporalUnit37);
        java.time.LocalDate localDate39 = localDateTime32.toLocalDate();
        java.time.Duration duration41 = java.time.Duration.ofHours(0L);
        java.time.Duration duration43 = java.time.Duration.ofHours(0L);
        int int44 = duration41.compareTo(duration43);
        java.time.Duration duration46 = duration41.minusMinutes((long) 'a');
        long long47 = duration41.toMinutes();
        long long48 = duration41.toHours();
        java.time.Duration duration50 = duration41.minusMinutes((long) ' ');
        java.time.chrono.ChronoLocalDate chronoLocalDate51 = localDate39.plus((java.time.temporal.TemporalAmount) duration41);
        int int52 = localDate39.lengthOfMonth();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.now();
        boolean boolean55 = localDateTime53.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.LocalDateTime localDateTime57 = localDateTime53.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.now();
        boolean boolean60 = localDateTime58.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        boolean boolean61 = localDateTime57.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        java.time.LocalDateTime localDateTime63 = localDateTime57.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange66 = chronoField65.range();
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField65.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit68 = chronoField65.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime69 = localDateTime63.plus((long) 4096, temporalUnit68);
        java.time.LocalDate localDate70 = localDateTime63.toLocalDate();
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar72 = new java.util.GregorianCalendar(locale71);
        org.joda.time.YearMonthDay yearMonthDay73 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar72);
        java.time.Instant instant74 = gregorianCalendar72.toInstant();
        java.time.ZonedDateTime zonedDateTime75 = gregorianCalendar72.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime77 = zonedDateTime75.plusSeconds((long) 5);
        java.time.LocalTime localTime78 = zonedDateTime77.toLocalTime();
        java.time.DayOfWeek dayOfWeek79 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange81 = chronoField80.range();
        boolean boolean82 = chronoField80.isDateBased();
        boolean boolean83 = dayOfWeek79.isSupported((java.time.temporal.TemporalField) chronoField80);
        boolean boolean84 = zonedDateTime77.isSupported((java.time.temporal.TemporalField) chronoField80);
        java.time.LocalTime localTime89 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray90 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList91 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList91, languageRangeArray90);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap93 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList94 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList91, strMap93);
        boolean boolean95 = localTime89.equals((java.lang.Object) languageRangeList91);
        boolean boolean96 = chronoField80.isSupportedBy((java.time.temporal.TemporalAccessor) localTime89);
        boolean boolean97 = localDate70.isSupported((java.time.temporal.TemporalField) chronoField80);
        int int98 = localDate39.get((java.time.temporal.TemporalField) chronoField80);
        long long99 = localDate21.getLong((java.time.temporal.TemporalField) chronoField80);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField34.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange35);
        org.junit.Assert.assertTrue("'" + temporalUnit36 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit36.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(chronoLocalDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 28 + "'", int52 == 28);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField65.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit68 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit68.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + dayOfWeek79 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek79.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField80.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(languageRangeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(languageRangeList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2022 + "'", int98 == 2022);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 2022L + "'", long99 == 2022L);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.time.Period period1 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean3 = period1.equals((java.lang.Object) (-1));
        java.time.Period period5 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean7 = period5.equals((java.lang.Object) (-1));
        int int8 = period5.getDays();
        java.time.Period period9 = period1.minus((java.time.temporal.TemporalAmount) period5);
        java.time.Clock clock10 = java.time.Clock.systemUTC();
        java.time.Instant instant11 = clock10.instant();
        java.util.Date date12 = java.util.Date.from(instant11);
        java.time.Clock clock13 = java.time.Clock.systemUTC();
        java.time.Instant instant14 = clock13.instant();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofInstant(instant14, (java.time.ZoneId) zoneOffset16);
        java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.LocalTime localTime19 = offsetDateTime18.toLocalTime();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime18.plusDays((long) 365);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime18.plusYears((long) 100);
        java.time.Duration duration25 = java.time.Duration.ofHours(0L);
        java.time.Duration duration27 = java.time.Duration.ofHours(0L);
        int int28 = duration25.compareTo(duration27);
        java.time.Duration duration30 = duration27.plusMillis(100L);
        java.time.OffsetDateTime offsetDateTime31 = offsetDateTime18.minus((java.time.temporal.TemporalAmount) duration30);
        int int32 = offsetDateTime31.getHour();
        java.time.temporal.Temporal temporal33 = period9.subtractFrom((java.time.temporal.Temporal) offsetDateTime31);
        java.time.OffsetDateTime offsetDateTime35 = offsetDateTime31.withDayOfMonth(7);
        long long36 = offsetDateTime31.toEpochSecond();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(clock10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 21 09:42:07 UTC 2022");
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645436527L + "'", long36 == 1645436527L);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.time.Instant instant0 = java.time.Instant.MAX;
        java.time.Clock clock1 = java.time.Clock.systemUTC();
        java.time.Instant instant2 = clock1.instant();
        java.time.Instant instant4 = instant2.minusMillis((-1L));
        java.time.Clock clock5 = java.time.Clock.systemUTC();
        java.time.Instant instant6 = clock5.instant();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofInstant(instant6, (java.time.ZoneId) zoneOffset8);
        boolean boolean10 = instant4.isAfter(instant6);
        boolean boolean11 = instant0.isAfter(instant4);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(clock1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.LocalDate localDate1 = java.time.LocalDate.now(clock0);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("2022-02-21T09:34:08.128");
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(42, 457000000, 59, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod8.setYears(100);
        int int11 = mutablePeriod8.getDays();
        mutablePeriod8.addMinutes(12);
        mutablePeriod8.setDays(1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        long long5 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withField(dateTimeFieldType6, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int12 = dateMidnight4.get(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate(256);
        boolean boolean2 = intBuffer1.isDirect();
        java.nio.ByteOrder byteOrder3 = intBuffer1.order();
        boolean boolean4 = intBuffer1.hasArray();
        org.junit.Assert.assertNotNull(intBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteOrder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        double[] doubleArray3 = new double[] { 97, 10, '#' };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        double[] doubleArray8 = new double[] { 97, 10, '#' };
        java.nio.DoubleBuffer doubleBuffer9 = java.nio.DoubleBuffer.wrap(doubleArray8);
        java.nio.DoubleBuffer doubleBuffer10 = doubleBuffer4.get(doubleArray8);
        java.nio.DoubleBuffer doubleBuffer11 = doubleBuffer4.compact();
        double[] doubleArray15 = new double[] { 97, 10, '#' };
        java.nio.DoubleBuffer doubleBuffer16 = java.nio.DoubleBuffer.wrap(doubleArray15);
        java.nio.DoubleBuffer doubleBuffer17 = doubleBuffer16.asReadOnlyBuffer();
        java.time.format.DecimalStyle decimalStyle18 = java.time.format.DecimalStyle.STANDARD;
        java.time.format.DecimalStyle decimalStyle20 = decimalStyle18.withZeroDigit('a');
        java.io.File file23 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file25 = new java.io.File(file23, "2022-02-21T09:33:57.064");
        java.io.File file27 = new java.io.File(file25, "T00:00:00.032");
        boolean boolean28 = decimalStyle20.equals((java.lang.Object) file27);
        boolean boolean29 = file27.mkdirs();
        boolean boolean30 = doubleBuffer16.equals((java.lang.Object) boolean29);
        java.nio.DoubleBuffer doubleBuffer31 = doubleBuffer16.slice();
        java.nio.DoubleBuffer doubleBuffer32 = doubleBuffer16.slice();
        java.nio.DoubleBuffer doubleBuffer33 = doubleBuffer4.put(doubleBuffer16);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[97.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleBuffer9);
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[97.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleBuffer16);
        org.junit.Assert.assertNotNull(doubleBuffer17);
        org.junit.Assert.assertNotNull(decimalStyle18);
        org.junit.Assert.assertNotNull(decimalStyle20);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file25.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file25.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file27.getParent(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file27.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064/T00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertNotNull(doubleBuffer32);
        org.junit.Assert.assertNotNull(doubleBuffer33);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod8.setYears(100);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod8.copy();
        mutablePeriod8.setMonths((int) (byte) 10);
        mutablePeriod8.clear();
        mutablePeriod8.addHours(365);
        int int17 = mutablePeriod8.getDays();
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.minusMinutes(100L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((java.lang.Object) localTime0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        boolean boolean18 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean19 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean20 = localDateTime10.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange22 = chronoField21.range();
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField21.getRangeUnit();
        boolean boolean24 = localDateTime17.isSupported(temporalUnit23);
        java.time.LocalTime localTime25 = localDateTime17.toLocalTime();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar27 = new java.util.GregorianCalendar(locale26);
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar27);
        java.time.Instant instant29 = gregorianCalendar27.toInstant();
        java.time.ZonedDateTime zonedDateTime30 = gregorianCalendar27.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime30.withEarlierOffsetAtOverlap();
        java.time.Instant instant32 = zonedDateTime31.toInstant();
        int int33 = zonedDateTime31.getMonthValue();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar35 = new java.util.GregorianCalendar(locale34);
        org.joda.time.YearMonthDay yearMonthDay36 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar35);
        java.time.Instant instant37 = gregorianCalendar35.toInstant();
        java.time.ZonedDateTime zonedDateTime38 = gregorianCalendar35.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime38.plusSeconds((long) 5);
        java.time.LocalTime localTime41 = zonedDateTime40.toLocalTime();
        java.time.DayOfWeek dayOfWeek42 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange44 = chronoField43.range();
        boolean boolean45 = chronoField43.isDateBased();
        boolean boolean46 = dayOfWeek42.isSupported((java.time.temporal.TemporalField) chronoField43);
        boolean boolean47 = zonedDateTime40.isSupported((java.time.temporal.TemporalField) chronoField43);
        java.time.LocalDate localDate48 = zonedDateTime40.toLocalDate();
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar50 = new java.util.GregorianCalendar(locale49);
        org.joda.time.YearMonthDay yearMonthDay51 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar50);
        java.time.Instant instant52 = gregorianCalendar50.toInstant();
        java.time.ZonedDateTime zonedDateTime53 = gregorianCalendar50.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime53.withEarlierOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.YEAR;
        java.lang.String str56 = chronoField55.toString();
        java.time.temporal.ValueRange valueRange57 = zonedDateTime54.range((java.time.temporal.TemporalField) chronoField55);
        boolean boolean58 = zonedDateTime40.isSupported((java.time.temporal.TemporalField) chronoField55);
        int int59 = zonedDateTime40.getNano();
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime62 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset61);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime40.withZoneSameLocal((java.time.ZoneId) zoneOffset61);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime64 = zonedDateTime31.withZoneSameLocal((java.time.ZoneId) zoneOffset61);
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange66 = chronoField65.range();
        boolean boolean67 = chronoField65.isDateBased();
        java.time.temporal.ValueRange valueRange68 = zonedDateTime31.range((java.time.temporal.TemporalField) chronoField65);
        boolean boolean69 = localDateTime17.isSupported((java.time.temporal.TemporalField) chronoField65);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange22);
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + dayOfWeek42 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek42.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField43.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField55.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Year" + "'", str56, "Year");
        org.junit.Assert.assertNotNull(valueRange57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 220000000 + "'", int59 == 220000000);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime64);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField65.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(valueRange68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        mutableInterval1.setEndMillis((long) 4096);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.monthOfYear();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        java.time.Period period9 = java.time.Period.ofMonths((int) (byte) -1);
        boolean boolean11 = period9.equals((java.lang.Object) (-1));
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withChronology(chronology19);
        boolean boolean21 = period9.equals((java.lang.Object) dateTime20);
        org.joda.time.LocalDateTime localDateTime22 = dateTime20.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval1.setInterval((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.firstKey();
        java.lang.String str2 = strMap0.lastKey();
        java.util.Set<java.lang.String> strSet3 = strMap0.keySet();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone12);
        org.joda.time.Period period14 = interval13.toPeriod();
        boolean boolean15 = interval9.isBefore((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.monthOfYear();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.halfdays();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(0L, chronology20);
        org.joda.time.Interval interval23 = interval13.withChronology(chronology20);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((long) 'a', chronology20);
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.minuteOfHour();
        int int29 = property28.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) 1);
        long long35 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        int int37 = property32.getMaximumTextLength(locale36);
        java.util.Locale.setDefault(locale36);
        java.lang.String str39 = property28.getAsText(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 16, chronology20, locale36, (java.lang.Integer) 14, 5);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = dateTimeZone43.getName((-259200000L), locale45);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset47 = strMap0.get((java.lang.Object) dateTimeZone43);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Big5" + "'", str1, "Big5");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "x-windows-iso2022jp" + "'", str2, "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putFloat(3, (float) 16);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer4.putChar(':');
        java.nio.ByteBuffer byteBuffer8 = byteBuffer4.put((byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.Period period4 = interval3.toPeriod();
        org.joda.time.MutableInterval mutableInterval6 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean8 = mutableInterval6.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period13.get(durationFieldType14);
        org.joda.time.Period period16 = period13.toPeriod();
        mutableInterval6.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period18 = mutableInterval6.toPeriod();
        org.joda.time.Interval interval19 = interval3.gap((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval20 = interval3.toMutableInterval();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.THREE;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod30.setYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone35);
        org.joda.time.Period period37 = interval36.toPeriod();
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period37);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) seconds38);
        boolean boolean40 = seconds21.isGreaterThan(seconds38);
        org.joda.time.Interval interval41 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) seconds21);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNull(interval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval41);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.firstKey();
        java.lang.String str2 = strMap0.lastKey();
        java.util.Set<java.lang.String> strSet3 = strMap0.keySet();
        java.nio.charset.Charset charset5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset6 = strMap0.put("+1000000000-12-31T23:59:59.999999999Z", charset5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Big5" + "'", str1, "Big5");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "x-windows-iso2022jp" + "'", str2, "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI7 = new java.net.URI("19:34:11.279", "KOR", "java.nio.HeapDoubleBuffer[pos=0 lim=3 cap=3]", 999999999, "millisOfSecond", "minuteOfHour", "file:/experiment/ISO");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: 19:34:11.279://KOR@java.nio.HeapDoubleBuffer[pos=0 lim=3 cap=3]:999999999millisOfSecond?minuteOfHour#file:/experiment/ISO");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.compact();
        double double4 = byteBuffer1.getDouble(72);
        java.nio.FloatBuffer floatBuffer5 = byteBuffer1.asFloatBuffer();
        java.nio.FloatBuffer floatBuffer6 = floatBuffer5.duplicate();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer6.compact();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer9.compact();
        double double12 = byteBuffer9.getDouble(72);
        java.nio.FloatBuffer floatBuffer13 = byteBuffer9.asFloatBuffer();
        java.nio.FloatBuffer floatBuffer14 = floatBuffer13.slice();
        java.nio.FloatBuffer floatBuffer15 = floatBuffer6.put(floatBuffer13);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer18 = floatBuffer13.put(432000000, (float) 72);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(floatBuffer15);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.plusSeconds((long) 5);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.time.DayOfWeek dayOfWeek8 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange10 = chronoField9.range();
        boolean boolean11 = chronoField9.isDateBased();
        boolean boolean12 = dayOfWeek8.isSupported((java.time.temporal.TemporalField) chronoField9);
        boolean boolean13 = zonedDateTime6.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDate localDate14 = zonedDateTime6.toLocalDate();
        int int15 = localDate14.lengthOfMonth();
        java.time.chrono.IsoChronology isoChronology16 = localDate14.getChronology();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(locale17);
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar18);
        java.time.Instant instant20 = gregorianCalendar18.toInstant();
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.time.ZoneId zoneId25 = timeZone22.toZoneId();
        java.time.OffsetDateTime offsetDateTime26 = java.time.OffsetDateTime.ofInstant(instant20, zoneId25);
        java.time.OffsetDateTime offsetDateTime28 = offsetDateTime26.minusDays(1645436047L);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime28.minusYears(0L);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime28.minusDays(88473600000L);
        java.time.LocalDateTime localDateTime33 = isoChronology16.localDateTime((java.time.temporal.TemporalAccessor) offsetDateTime32);
        java.time.LocalDate localDate34 = isoChronology16.dateNow();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.IsoEra isoEra36 = isoChronology16.eraOf(10);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid era: 10");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField9.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 28 + "'", int15 == 28);
        org.junit.Assert.assertNotNull(isoChronology16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        java.lang.String str2 = localDateTime1.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone5);
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Days days9 = period7.toStandardDays();
        org.joda.time.Days days10 = days9.negated();
        org.joda.time.Days days11 = days9.negated();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T09:42:08.749" + "'", str2, "2022-02-21T09:42:08.749");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(1024);
        java.lang.String str2 = parsePosition1.toString();
        parsePosition1.setIndex(2);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) 'x');
        java.nio.IntBuffer intBuffer8 = java.nio.IntBuffer.allocate(256);
        boolean boolean9 = intBuffer8.isDirect();
        int[] intArray10 = intBuffer8.array();
        java.nio.ByteOrder byteOrder11 = intBuffer8.order();
        java.lang.String str12 = byteOrder11.toString();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer6.order(byteOrder11);
        boolean boolean14 = parsePosition1.equals((java.lang.Object) byteOrder11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=1024,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=1024,errorIndex=-1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteOrder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LITTLE_ENDIAN" + "'", str12, "LITTLE_ENDIAN");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.time.ZoneId zoneId6 = timeZone3.toZoneId();
        java.time.ZonedDateTime zonedDateTime7 = localDateTime0.atZone(zoneId6);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime9 = localDateTime8.toLocalTime();
        java.time.LocalDateTime localDateTime11 = localDateTime8.withNano(0);
        java.time.Duration duration13 = java.time.Duration.ofHours(0L);
        java.time.Duration duration15 = java.time.Duration.ofHours(0L);
        int int16 = duration13.compareTo(duration15);
        java.time.Duration duration18 = duration13.minusMinutes((long) 'a');
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList19 = duration13.getUnits();
        java.time.temporal.Temporal temporal20 = localDateTime11.plus((java.time.temporal.TemporalAmount) duration13);
        boolean boolean21 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.minuteOfHour();
        int int25 = property24.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (short) 1);
        long long31 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        int int33 = property28.getMaximumTextLength(locale32);
        java.util.Locale.setDefault(locale32);
        java.lang.String str35 = property24.getAsText(locale32);
        int int36 = property24.getMinimumValue();
        org.joda.time.DurationField durationField37 = property24.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay39 = property24.addWrapFieldToCopy(21);
        org.joda.time.TimeOfDay timeOfDay40 = property24.withMinimumValue();
        boolean boolean41 = localDateTime0.equals((java.lang.Object) timeOfDay40);
        java.time.LocalDateTime localDateTime43 = localDateTime0.plusMinutes(996L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(temporalUnitList19);
        org.junit.Assert.assertNotNull(temporal20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = yearMonthDay2.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField6 = yearMonthDay2.getField((int) (byte) 1);
        int int8 = dateTimeField6.getMinimumValue((long) 1024);
        int int10 = dateTimeField6.get(25920000009L);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 1);
        long long17 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        int int19 = property14.getMaximumTextLength(locale18);
        java.util.Locale.setDefault(locale18);
        java.time.format.DecimalStyle decimalStyle21 = java.time.format.DecimalStyle.of(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTimeField6.getAsShortText(70, locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(decimalStyle21);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException1 = new java.security.NoSuchAlgorithmException("hi!");
        java.security.SignatureException signatureException2 = new java.security.SignatureException((java.lang.Throwable) noSuchAlgorithmException1);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.joda.time.TimeOfDay.Property property4 = timeOfDay2.hourOfDay();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.halfdays();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L, chronology9);
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay2.withChronologyRetainFields(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((java.lang.Object) offsetTime0, chronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.time.OffsetTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        int int3 = property2.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 1);
        long long9 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        int int11 = property6.getMaximumTextLength(locale10);
        java.util.Locale.setDefault(locale10);
        java.lang.String str13 = property2.getAsText(locale10);
        org.joda.time.TimeOfDay timeOfDay14 = property2.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay15 = property2.getTimeOfDay();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCGlobal();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.lang.String[] strArray4 = new java.lang.String[] { "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z", "10", "Optional.empty", "2022-02-21T09:34:01.158" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        boolean boolean13 = languageRangeList11.contains((java.lang.Object) "");
        boolean boolean14 = languageRangeList11.isEmpty();
        boolean boolean16 = languageRangeList11.remove((java.lang.Object) 10L);
        boolean boolean17 = languageRangeList11.isEmpty();
        boolean boolean18 = strSet5.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11);
        java.time.LocalTime localTime23 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap27);
        boolean boolean29 = localTime23.equals((java.lang.Object) languageRangeList25);
        languageRangeList25.clear();
        boolean boolean31 = strSet5.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25);
        java.time.LocalTime localTime36 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap40);
        boolean boolean42 = localTime36.equals((java.lang.Object) languageRangeList38);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, strMap46);
        boolean boolean49 = languageRangeList47.contains((java.lang.Object) "");
        boolean boolean50 = languageRangeList47.isEmpty();
        boolean boolean52 = languageRangeList47.remove((java.lang.Object) 10L);
        boolean boolean53 = languageRangeList47.isEmpty();
        boolean boolean54 = languageRangeList38.remove((java.lang.Object) boolean53);
        boolean boolean55 = languageRangeList25.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38);
        boolean boolean56 = languageRangeList38.isEmpty();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = yearMonthDay2.toDateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plusWeeks(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.parse("4096", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod11.setYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period18);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) seconds19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((long) 'a');
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar24 = new java.util.GregorianCalendar(locale23);
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.plusMonths(10);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.minusYears(0);
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay29.toDateMidnight();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone38);
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean41 = interval35.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.monthOfYear();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.halfdays();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(0L, chronology46);
        org.joda.time.Interval interval49 = interval39.withChronology(chronology46);
        mutablePeriod11.setPeriod((org.joda.time.ReadableDuration) duration22, chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(35, 839000000, 365, chronology46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(interval49);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.util.GregorianCalendar gregorianCalendar6 = new java.util.GregorianCalendar(85800, 0, 0, 16384, 21, (-2147483648));
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar6.clear((-999948));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -999948");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-1L));
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime5 = localTime3.plusMillis(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localTime5.get(dateTimeFieldType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.lang.String[] strArray4 = new java.lang.String[] { "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z", "10", "Optional.empty", "2022-02-21T09:34:01.158" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        boolean boolean13 = languageRangeList11.contains((java.lang.Object) "");
        boolean boolean14 = languageRangeList11.isEmpty();
        boolean boolean16 = languageRangeList11.remove((java.lang.Object) 10L);
        boolean boolean17 = languageRangeList11.isEmpty();
        boolean boolean18 = strSet5.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList11.listIterator();
        boolean boolean20 = languageRangeItor19.hasPrevious();
        int int21 = languageRangeItor19.previousIndex();
        boolean boolean22 = languageRangeItor19.hasNext();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.util.Locale locale3 = new java.util.Locale("2022-02-21T09:34:33.837Z", "P20Y-1M", "4096");
        java.lang.String str4 = locale3.getVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-21t09:34:33.837z_P20Y-1M_4096");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4096" + "'", str4, "4096");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime10 = localDateTime4.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange13 = chronoField12.range();
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField12.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField12.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime10.plus((long) 4096, temporalUnit15);
        java.time.LocalDate localDate17 = localDateTime10.toLocalDate();
        java.time.LocalDateTime localDateTime19 = localDateTime10.plusNanos(996L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField12.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.nio.file.Path path5 = file2.toPath();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter(file2);
        boolean boolean7 = printWriter6.checkError();
        java.io.File file10 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file12 = new java.io.File(file10, "2022-02-21T09:33:57.064");
        java.nio.file.Path path13 = file10.toPath();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter(file10);
        printWriter14.print((double) 35);
        char[] charArray20 = new char[] { ':', 'a', '#' };
        printWriter14.print(charArray20);
        printWriter6.write(charArray20);
        java.nio.CharBuffer charBuffer24 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer25 = charBuffer24.clear();
        java.nio.CharBuffer charBuffer26 = charBuffer24.duplicate();
        java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Optional.empty");
        java.nio.Buffer buffer29 = charBuffer28.clear();
        int int30 = charBuffer26.compareTo(charBuffer28);
        java.lang.String str31 = charBuffer26.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer34 = printWriter6.append((java.lang.CharSequence) str31, 10, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 21");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file12.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file12.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), ":a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), ":a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[:, a, #]");
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(buffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Optional.empty" + "'", str31, "Optional.empty");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        longSummaryStatistics0.accept((long) 19);
        java.lang.String str3 = longSummaryStatistics0.toString();
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=1, sum=19, min=19, average=19.000000, max=19}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LongSummaryStatistics{count=1, sum=19, min=19, average=19.000000, max=19}" + "'", str3, "LongSummaryStatistics{count=1, sum=19, min=19, average=19.000000, max=19}");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.io.File file4 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file6 = new java.io.File(file4, "2022-02-21T09:33:57.064");
        java.io.File file8 = new java.io.File(file4, "P20Y-1M");
        file8.deleteOnExit();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = java.io.File.createTempFile("OptionalDouble[-1.0]", "", file8);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file8.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file8.toString(), "2022-02-21T09:33:57.064/P20Y-1M");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.addWrapFieldToCopy(2);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.LocalTime localTime7 = localTime4.plusMillis(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str9 = dateTimeFieldType8.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime4.withField(dateTimeFieldType8, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "weekyearOfCentury" + "'", str9, "weekyearOfCentury");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.util.Date date2 = java.util.Date.from(instant1);
        boolean boolean4 = instant1.equals((java.lang.Object) 22);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime6 = localDateTime5.toLocalTime();
        java.time.LocalDateTime localDateTime8 = localDateTime5.withNano(0);
        java.time.LocalDate localDate9 = localDateTime8.toLocalDate();
        java.time.Month month10 = localDate9.getMonth();
        java.time.DayOfWeek dayOfWeek11 = localDate9.getDayOfWeek();
        boolean boolean12 = localDate9.isLeapYear();
        int int13 = localDate9.lengthOfYear();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar15 = new java.util.GregorianCalendar(locale14);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar15);
        java.time.Instant instant17 = gregorianCalendar15.toInstant();
        java.time.ZonedDateTime zonedDateTime18 = gregorianCalendar15.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime18.withEarlierOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.YEAR;
        java.lang.String str21 = chronoField20.toString();
        java.time.temporal.ValueRange valueRange22 = zonedDateTime19.range((java.time.temporal.TemporalField) chronoField20);
        java.time.chrono.Chronology chronology23 = zonedDateTime19.getChronology();
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange25 = chronoField24.range();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime27 = zonedDateTime19.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 0);
        java.time.temporal.ValueRange valueRange28 = localDate9.range((java.time.temporal.TemporalField) chronoField24);
        boolean boolean29 = instant1.isSupported((java.time.temporal.TemporalField) chronoField24);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 09:42:09 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + month10 + "' != '" + java.time.Month.FEBRUARY + "'", month10.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + dayOfWeek11 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek11.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField20.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Year" + "'", str21, "Year");
        org.junit.Assert.assertNotNull(valueRange22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange25);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime27);
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = yearMonthDay2.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField6 = yearMonthDay2.getField((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay2.monthOfYear();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long10 = duration9.getStandardDays();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long13 = duration12.getStandardDays();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundFloorCopy();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24, periodType25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod36.setYears((int) '#');
        mutablePeriod27.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.monthOfYear();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.days();
        mutablePeriod36.setPeriod((long) 3, (long) 9, chronology45);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(chronology45);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = property7.compareTo((org.joda.time.ReadablePartial) localTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.util.GregorianCalendar gregorianCalendar6 = new java.util.GregorianCalendar(366, 12, 37930, 47, 46, (int) (byte) 0);
        boolean boolean7 = gregorianCalendar6.isLenient();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime3 = localDateTime0.withNano(0);
        java.time.LocalDate localDate4 = localDateTime3.toLocalDate();
        java.time.LocalDateTime localDateTime6 = localDateTime3.plusDays((long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfMonth(839000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 839000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int4 = timeZone2.getRawOffset();
        java.util.Calendar.Builder builder5 = builder0.setTimeZone(timeZone2);
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Calendar.Builder builder7 = builder0.setLocale(locale6);
        java.util.Calendar.Builder builder11 = builder0.setWeekDate(14, 901, 64);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        int int3 = property2.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 1);
        long long9 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        int int11 = property6.getMaximumTextLength(locale10);
        java.util.Locale.setDefault(locale10);
        java.lang.String str13 = property2.getAsText(locale10);
        org.joda.time.TimeOfDay timeOfDay14 = property2.getTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = timeOfDay14.toDateTimeToday(dateTimeZone15);
        org.joda.time.Hours hours17 = org.joda.time.Hours.FIVE;
        org.joda.time.DurationFieldType durationFieldType18 = hours17.getFieldType();
        org.joda.time.DurationFieldType durationFieldType19 = hours17.getFieldType();
        org.joda.time.DateTime dateTime21 = dateTime16.withFieldAdded(durationFieldType19, 7000000);
        org.joda.time.DateMidnight dateMidnight22 = dateTime16.toDateMidnight();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.lang.String[] strArray4 = new java.lang.String[] { "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z", "10", "Optional.empty", "2022-02-21T09:34:01.158" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        boolean boolean13 = languageRangeList11.contains((java.lang.Object) "");
        boolean boolean14 = languageRangeList11.isEmpty();
        boolean boolean16 = languageRangeList11.remove((java.lang.Object) 10L);
        boolean boolean17 = languageRangeList11.isEmpty();
        boolean boolean18 = strSet5.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList11.listIterator();
        java.lang.String[] strArray32 = new java.lang.String[] { "Optional.empty", "1", "P35Y100MT32H97M97.001S", "23:50:00.000000097", "-999999999 - 999999999", "-999999999 - 999999999", "P35Y12D", "-999999999 - 999999999", "", "Optional.empty", "10", "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.time.LocalTime localTime39 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strMap43);
        boolean boolean45 = localTime39.equals((java.lang.Object) languageRangeList41);
        boolean boolean46 = strSet33.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41);
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strSet33, filteringMode47);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator49 = languageRangeList11.spliterator();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode47.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(languageRangeSpliterator49);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology4 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.years();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 64, chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.era();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setWeekyear(0);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) 21);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 256);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 1);
        int int9 = dateMidnight8.getDayOfMonth();
        int int10 = dateMidnight8.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.monthOfYear();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.halfdays();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(0L, chronology18);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay13.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType11.getField(chronology18);
        int int23 = dateMidnight8.get(dateTimeFieldType11);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone29);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime41 = property40.roundFloorCopy();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        int int43 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone29);
        mutableDateTime24.setZoneRetainFields(dateTimeZone29);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) mutableDateTime24, periodType47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period50 = period48.withYears(439000000);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(periodType47);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(96);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableInstant10);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period11);
        mutableDateTime6.setTime((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.monthOfYear();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (short) 1);
        long long22 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        int int24 = property19.getMaximumTextLength(locale23);
        org.joda.time.DateMidnight dateMidnight25 = property19.roundHalfCeilingCopy();
        org.joda.time.Duration duration27 = org.joda.time.Duration.millis((long) 'a');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime30 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0L);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = property31.compareTo((org.joda.time.ReadablePartial) timeOfDay33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        java.lang.String str2 = fieldPosition1.toString();
        fieldPosition1.setBeginIndex(97);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((int) (byte) 1, 101, 13, 940000000, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 940000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod9.setYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period16);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) seconds17);
        boolean boolean19 = seconds0.isGreaterThan(seconds17);
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.THREE;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod29.setYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period36);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) seconds37);
        boolean boolean39 = seconds20.isGreaterThan(seconds37);
        boolean boolean40 = seconds0.isLessThan(seconds20);
        org.joda.time.Duration duration41 = seconds0.toStandardDuration();
        org.joda.time.Seconds seconds43 = seconds0.dividedBy((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) seconds43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Seconds");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(seconds43);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime2 = java.time.LocalTime.of(11, 445000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 445000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "DateTimeField[weekOfWeekyear]", (int) 'u', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(10);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(0);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay6.toDateMidnight();
        int int8 = yearMonthDay6.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonthDay6.toString(dateTimeFormatter9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = yearMonthDay6.getFieldType(96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 96");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21" + "'", str10, "2022-02-21");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        boolean boolean9 = languageRangeList7.contains((java.lang.Object) "");
        boolean boolean10 = languageRangeList7.isEmpty();
        boolean boolean12 = languageRangeList7.remove((java.lang.Object) 10L);
        boolean boolean13 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7);
        languageRangeList7.clear();
        java.util.Locale.LanguageRange languageRange15 = null;
        boolean boolean16 = languageRangeList7.add(languageRange15);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(locale17);
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusMonths(10);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears(0);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) yearMonthDay19, dateTimeZone28);
        boolean boolean31 = languageRangeList7.contains((java.lang.Object) yearMonthDay19);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale32.getDisplayScript();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap38);
        boolean boolean41 = languageRangeList39.contains((java.lang.Object) "");
        boolean boolean42 = languageRangeList39.isEmpty();
        boolean boolean44 = languageRangeList39.remove((java.lang.Object) 10L);
        boolean boolean45 = strSet34.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strSet34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 'a', 100L);
        java.util.OptionalLong optionalLong3 = longStream2.max();
        long long4 = optionalLong3.getAsLong();
        java.util.function.LongSupplier longSupplier5 = null;
        long long6 = optionalLong3.orElseGet(longSupplier5);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone7);
        org.joda.time.Period period9 = interval8.toPeriod();
        boolean boolean10 = interval4.isBefore((org.joda.time.ReadableInterval) interval8);
        boolean boolean11 = interval4.isBeforeNow();
        org.joda.time.Duration duration12 = interval4.toDuration();
        org.joda.time.Duration duration14 = duration12.minus((long) 21);
        org.joda.time.Instant instant15 = instant0.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.MutableInterval mutableInterval19 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        boolean boolean21 = mutableInterval19.contains((long) 3);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.DurationFieldType durationFieldType27 = null;
        int int28 = period26.get(durationFieldType27);
        org.joda.time.Period period29 = period26.toPeriod();
        mutableInterval19.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period32 = period26.plusMinutes((int) (byte) 100);
        int int33 = period26.size();
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) period26);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.OffsetTime offsetTime2 = offsetTime0.plusHours((long) 20);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar4 = new java.util.GregorianCalendar(locale3);
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar4);
        java.time.Instant instant6 = gregorianCalendar4.toInstant();
        java.time.ZonedDateTime zonedDateTime7 = gregorianCalendar4.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime8 = zonedDateTime7.withEarlierOffsetAtOverlap();
        java.time.format.DateTimeFormatter dateTimeFormatter9 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format10 = dateTimeFormatter9.toFormat();
        java.time.format.ResolverStyle resolverStyle11 = dateTimeFormatter9.getResolverStyle();
        java.time.ZoneId zoneId12 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withZone(zoneId12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        boolean boolean16 = localDateTime14.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.time.ZoneId zoneId20 = timeZone17.toZoneId();
        java.time.ZonedDateTime zonedDateTime21 = localDateTime14.atZone(zoneId20);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now(zoneId20);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter9.withZone(zoneId20);
        java.lang.String str24 = zonedDateTime8.format(dateTimeFormatter9);
        java.time.ZoneOffset zoneOffset25 = zonedDateTime8.getOffset();
        java.time.OffsetTime offsetTime26 = offsetTime0.withOffsetSameInstant(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(zonedDateTime7);
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(format10);
        org.junit.Assert.assertTrue("'" + resolverStyle11 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle11.equals(java.time.format.ResolverStyle.STRICT));
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21T09:42:10.202" + "'", str24, "2022-02-21T09:42:10.202");
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetTime26);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField0.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.io.File file6 = new java.io.File(file4, "T00:00:00.032");
        java.io.File file7 = file4.getAbsoluteFile();
        boolean boolean8 = file4.canRead();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.getParent(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file6.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064/T00:00:00.032");
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file7.toString(), "/experiment/2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        java.time.Instant instant6 = zonedDateTime5.toInstant();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar8 = new java.util.GregorianCalendar(locale7);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        java.time.Instant instant10 = gregorianCalendar8.toInstant();
        java.time.ZonedDateTime zonedDateTime11 = gregorianCalendar8.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.Instant instant13 = zonedDateTime12.toInstant();
        int int14 = zonedDateTime12.getMonthValue();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime12.withLaterOffsetAtOverlap();
        java.time.Clock clock16 = java.time.Clock.systemUTC();
        java.time.Instant instant17 = clock16.instant();
        java.util.Date date18 = java.util.Date.from(instant17);
        java.time.Clock clock19 = java.time.Clock.systemUTC();
        java.time.Instant instant20 = clock19.instant();
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofInstant(instant20, (java.time.ZoneId) zoneOffset22);
        java.time.OffsetDateTime offsetDateTime24 = java.time.OffsetDateTime.ofInstant(instant17, (java.time.ZoneId) zoneOffset22);
        java.time.LocalTime localTime25 = offsetDateTime24.toLocalTime();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar27 = new java.util.GregorianCalendar(locale26);
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar27);
        java.time.Instant instant29 = gregorianCalendar27.toInstant();
        java.time.ZonedDateTime zonedDateTime30 = gregorianCalendar27.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime30.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.now();
        boolean boolean34 = localDateTime32.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime36 = localDateTime32.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.now();
        boolean boolean39 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean40 = localDateTime36.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDateTime localDateTime42 = localDateTime36.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.now();
        boolean boolean45 = localDateTime43.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.LocalDateTime localDateTime47 = localDateTime43.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.now();
        boolean boolean50 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        boolean boolean51 = localDateTime47.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        boolean boolean52 = localDateTime42.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange54 = chronoField53.range();
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField53.getRangeUnit();
        boolean boolean56 = localDateTime49.isSupported(temporalUnit55);
        boolean boolean57 = zonedDateTime31.isSupported(temporalUnit55);
        boolean boolean58 = offsetDateTime24.isSupported(temporalUnit55);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = instant6.until((java.time.temporal.Temporal) zonedDateTime12, temporalUnit55);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Forever");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(clock16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Feb 21 09:42:10 UTC 2022");
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField53.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange54);
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition1 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        boolean boolean4 = localDateTime2.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime3);
        java.time.LocalDateTime localDateTime6 = localDateTime2.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.now();
        boolean boolean9 = localDateTime7.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime8);
        boolean boolean10 = localDateTime6.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime8);
        java.time.LocalDateTime localDateTime12 = localDateTime6.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.now();
        boolean boolean15 = localDateTime13.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.LocalDateTime localDateTime17 = localDateTime13.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now();
        boolean boolean20 = localDateTime18.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        boolean boolean21 = localDateTime17.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        boolean boolean22 = localDateTime12.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange24 = chronoField23.range();
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField23.getRangeUnit();
        boolean boolean26 = localDateTime19.isSupported(temporalUnit25);
        java.time.Clock clock27 = java.time.Clock.systemUTC();
        java.time.Instant instant28 = clock27.instant();
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset30);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime34 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset33);
        java.time.LocalDateTime localDateTime35 = timeDefinition1.createDateTime(localDateTime19, zoneOffset30, zoneOffset33);
        java.time.OffsetTime offsetTime36 = java.time.OffsetTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset30);
        java.time.Clock clock37 = java.time.Clock.systemUTC();
        java.time.Instant instant38 = clock37.instant();
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofInstant(instant38, (java.time.ZoneId) zoneOffset40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.time.ZoneId zoneId45 = timeZone42.toZoneId();
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.ofInstant(instant38, zoneId45);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime47 = offsetTime36.with((java.time.temporal.TemporalAdjuster) instant38);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertTrue("'" + timeDefinition1 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC + "'", timeDefinition1.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField23.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange24);
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        org.junit.Assert.assertNotNull(offsetDateTime0);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        double[] doubleArray3 = new double[] { 97, 10, '#' };
        java.nio.DoubleBuffer doubleBuffer4 = java.nio.DoubleBuffer.wrap(doubleArray3);
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        java.time.format.DecimalStyle decimalStyle6 = java.time.format.DecimalStyle.STANDARD;
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withZeroDigit('a');
        java.io.File file11 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file13 = new java.io.File(file11, "2022-02-21T09:33:57.064");
        java.io.File file15 = new java.io.File(file13, "T00:00:00.032");
        boolean boolean16 = decimalStyle8.equals((java.lang.Object) file15);
        boolean boolean17 = file15.mkdirs();
        boolean boolean18 = doubleBuffer4.equals((java.lang.Object) boolean17);
        java.nio.DoubleBuffer doubleBuffer20 = doubleBuffer4.put((double) 32769);
        double double22 = doubleBuffer20.get(0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[32769.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file13.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file13.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file15.getParent(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file15.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064/T00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleBuffer20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 32769.0d + "'", double22 == 32769.0d);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay9 = dateTime6.toTimeOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property10.setCopy("1970-01-01T00:00:00.004096Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.004096Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.joda.time.ReadableInstant readableInstant0 = null;
        java.lang.Object obj2 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.monthOfYear();
        org.joda.time.Chronology chronology6 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj2, chronology6);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 2, chronology6);
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod9);
        long long11 = interval10.toDurationMillis();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.io.File file2 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file4 = new java.io.File(file2, "2022-02-21T09:33:57.064");
        java.nio.file.Path path5 = file2.toPath();
        java.io.File file8 = new java.io.File("2022-02-21T09:33:57.064", "");
        java.io.File file10 = new java.io.File(file8, "2022-02-21T09:33:57.064");
        java.nio.file.Path path11 = file8.toPath();
        int int12 = path5.compareTo(path11);
        java.nio.file.Path path13 = path5.getFileName();
        java.nio.file.Path path14 = path5.normalize();
        java.io.File file15 = path5.toFile();
        boolean boolean16 = file15.canRead();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file4.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file10.getParent(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertEquals(file10.toString(), "2022-02-21T09:33:57.064/2022-02-21T09:33:57.064");
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "2022-02-21T09:33:57.064");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(10);
        org.joda.time.Interval interval5 = yearMonthDay2.toInterval();
        int int6 = yearMonthDay2.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.io.File file1 = new java.io.File("Mon");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "Mon");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod8.setYears((int) '#');
        mutablePeriod8.addSeconds(1);
        mutablePeriod8.addSeconds(100);
        mutablePeriod8.addWeeks((int) ':');
        int int17 = mutablePeriod8.getDays();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsText(locale10);
        org.joda.time.DateTime dateTime12 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(901);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(2022);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.compact();
        double double4 = byteBuffer1.getDouble(72);
        java.nio.FloatBuffer floatBuffer5 = byteBuffer1.asFloatBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = floatBuffer5.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer5);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ZERO;
        org.junit.Assert.assertNotNull(hours0);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.of(171, 256000000, 256, (int) (byte) -1, 403, 43, 442000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 256000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        int int2 = dateMidnight1.getDayOfMonth();
        int int3 = dateMidnight1.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.halfdays();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0L, chronology11);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay6.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType4.getField(chronology11);
        int int16 = dateMidnight1.get(dateTimeFieldType4);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight1.withMonthOfYear(2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.LocalTime localTime1 = java.time.LocalTime.MIN;
        int int2 = localTime0.compareTo(localTime1);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar4 = new java.util.GregorianCalendar(locale3);
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar4);
        java.time.Instant instant6 = gregorianCalendar4.toInstant();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(locale8);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar9);
        java.time.Instant instant11 = gregorianCalendar9.toInstant();
        java.time.ZonedDateTime zonedDateTime12 = gregorianCalendar9.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.plusSeconds((long) 5);
        java.time.LocalTime localTime15 = zonedDateTime14.toLocalTime();
        java.time.DayOfWeek dayOfWeek16 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange18 = chronoField17.range();
        boolean boolean19 = chronoField17.isDateBased();
        boolean boolean20 = dayOfWeek16.isSupported((java.time.temporal.TemporalField) chronoField17);
        boolean boolean21 = zonedDateTime14.isSupported((java.time.temporal.TemporalField) chronoField17);
        java.time.LocalTime localTime26 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap30);
        boolean boolean32 = localTime26.equals((java.lang.Object) languageRangeList28);
        boolean boolean33 = chronoField17.isSupportedBy((java.time.temporal.TemporalAccessor) localTime26);
        boolean boolean34 = chronoField17.isTimeBased();
        long long35 = localDateTime7.getLong((java.time.temporal.TemporalField) chronoField17);
        boolean boolean36 = instant6.isSupported((java.time.temporal.TemporalField) chronoField17);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localTime0.get((java.time.temporal.TemporalField) chronoField17);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + dayOfWeek16 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek16.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2022L + "'", long35 == 2022L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.joda.time.ReadableInstant readableInstant0 = null;
        java.lang.Object obj2 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.monthOfYear();
        org.joda.time.Chronology chronology6 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj2, chronology6);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 2, chronology6);
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone21);
        boolean boolean23 = interval22.containsNow();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.monthOfYear();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (short) 1);
        long long29 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.withField(dateTimeFieldType30, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight28.withZoneRetainFields(dateTimeZone33);
        boolean boolean35 = interval22.isBefore((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        int int47 = dateMidnight34.compareTo((org.joda.time.ReadableInstant) dateTime44);
        long long48 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime50 = property18.addToCopy((long) 20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval51 = interval10.withEnd((org.joda.time.ReadableInstant) dateTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-31L) + "'", long48 == (-31L));
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException1 = new java.security.NoSuchAlgorithmException("java.net.MalformedURLException");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone5);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundFloorCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        int int19 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone5);
        mutableDateTime0.setZoneRetainFields(dateTimeZone5);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfYear(692000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 692000000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusDays(97);
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight1.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 1);
        long long7 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.Period period11 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight10);
        int int12 = dateMidnight10.getYearOfCentury();
        org.joda.time.DateMidnight.Property property13 = dateMidnight10.weekOfWeekyear();
        boolean boolean15 = dateMidnight10.isBefore((long) (byte) -1);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int3 = timeZone1.getRawOffset();
        int int4 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone5);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundFloorCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        int int19 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(3000L, dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone5);
        java.lang.String str23 = mutableDateTime22.toString();
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-21T09:42:10.696Z" + "'", str23, "2022-02-21T09:42:10.696Z");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(96);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableInstant10);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period11);
        mutableDateTime6.setTime((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.monthOfYear();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (short) 1);
        long long22 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        int int24 = property19.getMaximumTextLength(locale23);
        org.joda.time.DateMidnight dateMidnight25 = property19.roundHalfCeilingCopy();
        org.joda.time.Duration duration27 = org.joda.time.Duration.millis((long) 'a');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime30 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight.Property property31 = dateMidnight25.weekyear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.time.Month month1 = java.time.Month.FEBRUARY;
        java.time.LocalDate localDate3 = java.time.LocalDate.of(505000000, month1, 13);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.lang.String str5 = chronoField4.toString();
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap6 = null;
        java.time.LocalTime localTime7 = java.time.LocalTime.MAX;
        java.time.LocalTime localTime9 = localTime7.withMinute((int) (byte) 1);
        java.time.format.DateTimeFormatter dateTimeFormatter10 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format11 = dateTimeFormatter10.toFormat();
        java.time.format.ResolverStyle resolverStyle12 = dateTimeFormatter10.getResolverStyle();
        java.time.temporal.TemporalAccessor temporalAccessor13 = chronoField4.resolve(temporalFieldMap6, (java.time.temporal.TemporalAccessor) localTime9, resolverStyle12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate15 = localDate3.with((java.time.temporal.TemporalField) chronoField4, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for NanoOfDay (valid values 0 - 86399999999999): -1");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.FEBRUARY + "'", month1.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField4.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NanoOfDay" + "'", str5, "NanoOfDay");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(format11);
        org.junit.Assert.assertTrue("'" + resolverStyle12 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle12.equals(java.time.format.ResolverStyle.STRICT));
        org.junit.Assert.assertNull(temporalAccessor13);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        java.time.Instant instant6 = zonedDateTime5.toInstant();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDate localDate9 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, dateTimeZone14);
        boolean boolean16 = zoneOffset8.equals((java.lang.Object) 100L);
        java.time.OffsetTime offsetTime17 = java.time.OffsetTime.ofInstant(instant6, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant21 = instant6.minus((long) 37930000, temporalUnit20);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Forever");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField19.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.FOREVER));
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.time.Instant instant3 = instant1.minusMillis((-1L));
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Instant instant5 = clock4.instant();
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset7);
        boolean boolean9 = instant3.isAfter(instant5);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime11 = localDateTime10.toLocalTime();
        java.time.LocalDateTime localDateTime13 = localDateTime10.withNano(0);
        java.time.Duration duration15 = java.time.Duration.ofHours(0L);
        java.time.Duration duration17 = java.time.Duration.ofHours(0L);
        int int18 = duration15.compareTo(duration17);
        java.time.Duration duration20 = duration15.minusMinutes((long) 'a');
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList21 = duration15.getUnits();
        java.time.temporal.Temporal temporal22 = localDateTime13.plus((java.time.temporal.TemporalAmount) duration15);
        java.time.LocalDate localDate23 = localDateTime13.toLocalDate();
        java.time.LocalDate localDate25 = localDate23.withDayOfMonth((int) (short) 10);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.now();
        boolean boolean28 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime30 = localDateTime26.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        boolean boolean33 = localDateTime31.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        boolean boolean34 = localDateTime30.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.LocalDateTime localDateTime36 = localDateTime30.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.now();
        boolean boolean39 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDateTime localDateTime41 = localDateTime37.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.now();
        boolean boolean44 = localDateTime42.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        boolean boolean45 = localDateTime41.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        boolean boolean46 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange48 = chronoField47.range();
        java.time.temporal.TemporalUnit temporalUnit49 = chronoField47.getRangeUnit();
        boolean boolean50 = localDateTime43.isSupported(temporalUnit49);
        boolean boolean51 = temporalUnit49.isDurationEstimated();
        boolean boolean52 = temporalUnit49.isDurationEstimated();
        // The following exception was thrown during execution in test generation
        try {
            long long53 = instant3.until((java.time.temporal.Temporal) localDate23, temporalUnit49);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain Instant from TemporalAccessor: 2022-02-21 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(temporalUnitList21);
        org.junit.Assert.assertNotNull(temporal22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField47.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + temporalUnit49 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit49.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.time.LocalTime localTime4 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean10 = localTime4.equals((java.lang.Object) languageRangeList6);
        java.time.LocalTime localTime12 = localTime4.minusMinutes((long) (short) 10);
        int int13 = localTime12.toSecondOfDay();
        int int14 = localTime12.getMinute();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now();
        boolean boolean17 = localDateTime15.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.LocalDateTime localDateTime19 = localDateTime15.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.now();
        boolean boolean22 = localDateTime20.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        boolean boolean23 = localDateTime19.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime25 = localDateTime19.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange28 = chronoField27.range();
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField27.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit30 = chronoField27.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime25.plus((long) 4096, temporalUnit30);
        java.time.LocalDate localDate32 = localDateTime25.toLocalDate();
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar34 = new java.util.GregorianCalendar(locale33);
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar34);
        java.time.Instant instant36 = gregorianCalendar34.toInstant();
        java.time.ZonedDateTime zonedDateTime37 = gregorianCalendar34.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime39 = zonedDateTime37.plusSeconds((long) 5);
        java.time.LocalTime localTime40 = zonedDateTime39.toLocalTime();
        java.time.DayOfWeek dayOfWeek41 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange43 = chronoField42.range();
        boolean boolean44 = chronoField42.isDateBased();
        boolean boolean45 = dayOfWeek41.isSupported((java.time.temporal.TemporalField) chronoField42);
        boolean boolean46 = zonedDateTime39.isSupported((java.time.temporal.TemporalField) chronoField42);
        java.time.LocalTime localTime51 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, strMap55);
        boolean boolean57 = localTime51.equals((java.lang.Object) languageRangeList53);
        boolean boolean58 = chronoField42.isSupportedBy((java.time.temporal.TemporalAccessor) localTime51);
        boolean boolean59 = localDate32.isSupported((java.time.temporal.TemporalField) chronoField42);
        java.lang.String str60 = localDate32.toString();
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange62 = chronoField61.range();
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField61.getRangeUnit();
        boolean boolean64 = localDate32.isSupported(temporalUnit63);
        java.time.LocalDateTime localDateTime65 = localTime12.atDate(localDate32);
        int int66 = localDateTime65.getHour();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85800 + "'", int13 == 85800);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField27.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit30 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit30.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + dayOfWeek41 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek41.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-21" + "'", str60, "2022-02-21");
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField61.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange62);
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.plusSeconds((long) 5);
        java.time.Period period8 = java.time.Period.ofMonths((int) (byte) -1);
        java.time.temporal.Temporal temporal9 = zonedDateTime6.minus((java.time.temporal.TemporalAmount) period8);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar11 = new java.util.GregorianCalendar(locale10);
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar11);
        java.time.Instant instant13 = gregorianCalendar11.toInstant();
        java.time.ZonedDateTime zonedDateTime14 = gregorianCalendar11.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime14.plusSeconds((long) 5);
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.CE;
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange19 = chronoField18.range();
        boolean boolean20 = isoEra17.isSupported((java.time.temporal.TemporalField) chronoField18);
        int int21 = zonedDateTime14.get((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = zonedDateTime6.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime14);
        java.time.DayOfWeek dayOfWeek23 = zonedDateTime6.getDayOfWeek();
        java.time.Instant instant24 = zonedDateTime6.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(temporal9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra17.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField18.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant3, readableInstant4);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period5);
        mutableDateTime0.setTime((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(8553600000L);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.hourOfDay();
        mutableDateTime11.setSecondOfDay((int) '\uffff');
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime5 = zonedDateTime4.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        boolean boolean8 = localDateTime6.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime10 = localDateTime6.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        boolean boolean13 = localDateTime11.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        boolean boolean14 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime16 = localDateTime10.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        boolean boolean19 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime21 = localDateTime17.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.now();
        boolean boolean24 = localDateTime22.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean25 = localDateTime21.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean26 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange28 = chronoField27.range();
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField27.getRangeUnit();
        boolean boolean30 = localDateTime23.isSupported(temporalUnit29);
        boolean boolean31 = zonedDateTime5.isSupported(temporalUnit29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime5.minusMonths(0L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField27.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zonedDateTime33);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) (-2147483648), (long) 36000);
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition3 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        boolean boolean6 = localDateTime4.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime8 = localDateTime4.plusSeconds((long) '4');
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        int int11 = zoneOffset10.getTotalSeconds();
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        int int16 = timeZone14.getRawOffset();
        java.util.Calendar.Builder builder17 = builder12.setTimeZone(timeZone14);
        java.time.Clock clock18 = java.time.Clock.systemUTC();
        java.time.Instant instant19 = clock18.instant();
        java.util.Date date20 = java.util.Date.from(instant19);
        date20.setHours((int) (short) 10);
        java.util.Calendar.Builder builder23 = builder17.setInstant(date20);
        boolean boolean24 = zoneOffset10.equals((java.lang.Object) builder23);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.now();
        boolean boolean27 = localDateTime25.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime29 = localDateTime25.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.now();
        boolean boolean32 = localDateTime30.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        boolean boolean33 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime35 = localDateTime29.minusNanos((long) 2022);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        boolean boolean38 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime40 = localDateTime36.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.now();
        boolean boolean43 = localDateTime41.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        boolean boolean44 = localDateTime40.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        boolean boolean45 = localDateTime35.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.ofStrict(localDateTime35, zoneOffset47, (java.time.ZoneId) zoneOffset49);
        java.time.OffsetTime offsetTime51 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset49);
        java.time.LocalDateTime localDateTime52 = timeDefinition3.createDateTime(localDateTime8, zoneOffset10, zoneOffset49);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.now();
        boolean boolean55 = localDateTime53.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.LocalDateTime localDateTime57 = localDateTime53.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.now();
        boolean boolean60 = localDateTime58.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        boolean boolean61 = localDateTime57.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        java.time.LocalDateTime localDateTime63 = localDateTime57.minusNanos((long) 2022);
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange66 = chronoField65.range();
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField65.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit68 = chronoField65.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime69 = localDateTime63.plus((long) 4096, temporalUnit68);
        java.time.LocalDate localDate70 = localDateTime63.toLocalDate();
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar72 = new java.util.GregorianCalendar(locale71);
        org.joda.time.YearMonthDay yearMonthDay73 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar72);
        java.time.Instant instant74 = gregorianCalendar72.toInstant();
        java.time.ZonedDateTime zonedDateTime75 = gregorianCalendar72.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime77 = zonedDateTime75.plusSeconds((long) 5);
        java.time.LocalTime localTime78 = zonedDateTime77.toLocalTime();
        java.time.DayOfWeek dayOfWeek79 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange81 = chronoField80.range();
        boolean boolean82 = chronoField80.isDateBased();
        boolean boolean83 = dayOfWeek79.isSupported((java.time.temporal.TemporalField) chronoField80);
        boolean boolean84 = zonedDateTime77.isSupported((java.time.temporal.TemporalField) chronoField80);
        java.time.LocalTime localTime89 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.util.Locale.LanguageRange[] languageRangeArray90 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList91 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList91, languageRangeArray90);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap93 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList94 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList91, strMap93);
        boolean boolean95 = localTime89.equals((java.lang.Object) languageRangeList91);
        boolean boolean96 = chronoField80.isSupportedBy((java.time.temporal.TemporalAccessor) localTime89);
        boolean boolean97 = localDate70.isSupported((java.time.temporal.TemporalField) chronoField80);
        boolean boolean98 = zoneOffset10.isSupported((java.time.temporal.TemporalField) chronoField80);
        java.time.OffsetDateTime offsetDateTime99 = java.time.OffsetDateTime.ofInstant(instant2, (java.time.ZoneId) zoneOffset10);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + timeDefinition3 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD + "'", timeDefinition3.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000 + "'", int11 == 36000);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 21 10:42:10 UTC 2022");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(offsetTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField65.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + temporalUnit68 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit68.equals(java.time.temporal.ChronoUnit.YEARS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + dayOfWeek79 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek79.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField80.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(languageRangeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(languageRangeList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long2 = duration1.getStandardDays();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long5 = duration4.getStandardDays();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((int) (short) 1, 10, (int) (short) 10, (int) (byte) 10, (int) ' ', (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (short) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod28.setYears((int) '#');
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        int int32 = mutablePeriod28.getDays();
        mutablePeriod28.setYears(12);
        mutablePeriod28.addHours(256000000);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 'a', 100L);
        java.util.function.LongPredicate longPredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = longStream2.filter(longPredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        boolean boolean8 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        boolean boolean11 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime13 = localDateTime9.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        boolean boolean16 = localDateTime14.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        boolean boolean17 = localDateTime13.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        int int18 = localDateTime13.getNano();
        java.time.LocalDateTime localDateTime20 = localDateTime13.withSecond(6);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar22 = new java.util.GregorianCalendar(locale21);
        org.joda.time.YearMonthDay yearMonthDay23 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar22);
        java.time.Instant instant24 = gregorianCalendar22.toInstant();
        java.time.ZonedDateTime zonedDateTime25 = gregorianCalendar22.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime25.plusSeconds((long) 5);
        java.time.LocalTime localTime28 = zonedDateTime27.toLocalTime();
        java.time.DayOfWeek dayOfWeek29 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange31 = chronoField30.range();
        boolean boolean32 = chronoField30.isDateBased();
        boolean boolean33 = dayOfWeek29.isSupported((java.time.temporal.TemporalField) chronoField30);
        boolean boolean34 = zonedDateTime27.isSupported((java.time.temporal.TemporalField) chronoField30);
        java.time.LocalDate localDate35 = zonedDateTime27.toLocalDate();
        int int36 = localDate35.lengthOfMonth();
        java.time.LocalTime localTime41 = java.time.LocalTime.of(0, 0, 0, (int) 'a');
        java.time.LocalDateTime localDateTime42 = localDate35.atTime(localTime41);
        int int43 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.CE;
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange46 = chronoField45.range();
        boolean boolean47 = isoEra44.isSupported((java.time.temporal.TemporalField) chronoField45);
        java.time.temporal.ValueRange valueRange48 = localDateTime42.range((java.time.temporal.TemporalField) chronoField45);
        boolean boolean49 = localDateTime6.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 188000000 + "'", int18 == 188000000);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + dayOfWeek29 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek29.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField30.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 28 + "'", int36 == 28);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra44.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField45.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of(4096, 10, (int) (byte) 1, 0, 32, (int) '4');
        java.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((long) 'a');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        boolean boolean11 = localDateTime9.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime13 = localDateTime9.plusSeconds((long) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        boolean boolean16 = localDateTime14.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        boolean boolean17 = localDateTime13.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.temporal.Temporal temporal18 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime15);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal21 = localDateTime6.with((java.time.temporal.TemporalField) chronoField19, 48816000000000000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for ClockHourOfDay (valid values 1 - 24): 48816000000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField19.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI7 = new java.net.URI("java.text.AttributedCharacterIterator$Attribute(language)", "hi!", "21 Feb 2022 10:34:22 GMT", (int) (short) 100, "", "2022-02-21T09:34:47.744", "2022-02-21T09:34:02.096");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Illegal character in scheme name at index 37: java.text.AttributedCharacterIterator$Attribute(language)://hi!@[21 Feb 2022 10:34:22 GMT]:100?2022-02-21T09:34:47.744#2022-02-21T09:34:02.096");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.lang.String[] strArray4 = new java.lang.String[] { "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z", "10", "Optional.empty", "2022-02-21T09:34:01.158" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        boolean boolean13 = languageRangeList11.contains((java.lang.Object) "");
        boolean boolean14 = languageRangeList11.isEmpty();
        boolean boolean16 = languageRangeList11.remove((java.lang.Object) 10L);
        boolean boolean17 = languageRangeList11.isEmpty();
        boolean boolean18 = strSet5.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList11.listIterator();
        boolean boolean20 = languageRangeItor19.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange21 = languageRangeItor19.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        int int0 = java.util.Calendar.WEDNESDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.TWO;
        boolean boolean4 = minutes2.isLessThan(minutes3);
        org.joda.time.Minutes minutes5 = minutes0.minus(minutes3);
        org.joda.time.PeriodType periodType6 = minutes3.getPeriodType();
        java.lang.String str7 = minutes3.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2M" + "'", str7, "PT2M");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime3 = localDateTime0.withNano(0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime5 = localDateTime3.withMonth((int) '4');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 52");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        java.time.format.DecimalStyle decimalStyle2 = decimalStyle0.withZeroDigit('a');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((int) (byte) 1, (int) (byte) 100, 0, 0, (int) ' ', (int) 'a', (int) 'a', 1);
        mutablePeriod13.setYears(100);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (byte) -1);
        long long18 = duration17.getStandardDays();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime4.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.minusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime4.property(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        boolean boolean26 = decimalStyle2.equals((java.lang.Object) durationFieldType25);
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.time.LocalTime localTime0 = java.time.LocalTime.MAX;
        java.time.LocalTime localTime1 = java.time.LocalTime.MIN;
        int int2 = localTime0.compareTo(localTime1);
        java.time.LocalTime localTime3 = java.time.LocalTime.MAX;
        java.time.LocalTime localTime5 = localTime3.withMinute((int) (byte) 1);
        java.time.temporal.Temporal temporal6 = localTime0.adjustInto((java.time.temporal.Temporal) localTime3);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(temporal6);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(0L, (long) (short) 10, dateTimeZone6);
        org.joda.time.Period period8 = interval7.toPeriod();
        boolean boolean9 = interval3.isBefore((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.monthOfYear();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.halfdays();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(0L, chronology14);
        org.joda.time.Interval interval17 = interval7.withChronology(chronology14);
        boolean boolean19 = interval17.contains((long) 70);
        org.joda.time.Interval interval20 = interval17.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = interval17.toMutableInterval();
        long long22 = mutableInterval21.getEndMillis();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 1);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 1);
        long long5 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = property2.getAsText(locale6);
        org.joda.time.DurationField durationField8 = property2.getLeapDurationField();
        org.joda.time.DateMidnight dateMidnight9 = property2.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight11 = property2.addWrapFieldToCopy(940000000);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.year();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "January" + "'", str7, "January");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (byte) 10);
        java.time.OffsetTime offsetTime6 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset5);
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.of((int) (byte) 10, 10, (int) (short) 1, 867, zoneOffset5);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.PROLEPTIC_MONTH;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = offsetTime7.getLong((java.time.temporal.TemporalField) chronoField8);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ProlepticMonth");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.PROLEPTIC_MONTH + "'", chronoField8.equals(java.time.temporal.ChronoField.PROLEPTIC_MONTH));
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        boolean boolean9 = languageRangeList7.contains((java.lang.Object) "");
        boolean boolean10 = languageRangeList7.isEmpty();
        boolean boolean12 = languageRangeList7.remove((java.lang.Object) 10L);
        boolean boolean13 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7);
        languageRangeList7.clear();
        java.util.Locale.LanguageRange languageRange15 = null;
        boolean boolean16 = languageRangeList7.add(languageRange15);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(locale17);
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusMonths(10);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears(0);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 32, dateTimeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) yearMonthDay19, dateTimeZone28);
        boolean boolean31 = languageRangeList7.contains((java.lang.Object) yearMonthDay19);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getDisplayScript();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap40);
        boolean boolean43 = languageRangeList41.contains((java.lang.Object) "");
        boolean boolean44 = languageRangeList41.isEmpty();
        boolean boolean46 = languageRangeList41.remove((java.lang.Object) 10L);
        boolean boolean47 = strSet36.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41);
        int int48 = strSet36.size();
        java.time.Duration duration49 = java.time.Duration.ZERO;
        java.lang.Object obj50 = properties33.replace((java.lang.Object) int48, (java.lang.Object) duration49);
        java.lang.Object obj51 = properties33.clone();
        properties33.clear();
        java.util.Set<java.lang.String> strSet53 = properties33.stringPropertyNames();
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strSet53);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList54);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        boolean boolean11 = languageRangeList9.contains((java.lang.Object) "");
        boolean boolean12 = languageRangeList9.isEmpty();
        boolean boolean14 = languageRangeList9.remove((java.lang.Object) 10L);
        boolean boolean15 = strSet4.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        int int16 = strSet4.size();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.Object obj18 = properties1.replace((java.lang.Object) int16, (java.lang.Object) duration17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.setWeekyear(0);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar23 = new java.util.GregorianCalendar(locale22);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay24.toDateMidnight(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField28 = yearMonthDay24.getField((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone29);
        java.lang.Object obj31 = properties1.getOrDefault((java.lang.Object) 0, (java.lang.Object) dateMidnight30);
        java.io.UnsupportedEncodingException unsupportedEncodingException33 = new java.io.UnsupportedEncodingException();
        java.security.NoSuchAlgorithmException noSuchAlgorithmException35 = new java.security.NoSuchAlgorithmException("hi!");
        unsupportedEncodingException33.addSuppressed((java.lang.Throwable) noSuchAlgorithmException35);
        java.security.SignatureException signatureException37 = new java.security.SignatureException("2022-02-21T09:34:00.514", (java.lang.Throwable) unsupportedEncodingException33);
        java.lang.Throwable[] throwableArray38 = unsupportedEncodingException33.getSuppressed();
        java.lang.Object obj39 = properties1.get((java.lang.Object) throwableArray38);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        java.lang.String str2 = localDateTime1.toString();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = property4.addWrapFieldToCopy((int) (byte) -1);
        java.nio.LongBuffer longBuffer8 = java.nio.LongBuffer.allocate(3);
        java.nio.LongBuffer longBuffer9 = longBuffer8.duplicate();
        java.nio.LongBuffer longBuffer11 = java.nio.LongBuffer.allocate(3);
        java.nio.LongBuffer longBuffer12 = longBuffer11.duplicate();
        int int13 = longBuffer8.compareTo(longBuffer12);
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay((long) ' ');
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withMinuteOfHour(14);
        boolean boolean21 = longBuffer12.equals((java.lang.Object) timeOfDay18);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDateTime6.compareTo((org.joda.time.ReadablePartial) timeOfDay18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T09:42:11.983" + "'", str2, "2022-02-21T09:42:11.983");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(longBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar1);
        java.time.Instant instant3 = gregorianCalendar1.toInstant();
        java.time.ZonedDateTime zonedDateTime4 = gregorianCalendar1.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime6 = zonedDateTime4.plusSeconds((long) 5);
        java.time.LocalTime localTime7 = zonedDateTime6.toLocalTime();
        java.time.DayOfWeek dayOfWeek8 = java.time.DayOfWeek.THURSDAY;
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.YEAR;
        java.time.temporal.ValueRange valueRange10 = chronoField9.range();
        boolean boolean11 = chronoField9.isDateBased();
        boolean boolean12 = dayOfWeek8.isSupported((java.time.temporal.TemporalField) chronoField9);
        boolean boolean13 = zonedDateTime6.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDate localDate14 = zonedDateTime6.toLocalDate();
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.text.Format format16 = dateTimeFormatter15.toFormat();
        java.time.format.ResolverStyle resolverStyle17 = dateTimeFormatter15.getResolverStyle();
        java.time.ZoneId zoneId18 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withZone(zoneId18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localDate14.format(dateTimeFormatter19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zonedDateTime4);
        org.junit.Assert.assertNotNull(zonedDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + dayOfWeek8 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek8.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField9.equals(java.time.temporal.ChronoField.YEAR));
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(format16);
        org.junit.Assert.assertTrue("'" + resolverStyle17 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle17.equals(java.time.format.ResolverStyle.STRICT));
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }
}

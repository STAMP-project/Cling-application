import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.LocalTime localTime17 = localTime15.withFields(readablePartial16);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime22.toDateMidnight();
        org.joda.time.DateTime dateTime26 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime22.getZone();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        int int29 = dateTime28.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 439 + "'", int29 == 439);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.LocalTime localTime17 = localTime15.withFields(readablePartial16);
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        org.joda.time.LocalTime localTime19 = property18.getLocalTime();
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 2022);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMillis(278);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01T00:00:02.032+00:00:00.010" + "'", str2, "1970-01-01T00:00:02.032+00:00:00.010");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        int int8 = property6.getMinimumValue();
        org.joda.time.DurationField durationField9 = property6.getDurationField();
        java.util.Locale locale13 = new java.util.Locale("+00:00:00.010", "7", "millis");
        java.lang.String str14 = property6.getAsText(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property6.getField();
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder17.setTimeOfDay(9, 14, 13);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("");
        java.lang.String str24 = locale23.getScript();
        java.util.Calendar.Builder builder25 = builder21.setLocale(locale23);
        java.util.Locale locale26 = java.util.Locale.US;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.lang.String str31 = locale26.getDisplayCountry(locale30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale26);
        java.util.Locale locale33 = java.util.Locale.ITALY;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale26.getDisplayCountry(locale33);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale33.getDisplayVariant(locale36);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int50 = dateTimeZone48.getOffset((long) (byte) 1);
        long long52 = dateTimeZone46.getMillisKeepLocal(dateTimeZone48, (long) 3);
        long long55 = dateTimeZone46.convertLocalToUTC((long) 9, false);
        java.lang.String str56 = dateTimeZone46.toString();
        long long58 = dateTimeZone46.convertUTCToLocal((long) '#');
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((int) (short) 10, 2, 17, 3, 15, 0, (int) (short) 0, dateTimeZone46);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int71 = dateTimeZone69.getOffset((long) (byte) 1);
        long long73 = dateTimeZone67.getMillisKeepLocal(dateTimeZone69, (long) 3);
        org.joda.time.DateTime dateTime74 = dateTime65.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime76 = dateTime65.minus((long) '#');
        org.joda.time.DateTime dateTime78 = dateTime65.minusMinutes(100);
        long long79 = dateTime65.getMillis();
        java.util.Locale locale80 = java.util.Locale.UK;
        java.util.Locale locale81 = locale80.stripExtensions();
        java.util.Calendar calendar82 = dateTime65.toCalendar(locale81);
        java.lang.String str83 = dateTimeZone46.getName(342566313L, locale81);
        java.lang.String str84 = locale33.getDisplayVariant(locale81);
        java.lang.String str85 = locale23.getDisplayVariant(locale33);
        java.lang.String str86 = dateTimeField15.getAsShortText(29, locale23);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals(locale13.toString(), "+00:00:00.010_7_millis");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "United States" + "'", str31, "United States");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645514347425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=7,MILLISECOND=425,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Stati Uniti" + "'", str35, "Stati Uniti");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 45L + "'", long58 == 45L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3L + "'", long73 == 3L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645488599990L + "'", long79 == 1645488599990L);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=1645488599990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.010" + "'", str83, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "29" + "'", str86, "29");
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Interval interval27 = interval8.withStartMillis(0L);
        org.joda.time.Interval interval28 = interval8.toInterval();
        java.lang.String str29 = interval28.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str29, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.MutableInterval mutableInterval21 = interval18.toMutableInterval();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        java.util.Locale locale29 = java.util.Locale.US;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale29.getDisplayName(locale31);
        java.lang.String str33 = property28.getAsText(locale29);
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = property28.getAsText(locale34);
        org.joda.time.DateTime dateTime37 = property28.withMinimumValue();
        boolean boolean38 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalTime localTime50 = localTime46.plus(readablePeriod49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean52 = localTime50.isSupported(dateTimeFieldType51);
        org.joda.time.DateTime dateTime53 = dateTime43.withFields((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int59 = dateTimeZone57.getOffset((long) (byte) 1);
        long long61 = dateTimeZone55.getMillisKeepLocal(dateTimeZone57, (long) 3);
        long long64 = dateTimeZone55.convertLocalToUTC((long) 9, false);
        java.lang.String str65 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime66 = localTime50.toDateTimeToday(dateTimeZone55);
        java.util.Locale locale68 = null;
        java.lang.String str69 = dateTimeZone55.getShortName((long) 100, locale68);
        boolean boolean70 = dateTimeZone55.isFixed();
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str74 = locale73.getDisplayLanguage();
        java.lang.String str75 = dateTimeZone55.getName((long) 4, locale73);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime37.toMutableDateTime(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English (United States)" + "'", str30, "English (United States)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str32, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "10" + "'", str33, "10");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CN" + "'", str35, "CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "10" + "'", str36, "10");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3L + "'", long61 == 3L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hours" + "'", str74, "hours");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertNotNull(mutableDateTime77);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime5.plusWeeks(0);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.halfdayOfDay();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DurationField durationField14 = chronology10.seconds();
        java.lang.String str15 = chronology10.toString();
        org.joda.time.DurationField durationField16 = chronology10.weekyears();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(0L, chronology10);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+00:00:00.010]" + "'", str15, "ISOChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology7.minuteOfHour();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Period period31 = interval29.toPeriod();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = period31.get(durationFieldType32);
        int[] intArray35 = chronology7.get((org.joda.time.ReadablePeriod) period31, 1645513759720L);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        long long42 = chronology7.set((org.joda.time.ReadablePartial) localTime38, (long) 'x');
        org.joda.time.DurationField durationField43 = durationFieldType0.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField44 = chronology7.millisOfSecond();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks(26235992);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "days" + "'", str1, "days");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 2720, 5, 7, 9, 19, 720]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 600000L + "'", long42 == 600000L);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 122);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Locale locale7 = new java.util.Locale("weekyear");
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(7);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withPivotYear(27425230);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = localTime28.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DurationField durationField33 = chronology31.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.yearOfCentury();
        org.joda.time.Chronology chronology36 = chronology31.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter25.withChronology(chronology36);
        boolean boolean38 = dateTimeFormatter37.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser39 = dateTimeFormatter37.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime41 = dateTimeFormatter37.parseLocalTime("DateTimeField[dayOfWeek]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertEquals(locale7.toString(), "weekyear");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(dateTimeParser39);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime17 = property9.addCopy((long) 292278993);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean19 = localTime17.isSupported(durationFieldType18);
        org.joda.time.LocalTime localTime21 = localTime17.minusSeconds((int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        java.util.Date date1 = new java.util.Date((long) 31);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime.Property property8 = dateTime6.minuteOfHour();
        int int9 = property8.get();
        org.joda.time.Interval interval10 = property8.toInterval();
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        java.util.Date date12 = dateTime11.toDate();
        int int13 = date12.getDay();
        date12.setMinutes(920);
        int int16 = date12.getMonth();
        int int17 = date1.compareTo(date12);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 15:20:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        long long15 = dateTime14.getMillis();
        org.joda.time.Instant instant16 = dateTime14.toInstant();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        int int23 = dateTime21.getWeekyear();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.get();
        org.joda.time.Interval interval32 = property30.toInterval();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfHour();
        int int40 = property39.getMinimumValue();
        org.joda.time.DateTime dateTime41 = property39.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        boolean boolean43 = interval32.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        java.lang.String str51 = property50.toString();
        org.joda.time.DateTime dateTime52 = property50.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readableDuration53);
        org.joda.time.Interval interval55 = interval32.withStart((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration56 = interval32.toDuration();
        org.joda.time.DateTime dateTime57 = dateTime21.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration58 = duration56.toDuration();
        org.joda.time.Period period59 = duration56.toPeriod();
        org.joda.time.Instant instant60 = instant16.plus((org.joda.time.ReadableDuration) duration56);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645488599990L + "'", long15 == 1645488599990L);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Property[minuteOfHour]" + "'", str51, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(instant60);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(3);
        int int8 = localTime7.size();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime17.withZoneRetainFields(dateTimeZone19);
        int int24 = dateTime23.getDayOfWeek();
        org.joda.time.DateTime dateTime25 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfMonth();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.LocalTime localTime38 = localTime36.plusHours((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        boolean boolean48 = dateTimeFieldType39.isSupported(chronology46);
        boolean boolean49 = localTime36.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime.Property property50 = dateTime25.property(dateTimeFieldType39);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        boolean boolean60 = dateTimeFieldType51.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.centuryOfEra();
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.now(chronology58);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(chronology58);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.now(chronology58);
        boolean boolean65 = dateTimeFieldType39.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField66 = chronology58.weekyearOfCentury();
        long long69 = dateTimeField66.add(1645514021348L, 26268);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 830583530021348L + "'", long69 == 830583530021348L);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(6, 26268, 3, 660000, 26248, (-457080), 50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 660000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        org.joda.time.DateTime dateTime13 = property6.setCopy((int) ' ');
        java.lang.String str14 = property6.getAsString();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePartial) localTime30, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField33 = chronology21.weekyear();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 5, chronology21);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.get();
        org.joda.time.Interval interval43 = property41.toInterval();
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears(15);
        int int48 = property6.getDifference((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property49 = dateTime47.dayOfYear();
        int int50 = dateTime47.getMillisOfSecond();
        boolean boolean51 = dateTime47.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (United States)" + "'", str8, "English (United States)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 19535048 + "'", int48 == 19535048);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = dateTime1.toString(dateTimeFormatter2);
        org.joda.time.DateTime.Property property4 = dateTime1.millisOfSecond();
        boolean boolean5 = dateTime1.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime1.withWeekyear(26014330);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = dateTime1.toString("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.062+00:00:00.010" + "'", str3, "1970-01-01T00:00:00.062+00:00:00.010");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("00:08:00.001");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 00:08:00.001 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        java.time.Instant instant5 = calendar0.toInstant();
        java.util.Date date6 = java.util.Date.from(instant5);
        int int7 = date6.getMonth();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance();
        long long9 = calendar8.getTimeInMillis();
        java.util.Date date11 = new java.util.Date((long) (byte) 100);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromDateFields(date11);
        calendar8.setTime(date11);
        boolean boolean14 = date6.before(date11);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        int int29 = property28.get();
        org.joda.time.Interval interval30 = property28.toInterval();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.joda.time.DateTime.Property property37 = dateTime35.minuteOfHour();
        int int38 = property37.getMinimumValue();
        org.joda.time.DateTime dateTime39 = property37.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfYear();
        boolean boolean41 = interval30.contains((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        java.lang.String str49 = property48.toString();
        org.joda.time.DateTime dateTime50 = property48.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.Interval interval53 = interval30.withStart((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = interval30.toDuration();
        org.joda.time.DateTime dateTime55 = dateTime19.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime57 = dateTime55.withHourOfDay(23);
        java.util.Date date58 = dateTime57.toDate();
        boolean boolean59 = date11.before(date58);
        date11.setDate(3296);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514347788,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=7,MILLISECOND=788,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:19:07 UTC 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645514347788L + "'", long9 == 1645514347788L);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 09 00:00:00 UTC 1979");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Property[minuteOfHour]" + "'", str49, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Feb 22 23:08:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getNameKey(8467200100L);
        boolean boolean5 = dateTimeZone0.isStandardOffset(26296832L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "+00:00:00.010" + "'", str1, "+00:00:00.010");
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = property6.getAsText(locale12);
        org.joda.time.DateTime dateTime15 = property6.withMinimumValue();
        org.joda.time.ReadableInstant readableInstant16 = null;
        long long17 = property6.getDifferenceAsLong(readableInstant16);
        org.joda.time.DateTime dateTime18 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime20 = property6.addToCopy((long) 'u');
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(9L, (-292275054));
        int int24 = dateTime23.getMinuteOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.minus((-62048678398000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime26.withYear((-1645451999));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645451999 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (United States)" + "'", str8, "English (United States)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CN" + "'", str13, "CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-429L) + "'", long17 == (-429L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 925 + "'", int24 == 925);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean10 = localTime2.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int16 = dateTimeZone14.getOffset((long) (byte) 1);
        long long18 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 3);
        org.joda.time.DateTime dateTime19 = localTime2.toDateTimeToday(dateTimeZone12);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfSecond();
        org.joda.time.LocalTime localTime22 = property21.roundHalfFloorCopy();
        java.lang.String str23 = property21.getAsShortText();
        int int24 = property21.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "863" + "'", str23, "863");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property17 = dateTime4.dayOfYear();
        org.joda.time.LocalTime localTime18 = dateTime4.toLocalTime();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime4.minusMillis(267);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfMonth();
        boolean boolean10 = dateTime6.isAfter(90L);
        org.joda.time.DateTime dateTime12 = dateTime6.minusMinutes(3780000);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.get();
        org.joda.time.Interval interval25 = property23.toInterval();
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.Interval interval36 = interval35.toInterval();
        boolean boolean37 = interval26.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime38 = interval26.getEnd();
        org.joda.time.Interval interval39 = interval26.toInterval();
        org.joda.time.Period period40 = interval39.toPeriod();
        org.joda.time.DateTime dateTime41 = dateTime16.plus((org.joda.time.ReadablePeriod) period40);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.dayOfYear();
        org.joda.time.DurationField durationField20 = durationFieldType1.getField(chronology7);
        org.joda.time.DurationField durationField21 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology7.dayOfWeek();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((long) 40, chronology7);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.clockhourOfDay();
        org.joda.time.DurationField durationField26 = chronology7.years();
        int int29 = durationField26.getValue((-58924681179143L), 1645514197347L);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1867) + "'", int29 == (-1867));
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology7.minuteOfHour();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Period period31 = interval29.toPeriod();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = period31.get(durationFieldType32);
        int[] intArray35 = chronology7.get((org.joda.time.ReadablePeriod) period31, 1645513759720L);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        long long42 = chronology7.set((org.joda.time.ReadablePartial) localTime38, (long) 'x');
        org.joda.time.DateTimeField dateTimeField43 = chronology7.halfdayOfDay();
        boolean boolean44 = durationFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField45 = chronology7.millisOfDay();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "centuries" + "'", str1, "centuries");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 2720, 5, 7, 9, 19, 720]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 600000L + "'", long42 == 600000L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationField durationField20 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.halfdayOfDay();
        long long23 = dateTimeField21.roundHalfFloor((long) 2022);
        java.lang.String str25 = dateTimeField21.getAsShortText((long) 100);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AM" + "'", str25, "AM");
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        org.joda.time.DateTime dateTime13 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(5);
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours(0);
        int int18 = dateTime17.getDayOfMonth();
        int int19 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.minusHours(26329771);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (United States)" + "'", str8, "English (United States)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 29 + "'", int18 == 29);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property12 = dateTime9.monthOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.get();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfHour();
        int int30 = property29.get();
        boolean boolean31 = interval22.equals((java.lang.Object) int30);
        org.joda.time.Interval interval32 = interval22.toInterval();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = locale40.getDisplayName();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale40.getDisplayName(locale42);
        java.lang.String str44 = property39.getAsText(locale40);
        org.joda.time.DurationField durationField45 = property39.getDurationField();
        org.joda.time.DateTime dateTime46 = property39.roundFloorCopy();
        org.joda.time.DateTime dateTime48 = dateTime46.plusWeeks(5);
        org.joda.time.DateTime dateTime50 = dateTime48.minusHours(0);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths((int) ' ');
        org.joda.time.DateTime.Property property53 = dateTime50.yearOfEra();
        org.joda.time.Interval interval54 = interval22.withEnd((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
        int int63 = dateTime61.getMonthOfYear();
        int int64 = dateTime61.getHourOfDay();
        org.joda.time.DateTime.Property property65 = dateTime61.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = dateTime61.toString(dateTimeFormatter66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime70 = dateTime61.withFieldAdded(durationFieldType68, (int) (byte) 0);
        int int71 = dateTime70.getEra();
        boolean boolean72 = interval55.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localTime76.toDateTime(readableInstant77);
        org.joda.time.Chronology chronology79 = localTime76.getChronology();
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((long) (byte) 1, chronology79);
        org.joda.time.DateTime dateTime81 = localTime80.toDateTimeToday();
        org.joda.time.DateTime dateTime83 = dateTime81.minus(0L);
        boolean boolean85 = dateTime81.isBefore((-35999900L));
        org.joda.time.DateTime dateTime87 = dateTime81.plusMinutes(86399001);
        long long88 = dateTime87.getMillis();
        boolean boolean89 = dateTime70.isBefore((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean90 = interval13.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English (United States)" + "'", str41, "English (United States)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str43, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "10" + "'", str44, "10");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010" + "'", str67, "2022-02-22T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 6829428059991L + "'", long88 == 6829428059991L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.getLocalTime();
        org.joda.time.LocalTime localTime14 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = property9.addCopy(23);
        org.joda.time.LocalTime.Property property17 = localTime16.minuteOfHour();
        org.joda.time.LocalTime localTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.LocalTime localTime20 = property17.withMinimumValue();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        int int27 = dateTime25.getMonthOfYear();
        int int28 = dateTime25.getHourOfDay();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime25.toString(dateTimeFormatter30);
        org.joda.time.DateTime dateTime33 = dateTime25.minusWeeks(1970);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.get();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        int int51 = property50.get();
        org.joda.time.Interval interval52 = property50.toInterval();
        org.joda.time.Interval interval53 = interval52.toInterval();
        boolean boolean54 = interval43.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval55 = interval43.toInterval();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        java.util.Locale locale63 = java.util.Locale.US;
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale63.getDisplayName(locale65);
        java.lang.String str67 = property62.getAsText(locale63);
        org.joda.time.DurationField durationField68 = property62.getDurationField();
        org.joda.time.DateTime dateTime69 = property62.roundFloorCopy();
        org.joda.time.DateTime dateTime71 = dateTime69.plusWeeks(5);
        boolean boolean72 = interval55.contains((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime74 = dateTime69.plusMonths(267);
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localTime77.toDateTime(readableInstant78);
        org.joda.time.Chronology chronology80 = localTime77.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = dateTimeField82.getType();
        org.joda.time.DateTime.Property property84 = dateTime69.property(dateTimeFieldType83);
        boolean boolean85 = dateTime33.equals((java.lang.Object) dateTimeFieldType83);
        boolean boolean86 = localTime20.isSupported(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010" + "'", str31, "2022-02-22T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English (United States)" + "'", str64, "English (United States)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str66, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "10" + "'", str67, "10");
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        int int20 = property19.get();
        int int21 = property19.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property19.addToCopy((long) (byte) -1);
        boolean boolean24 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = interval8.isBefore(readableInterval25);
        org.joda.time.Interval interval28 = interval8.withStartMillis(52L);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.get();
        org.joda.time.Interval interval37 = property35.toInterval();
        org.joda.time.Interval interval38 = interval37.toInterval();
        long long39 = interval37.toDurationMillis();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        int int47 = property46.get();
        org.joda.time.Interval interval48 = property46.toInterval();
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.Interval interval58 = property56.toInterval();
        org.joda.time.Interval interval59 = interval58.toInterval();
        boolean boolean60 = interval49.isBefore((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTime dateTime61 = interval49.getEnd();
        org.joda.time.Interval interval62 = interval49.toInterval();
        boolean boolean63 = interval37.abuts((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration64 = interval49.toDuration();
        org.joda.time.Interval interval65 = interval28.withDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        org.joda.time.MutableInterval mutableInterval66 = interval28.toMutableInterval();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 60000L + "'", long39 == 60000L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(mutableInterval66);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime.Property property5 = dateTime4.monthOfYear();
        int int6 = dateTime4.getWeekyear();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.DateTime.Property property13 = dateTime11.minuteOfHour();
        int int14 = property13.get();
        org.joda.time.Interval interval15 = property13.toInterval();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfHour();
        int int23 = property22.getMinimumValue();
        org.joda.time.DateTime dateTime24 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        boolean boolean26 = interval15.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        java.lang.String str34 = property33.toString();
        org.joda.time.DateTime dateTime35 = property33.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readableDuration36);
        org.joda.time.Interval interval38 = interval15.withStart((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration39 = interval15.toDuration();
        org.joda.time.DateTime dateTime40 = dateTime4.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration41 = duration39.toDuration();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) (byte) 1, chronology48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        org.joda.time.DateTime dateTime52 = dateTime50.withTimeAtStartOfDay();
        boolean boolean53 = duration39.equals((java.lang.Object) dateTime50);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[minuteOfHour]" + "'", str34, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime14 = property9.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone17.isLocalDateTimeGap(localDateTime18);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        int int27 = dateTime25.getMonthOfYear();
        int int28 = dateTime25.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int34 = dateTimeZone32.getOffset((long) (byte) 1);
        long long36 = dateTimeZone30.getMillisKeepLocal(dateTimeZone32, (long) 3);
        org.joda.time.DateTime dateTime37 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfCentury((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.year();
        boolean boolean41 = localTime20.equals((java.lang.Object) property40);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = property40.getAsShortText(locale42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = localTime14.toString("316970-01-01T00:00:00.005Z", locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2052" + "'", str43, "2052");
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        boolean boolean20 = dateTimeFieldType11.isSupported(chronology18);
        org.joda.time.DateTime.Property property21 = dateTime10.property(dateTimeFieldType11);
        int int22 = dateTime10.getDayOfMonth();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        java.util.Locale locale31 = java.util.Locale.US;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale31.getDisplayName(locale33);
        java.lang.String str35 = property30.getAsText(locale31);
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.lang.String str41 = locale31.getDisplayCountry(locale39);
        java.lang.String str42 = dateTime10.toString("-1", locale39);
        org.joda.time.DateTime dateTime45 = dateTime10.withDurationAdded(25200000L, (int) 'x');
        org.joda.time.DateTime dateTime47 = dateTime10.plusMinutes((int) (byte) -1);
        org.joda.time.DateTime dateTime48 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalTime localTime60 = localTime56.plus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean62 = localTime60.isSupported(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = dateTime53.withFields((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int69 = dateTimeZone67.getOffset((long) (byte) 1);
        long long71 = dateTimeZone65.getMillisKeepLocal(dateTimeZone67, (long) 3);
        long long74 = dateTimeZone65.convertLocalToUTC((long) 9, false);
        java.lang.String str75 = dateTimeZone65.toString();
        org.joda.time.DateTime dateTime76 = localTime60.toDateTimeToday(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime76.getZone();
        boolean boolean78 = dateTime48.equals((java.lang.Object) dateTime76);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (United States)" + "'", str32, "English (United States)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str34, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10" + "'", str35, "10");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "United States" + "'", str41, "United States");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3L + "'", long71 == 3L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfDay();
        org.joda.time.DurationField durationField11 = chronology9.years();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        boolean boolean11 = dateTimeFieldType2.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.weekyear();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(107L, (long) 32772, chronology9);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.Interval interval37 = interval36.toInterval();
        boolean boolean38 = interval27.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableInterval mutableInterval39 = interval36.toMutableInterval();
        boolean boolean40 = interval36.containsNow();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1, chronology47);
        org.joda.time.DateTime dateTime49 = localTime48.toDateTimeToday();
        org.joda.time.LocalTime localTime51 = localTime48.minusMinutes(1);
        org.joda.time.LocalTime.Property property52 = localTime48.millisOfDay();
        int int53 = localTime48.getMillisOfDay();
        org.joda.time.DateTime dateTime54 = localTime48.toDateTimeToday();
        int int55 = dateTime54.getWeekyear();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.Chronology chronology62 = localTime59.getChronology();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.hourOfHalfday();
        int int66 = dateTimeField64.getMaximumValue(3L);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField64.getType();
        org.joda.time.DateTime.Property property68 = dateTime54.property(dateTimeFieldType67);
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = null;
        org.joda.time.format.DateTimeParser dateTimeParser70 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter69, dateTimeParser70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter71.withPivotYear((java.lang.Integer) 122);
        org.joda.time.Chronology chronology74 = dateTimeFormatter71.getChronology();
        java.util.Locale locale76 = new java.util.Locale("weekyear");
        java.util.Locale locale77 = null;
        java.lang.String str78 = locale76.getDisplayVariant(locale77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter71.withLocale(locale76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter79.withPivotYear(7);
        org.joda.time.LocalTime localTime85 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = localTime85.toDateTime(readableInstant86);
        org.joda.time.Chronology chronology88 = localTime85.getChronology();
        org.joda.time.LocalTime localTime89 = new org.joda.time.LocalTime((long) (byte) 1, chronology88);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime(chronology88);
        org.joda.time.DateTimeField dateTimeField91 = chronology88.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter79.withChronology(chronology88);
        org.joda.time.DateTimeField dateTimeField93 = dateTimeFieldType67.getField(chronology88);
        boolean boolean94 = interval36.equals((java.lang.Object) chronology88);
        org.joda.time.MutableInterval mutableInterval95 = interval36.toMutableInterval();
        boolean boolean96 = interval17.abuts((org.joda.time.ReadableInterval) interval36);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 11 + "'", int66 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNull(chronology74);
        org.junit.Assert.assertEquals(locale76.toString(), "weekyear");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mutableInterval95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.getMinimumValue();
        org.joda.time.DateTime dateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        boolean boolean40 = interval29.contains((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        java.lang.String str48 = property47.toString();
        org.joda.time.DateTime dateTime49 = property47.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.Interval interval52 = interval29.withStart((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Interval interval53 = interval19.overlap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration54 = interval53.toDuration();
        org.joda.time.Interval interval55 = interval8.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        int int63 = property62.get();
        org.joda.time.Interval interval64 = property62.toInterval();
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Period period66 = interval64.toPeriod();
        boolean boolean68 = interval64.isAfter(0L);
        boolean boolean69 = interval55.isAfter((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Period period70 = interval64.toPeriod();
        org.joda.time.DurationFieldType durationFieldType71 = null;
        boolean boolean72 = period70.isSupported(durationFieldType71);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[minuteOfHour]" + "'", str48, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        int int3 = calendar2.getMinimalDaysInFirstWeek();
        calendar2.set(100, (int) ' ', 600000, (int) 'x', 8, 20);
        calendar2.set((int) (short) 100, 540, 6, 9, 0);
        int int18 = calendar2.getMinimum(0);
        calendar2.set(26, 920, 33);
        calendar2.setFirstDayOfWeek(11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=11,minimalDaysInFirstWeek=1,ERA=1,YEAR=26,MONTH=920,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=33,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=9,MINUTE=0,SECOND=20,MILLISECOND=488,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        org.joda.time.DateTime dateTime13 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = property6.addToCopy(52L);
        org.joda.time.DateTime dateTime16 = property6.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (United States)" + "'", str8, "English (United States)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        int int8 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime10 = property6.addToCopy((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis(0L);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        org.joda.time.LocalTime.Property property7 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime9 = localTime2.minusMillis((int) (short) 10);
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = localTime2.isAfter(readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        boolean boolean13 = property6.isLeap();
        long long14 = property6.remainder();
        org.joda.time.DateTime dateTime16 = property6.addToCopy(540);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = property6.setCopy(1645513800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645513800 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (United States)" + "'", str8, "English (United States)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(8);
        org.joda.time.LocalTime localTime15 = localTime13.minusSeconds(25845996);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfHour();
        int int23 = property22.get();
        org.joda.time.Interval interval24 = property22.toInterval();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.getMinimumValue();
        org.joda.time.DateTime dateTime33 = property31.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        boolean boolean35 = interval24.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.DateTime.Property property42 = dateTime40.minuteOfHour();
        java.lang.String str43 = property42.toString();
        org.joda.time.DateTime dateTime44 = property42.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readableDuration45);
        org.joda.time.Interval interval47 = interval24.withStart((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval47.toPeriod(periodType49);
        org.joda.time.Interval interval51 = interval47.toInterval();
        org.joda.time.DateTime dateTime52 = interval51.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime55 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        int int63 = property62.get();
        org.joda.time.Interval interval64 = property62.toInterval();
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        org.joda.time.LocalTime localTime71 = dateTime70.toLocalTime();
        org.joda.time.DateTime.Property property72 = dateTime70.minuteOfHour();
        int int73 = property72.get();
        org.joda.time.Interval interval74 = property72.toInterval();
        org.joda.time.Interval interval75 = interval74.toInterval();
        boolean boolean76 = interval65.isBefore((org.joda.time.ReadableInterval) interval74);
        org.joda.time.DateTime dateTime77 = interval65.getEnd();
        org.joda.time.Interval interval78 = interval65.toInterval();
        org.joda.time.Period period79 = interval78.toPeriod();
        org.joda.time.DateTime dateTime80 = dateTime55.minus((org.joda.time.ReadablePeriod) period79);
        java.lang.String str81 = period79.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[minuteOfHour]" + "'", str43, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT1M" + "'", str81, "PT1M");
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(1970, (int) (short) -1, (int) (short) 0);
        java.util.Calendar.Builder builder8 = builder0.setDate(292278993, 4, (int) 'a');
        java.util.Calendar.Builder builder12 = builder0.setTimeOfDay((int) 'u', (-1), 2922789);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(2052, 798, 823, (-599998));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(30L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        boolean boolean11 = dateTimeFieldType2.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        int int21 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTime dateTime22 = localTime20.toDateTimeToday();
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfDay(4);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay(25776265L);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField35.getType();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weekyears();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (byte) 1, chronology50);
        int[] intArray53 = chronology42.get((org.joda.time.ReadablePartial) localTime51, (long) (short) -1);
        org.joda.time.DurationField durationField54 = chronology42.minutes();
        org.joda.time.DateTimeField dateTimeField55 = chronology42.yearOfEra();
        org.joda.time.DurationField durationField56 = chronology42.weekyears();
        boolean boolean57 = dateTimeFieldType36.isSupported(chronology42);
        int int58 = localTime27.indexOf(dateTimeFieldType36);
        int int59 = dateTime22.get(dateTimeFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime61 = localTime1.withField(dateTimeFieldType36, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2922789 + "'", int21 == 2922789);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = null; // flaky: interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        org.joda.time.DateTime dateTime35 = localTime34.toDateTimeToday();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond(0);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.DateTime.Property property44 = dateTime42.minuteOfHour();
        int int45 = property44.get();
        org.joda.time.Interval interval46 = property44.toInterval();
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Period period48 = interval46.toPeriod();
        java.lang.String str49 = interval46.toString();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.Interval interval58 = property56.toInterval();
        org.joda.time.Interval interval59 = interval58.toInterval();
        long long60 = interval58.toDurationMillis();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval58.toPeriod(periodType61);
        boolean boolean63 = interval46.contains((org.joda.time.ReadableInterval) interval58);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval58.toPeriod(periodType64);
        org.joda.time.LocalTime localTime66 = localTime34.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Interval interval67 = null; // flaky: interval26.withPeriodAfterStart((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Chronology chronology68 = null; // flaky: interval67.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str49, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 60000L + "'", long60 == 60000L);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(localTime66);
// flaky:         org.junit.Assert.assertNotNull(interval67);
// flaky:         org.junit.Assert.assertNotNull(chronology68);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.getLocalTime();
        org.joda.time.LocalTime localTime14 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = property9.addCopy(23);
        org.joda.time.LocalTime.Property property17 = localTime16.minuteOfHour();
        org.joda.time.LocalTime localTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.LocalTime localTime20 = property17.withMinimumValue();
        org.joda.time.LocalTime localTime21 = property17.getLocalTime();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime10 = property9.roundHalfEvenCopy();
        java.lang.String str11 = localTime10.toString();
        org.joda.time.LocalTime.Property property12 = localTime10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalTime localTime14 = property12.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property12.roundFloorCopy();
        org.joda.time.LocalTime localTime16 = property12.withMaximumValue();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePartial) localTime31, (long) (short) -1);
        org.joda.time.LocalTime.Property property34 = localTime31.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        org.joda.time.LocalTime localTime36 = property34.roundCeilingCopy();
        int int37 = localTime36.size();
        boolean boolean38 = localTime16.equals((java.lang.Object) localTime36);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "00:00:00.000" + "'", str11, "00:00:00.000");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        boolean boolean10 = dateTimeFieldType1.isSupported(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(536457600000L, chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        long long15 = dateTimeField13.roundCeiling((long) 1930);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 60000L + "'", long15 == 60000L);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone10);
        boolean boolean14 = dateTime12.isBefore(25200000L);
        org.joda.time.DateTime dateTime16 = dateTime12.withHourOfDay(13);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear(20);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("32");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField8.getType();
        java.lang.String str11 = dateTimeField8.getAsText(1645513769179L);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTime dateTime20 = localTime19.toDateTimeToday();
        org.joda.time.LocalTime localTime22 = localTime19.minusMinutes(1);
        org.joda.time.LocalTime.Property property23 = localTime19.millisOfDay();
        org.joda.time.LocalTime localTime25 = property23.addCopy((-98730827584199990L));
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime25, 0, locale28);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 1, chronology36);
        org.joda.time.DateTime dateTime38 = localTime37.toDateTimeToday();
        org.joda.time.LocalTime localTime40 = localTime37.withMillisOfSecond(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int42 = localTime37.get(dateTimeFieldType41);
        org.joda.time.LocalTime.Property property43 = localTime37.millisOfDay();
        org.joda.time.LocalTime.Property property44 = localTime37.millisOfDay();
        org.joda.time.LocalTime localTime45 = property44.roundHalfCeilingCopy();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime45, 721, locale47);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale47);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "7" + "'", str11, "7");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "721" + "'", str49, "721");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645514348788,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=8,MILLISECOND=788,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        boolean boolean10 = dateTimeFieldType1.isSupported(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(536457600000L, chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str16 = locale15.getCountry();
        java.lang.String str17 = dateTimeField13.getAsShortText((-94), locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) dateTimeField13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CN" + "'", str16, "CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-94" + "'", str17, "-94");
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        java.lang.String str17 = property16.toString();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        long long21 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = property9.withMinimumValue();
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) '4');
        boolean boolean26 = dateTime22.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[minuteOfHour]" + "'", str17, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone10);
        boolean boolean14 = dateTime12.isBefore(25200000L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes(1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.weekyears();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = localTime28.getChronology();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (byte) 1, chronology31);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePartial) localTime32, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.dayOfYear();
        org.joda.time.DurationField durationField36 = chronology23.centuries();
        org.joda.time.DateTimeField dateTimeField37 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology23.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime16.toMutableDateTime(chronology23);
        org.joda.time.DateTime dateTime41 = dateTime16.minusMinutes(19535048);
        org.joda.time.DateTime dateTime42 = dateTime16.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Period period29 = interval27.toPeriod();
        int[] intArray31 = chronology6.get((org.joda.time.ReadablePeriod) period29, (long) (byte) 100);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology38);
        long long44 = chronology6.set((org.joda.time.ReadablePartial) localTime42, 25200000L);
        org.joda.time.DurationField durationField45 = chronology6.months();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.Chronology chronology47 = chronology6.withUTC();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((-61914758399958L), chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.yearOfEra();
        org.joda.time.DurationField durationField50 = chronology47.centuries();
        long long53 = durationField50.getDifferenceAsLong(1645513928707L, 26033118L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 26348888L + "'", long44 == 26348888L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 1, chronology21);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePartial) localTime22, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField26 = durationFieldType7.getField(chronology13);
        org.joda.time.LocalTime localTime28 = localTime2.withFieldAdded(durationFieldType7, 1);
        java.lang.String str29 = durationFieldType7.toString();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.weekyears();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = localTime41.getChronology();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (byte) 1, chronology44);
        int[] intArray47 = chronology36.get((org.joda.time.ReadablePartial) localTime45, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField48 = chronology36.weekyear();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 5, chronology36);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.Interval interval58 = property56.toInterval();
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.DateTime dateTime60 = dateTime49.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DurationField durationField62 = durationFieldType7.getField(chronology61);
        long long65 = durationField62.subtract((long) 46, 121);
        long long66 = durationField62.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hours" + "'", str29, "hours");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-435599954L) + "'", long65 == (-435599954L));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3600000L + "'", long66 == 3600000L);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfDay();
        long long35 = dateTimeField33.roundCeiling(27425229L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 27425229L + "'", long35 == 27425229L);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("days", strMap1);
        java.lang.String[] strArray13 = new java.lang.String[] { "2022-02-22T00:10:00.000Z", "1970-01-01T00:00:00.052Z", "2022-02-22T00:10:00.000Z", "days", "days", "2022-02-22T00:10:00.000Z", "United States", "United States", "dayOfMonth", "10" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap17);
        java.util.Locale locale20 = new java.util.Locale("+00:00:00.010");
        java.lang.String str21 = locale20.getCountry();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        int int32 = localTime26.compareTo((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.LocalTime.Property property33 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime35 = property33.addCopy(6);
        org.joda.time.LocalTime localTime36 = property33.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime37 = property33.roundCeilingCopy();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = property33.getAsShortText(locale38);
        java.lang.String str40 = locale38.getDisplayScript();
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap43);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertEquals(locale20.toString(), "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeList44);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.DurationField durationField11 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.hourOfHalfday();
        java.util.Locale locale14 = new java.util.Locale("22 Feb 2022 07:09:51 GMT");
        int int15 = dateTimeField12.getMaximumShortTextLength(locale14);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        java.util.Locale locale24 = java.util.Locale.US;
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.lang.String str28 = property23.getAsText(locale24);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale24.getDisplayLanguage(locale29);
        java.lang.String str33 = dateTimeField12.getAsShortText((-309390889792694L), locale24);
        java.util.Set<java.lang.String> strSet34 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.util.Locale locale37 = new java.util.Locale("10");
        java.lang.String str38 = locale35.getDisplayLanguage(locale37);
        java.lang.String str39 = locale37.getDisplayLanguage();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str42 = locale37.getDisplayCountry(locale41);
        java.lang.String str43 = locale24.getDisplayCountry(locale41);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale14.toString(), "22 feb 2022 07:09:51 gmt");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (United States)" + "'", str25, "English (United States)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str27, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "10" + "'", str28, "10");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en" + "'", str30, "en");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English" + "'", str32, "English");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "10" + "'", str33, "10");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale37.toString(), "10");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English" + "'", str38, "English");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "10" + "'", str39, "10");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "United States" + "'", str43, "United States");
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.get();
        boolean boolean17 = interval8.equals((java.lang.Object) int16);
        org.joda.time.Interval interval18 = interval8.toInterval();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears((-1));
        org.joda.time.TimeOfDay timeOfDay26 = dateTime23.toTimeOfDay();
        org.joda.time.DateTime dateTime28 = dateTime23.minus(1645513774535L);
        boolean boolean29 = interval8.contains((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Interval interval30 = interval8.toInterval();
        org.joda.time.DateTime dateTime31 = interval30.getStart();
        org.joda.time.Period period32 = interval30.toPeriod();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        org.joda.time.DateTime dateTime46 = dateTime37.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime48 = dateTime37.minus((long) '#');
        org.joda.time.DateTime.Property property49 = dateTime37.weekyear();
        org.joda.time.DateTime dateTime51 = dateTime37.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(2922789);
        org.joda.time.DateTime dateTime55 = dateTime51.minusDays((int) 'u');
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) dateTime55);
        java.lang.String str57 = interval56.toString();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        org.joda.time.LocalTime localTime63 = dateTime62.toLocalTime();
        org.joda.time.DateTime.Property property64 = dateTime62.minuteOfHour();
        int int65 = property64.get();
        org.joda.time.Interval interval66 = property64.toInterval();
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localTime69.toDateTime(readableInstant70);
        org.joda.time.LocalTime localTime72 = dateTime71.toLocalTime();
        org.joda.time.DateTime.Property property73 = dateTime71.minuteOfHour();
        int int74 = property73.getMinimumValue();
        org.joda.time.DateTime dateTime75 = property73.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property76 = dateTime75.dayOfYear();
        boolean boolean77 = interval66.contains((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localTime80.toDateTime(readableInstant81);
        org.joda.time.LocalTime localTime83 = dateTime82.toLocalTime();
        org.joda.time.DateTime.Property property84 = dateTime82.minuteOfHour();
        java.lang.String str85 = property84.toString();
        org.joda.time.DateTime dateTime86 = property84.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.DateTime dateTime88 = dateTime86.minus(readableDuration87);
        org.joda.time.Interval interval89 = interval66.withStart((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Chronology chronology90 = interval89.getChronology();
        org.joda.time.PeriodType periodType91 = null;
        org.joda.time.Period period92 = interval89.toPeriod(periodType91);
        org.joda.time.Interval interval93 = interval89.toInterval();
        org.joda.time.Interval interval94 = interval89.toInterval();
        boolean boolean96 = interval94.contains((long) '4');
        org.joda.time.Interval interval97 = interval56.gap((org.joda.time.ReadableInterval) interval94);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2021-11-11T00:09:00.000+00:00:00.010/2021-11-11T00:10:00.000+00:00:00.010" + "'", str57, "2021-11-11T00:09:00.000+00:00:00.010/2021-11-11T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Property[minuteOfHour]" + "'", str85, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(interval97);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 122);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear(20);
        java.util.Locale locale9 = dateTimeFormatter8.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.052Z", dateTimeFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(locale9);
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 122);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = localTime8.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter5.withChronology(chronology11);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePartial) localTime30, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField33 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology21.minuteOfHour();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.get();
        org.joda.time.Interval interval43 = property41.toInterval();
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Period period45 = interval43.toPeriod();
        org.joda.time.DurationFieldType durationFieldType46 = null;
        int int47 = period45.get(durationFieldType46);
        int[] intArray49 = chronology21.get((org.joda.time.ReadablePeriod) period45, 1645513759720L);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        long long56 = chronology21.set((org.joda.time.ReadablePartial) localTime52, (long) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter5.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter57.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter57.withPivotYear(32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter57.withPivotYear(68);
        org.joda.time.Chronology chronology63 = dateTimeFormatter57.getChronolgy();
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromMillisOfDay((long) 198, chronology63);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 2720, 5, 7, 9, 19, 720]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 600000L + "'", long56 == 600000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(localTime64);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromDateFields(date1);
        int[] intArray3 = localTime2.getValues();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.LocalTime localTime16 = localTime14.plusHours((int) 'u');
        org.joda.time.LocalTime localTime18 = localTime14.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int24 = dateTimeZone22.getOffset((long) (byte) 1);
        long long26 = dateTimeZone20.getMillisKeepLocal(dateTimeZone22, (long) 3);
        long long29 = dateTimeZone20.convertLocalToUTC((long) 9, false);
        java.lang.String str30 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime31 = localTime18.toDateTimeToday(dateTimeZone20);
        java.util.Locale locale33 = java.util.Locale.US;
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.lang.String str38 = locale33.getDisplayCountry(locale37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale33);
        java.util.Locale locale40 = java.util.Locale.ITALY;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = locale33.getDisplayCountry(locale40);
        java.lang.String str43 = dateTimeZone20.getShortName((long) 59, locale33);
        org.joda.time.DateTime dateTime44 = localTime2.toDateTimeToday(dateTimeZone20);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        int int53 = localTime47.compareTo((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.LocalTime.Property property54 = localTime47.hourOfDay();
        org.joda.time.LocalTime localTime55 = property54.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property54.getFieldType();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
        int int63 = dateTime61.getMonthOfYear();
        int int64 = dateTime61.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, readablePeriod65);
        org.joda.time.DateTime dateTime68 = dateTime61.plusMinutes(5);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localTime71.toDateTime(readableInstant72);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int79 = dateTimeZone77.getOffset((long) (byte) 1);
        long long81 = dateTimeZone75.getMillisKeepLocal(dateTimeZone77, (long) 3);
        org.joda.time.DateTime dateTime82 = dateTime73.withZone(dateTimeZone75);
        org.joda.time.DateTime dateTime84 = dateTime73.minus((long) '#');
        org.joda.time.DateTime dateTime86 = dateTime84.plusMillis((int) (byte) -1);
        boolean boolean87 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime86);
        int int88 = property54.getDifference((org.joda.time.ReadableInstant) dateTime61);
        int int89 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime61);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3L + "'", long26 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "United States" + "'", str38, "United States");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645514349152,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=9,MILLISECOND=152,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Stati Uniti" + "'", str42, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-457079) + "'", int88 == (-457079));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = property6.addToCopy((long) 366);
        long long11 = property6.remainder();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        boolean boolean22 = property6.equals((java.lang.Object) dateTimeField21);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        int int31 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean33 = localTime25.isSupported(dateTimeFieldType32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localTime25.getFieldTypes();
        int int35 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.LocalTime localTime37 = localTime25.withSecondOfMinute(17);
        int int38 = localTime25.size();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime43.plusWeeks(0);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.getMinimumValue();
        org.joda.time.DateTime dateTime56 = property54.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime(dateTimeZone58);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int71 = dateTimeZone69.getOffset((long) (byte) 1);
        long long73 = dateTimeZone67.getMillisKeepLocal(dateTimeZone69, (long) 3);
        org.joda.time.DateTime dateTime74 = dateTime65.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime76 = dateTime65.minus((long) '#');
        org.joda.time.DateTime.Property property77 = dateTime65.weekyear();
        org.joda.time.DateTime dateTime79 = dateTime65.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime80 = dateTime65.toDateTime();
        org.joda.time.DateTime dateTime81 = dateTime65.withLaterOffsetAtOverlap();
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        org.joda.time.DateTime dateTime84 = dateTime81.withZoneRetainFields(dateTimeZone83);
        int int85 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime86 = dateTime43.toDateTime(dateTimeZone58);
        int int88 = dateTimeZone58.getOffsetFromLocal(1645488659989L);
        org.joda.time.DateTime dateTime89 = localTime25.toDateTimeToday(dateTimeZone58);
        long long91 = dateTimeZone58.previousTransition(0L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3L + "'", long73 == 3L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        boolean boolean9 = dateTimeZone3.equals((java.lang.Object) 1);
        java.lang.String str10 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(25774837L, (-1));
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.DateTime.Property property21 = dateTime19.minuteOfHour();
        java.lang.String str22 = property21.toString();
        org.joda.time.DateTime dateTime23 = property21.roundFloorCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds((int) '4');
        boolean boolean26 = dateTime23.isBeforeNow();
        boolean boolean27 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime23.withDate((-525948), 787, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 787 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[minuteOfHour]" + "'", str22, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfMonth();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime13.plusMinutes(5);
        int int21 = property8.getDifference((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime23 = property8.addToCopy(273);
        int int24 = dateTime23.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 2022, false, 1923264000000000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2012L + "'", long5 == 2012L);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime15 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property13.addCopy(599998);
        java.lang.String str18 = property13.toString();
        org.joda.time.LocalTime localTime19 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale27.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale27.getDisplayName(locale29);
        java.lang.String str31 = property26.getAsText(locale27);
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale27.getDisplayCountry(locale35);
        java.util.Locale.setDefault(locale35);
        java.lang.String str39 = property13.getAsText(locale35);
        java.lang.String str40 = locale35.getISO3Language();
        java.lang.String str41 = locale35.getScript();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[secondOfMinute]" + "'", str18, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (United States)" + "'", str28, "English (United States)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str30, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "United States" + "'", str37, "United States");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property13.getLocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfMonth();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.LocalTime localTime27 = localTime25.plusHours((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        boolean boolean37 = dateTimeFieldType28.isSupported(chronology35);
        boolean boolean38 = localTime25.isSupported(dateTimeFieldType28);
        int int39 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromMillisOfDay(1645513888388L, chronology41);
        org.joda.time.LocalTime localTime43 = localTime14.withFields((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (byte) 1, chronology50);
        org.joda.time.DateTime dateTime52 = localTime51.toDateTimeToday();
        org.joda.time.LocalTime localTime54 = localTime51.minusMinutes(1);
        org.joda.time.LocalTime.Property property55 = localTime51.millisOfDay();
        int int56 = localTime51.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean58 = localTime51.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getRangeDurationType();
        org.joda.time.LocalTime.Property property61 = localTime51.property(dateTimeFieldType59);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        int int70 = localTime64.compareTo((org.joda.time.ReadablePartial) localTime67);
        org.joda.time.LocalTime.Property property71 = localTime64.hourOfDay();
        org.joda.time.LocalTime localTime73 = property71.addCopy(6);
        org.joda.time.LocalTime localTime74 = property71.roundHalfCeilingCopy();
        int int75 = property71.get();
        org.joda.time.LocalTime localTime76 = property71.withMaximumValue();
        boolean boolean77 = property61.equals((java.lang.Object) property71);
        org.joda.time.LocalTime localTime78 = property71.roundFloorCopy();
        org.joda.time.LocalTime.Property property79 = localTime78.secondOfMinute();
        org.joda.time.LocalTime localTime80 = property79.roundFloorCopy();
        int int81 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime80);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.millis();
        org.joda.time.DurationField durationField29 = chronology27.centuries();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.centuryOfEra();
        long long33 = dateTimeField31.roundCeiling(6832004L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 946684799990L + "'", long33 == 946684799990L);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.US;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale2);
        java.util.Locale locale9 = java.util.Locale.ITALY;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale2.getDisplayCountry(locale9);
        java.util.Locale.setDefault(category0, locale2);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime20.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean26 = localTime24.isSupported(dateTimeFieldType25);
        org.joda.time.DateTime dateTime27 = dateTime17.withFields((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long35 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 3);
        long long38 = dateTimeZone29.convertLocalToUTC((long) 9, false);
        java.lang.String str39 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime40 = localTime24.toDateTimeToday(dateTimeZone29);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone29.getShortName((long) 100, locale42);
        boolean boolean44 = dateTimeZone29.isFixed();
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.lang.String str49 = dateTimeZone29.getName((long) 4, locale47);
        java.util.Locale.setDefault(category0, locale47);
        java.util.Locale locale51 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale51);
        java.util.Locale.setDefault(locale51);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale51);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "hours");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "United States" + "'", str7, "United States");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514349439,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=9,MILLISECOND=439,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Stati Uniti" + "'", str11, "Stati Uniti");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hours" + "'", str48, "hours");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "hours");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645514349439,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=9,MILLISECOND=439,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645514349439,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=9,MILLISECOND=439,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.millisOfDay();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(chronology5);
        org.joda.time.LocalTime localTime10 = localTime8.withMillisOfDay(1439);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.DateTime dateTime19 = localTime18.toDateTimeToday();
        org.joda.time.LocalTime localTime21 = localTime18.minusMinutes(1);
        org.joda.time.LocalTime.Property property22 = localTime18.millisOfDay();
        int int23 = localTime18.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean25 = localTime18.isSupported(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType24.getDurationType();
        int int27 = localTime10.get(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType24.getRangeDurationType();
        java.lang.String str29 = durationFieldType28.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "days" + "'", str29, "days");
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("07:15:10.001");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 122);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 1, chronology28);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePartial) localTime29, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology20.minuteOfHour();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.get();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Period period44 = interval42.toPeriod();
        org.joda.time.DurationFieldType durationFieldType45 = null;
        int int46 = period44.get(durationFieldType45);
        int[] intArray48 = chronology20.get((org.joda.time.ReadablePeriod) period44, 1645513759720L);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        long long55 = chronology20.set((org.joda.time.ReadablePartial) localTime51, (long) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter4.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField57 = chronology20.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 2720, 5, 7, 9, 19, 720]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 600000L + "'", long55 == 600000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        java.time.Instant instant2 = calendar0.toInstant();
        java.lang.String str3 = calendar0.getCalendarType();
        java.lang.String str4 = calendar0.getCalendarType();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514349513,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=9,MILLISECOND=513,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        java.lang.String str17 = property16.toString();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        long long21 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime23 = property9.roundHalfFloorCopy();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale.Builder builder26 = builder24.clearExtensions();
        java.util.Locale.Builder builder27 = builder24.clearExtensions();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale.Builder builder30 = builder28.setScript("");
        java.util.Locale locale31 = builder30.build();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        long long38 = dateTime36.getMillis();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        int int46 = property45.get();
        org.joda.time.Interval interval47 = property45.toInterval();
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        int int49 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime48.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime48.getZone();
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.lang.String str57 = locale56.toLanguageTag();
        java.lang.String str58 = dateTimeZone51.getName(1645488659990L, locale56);
        java.lang.String str60 = dateTimeZone51.getShortName(25760222L);
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.lang.String str65 = dateTimeZone51.getShortName(1645513770465L, locale63);
        java.util.Locale.Builder builder66 = builder30.setLocale(locale63);
        java.lang.String str67 = property9.getAsText(locale63);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[minuteOfHour]" + "'", str17, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645488599990L + "'", long38 == 1645488599990L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "und" + "'", str57, "und");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hours" + "'", str64, "hours");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "53" + "'", str67, "53");
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 122);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        int int24 = localTime18.compareTo((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean26 = localTime18.isSupported(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int32 = dateTimeZone30.getOffset((long) (byte) 1);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 3);
        org.joda.time.DateTime dateTime35 = localTime18.toDateTimeToday(dateTimeZone28);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter4.withZone(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withDefaultYear(59);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.weekyears();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = localTime50.getChronology();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (byte) 1, chronology53);
        int[] intArray56 = chronology45.get((org.joda.time.ReadablePartial) localTime54, (long) (short) -1);
        org.joda.time.DurationField durationField57 = chronology45.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = localTime62.getChronology();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) (byte) 1, chronology65);
        boolean boolean67 = dateTimeFieldType58.isSupported(chronology65);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.centuryOfEra();
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.now(chronology65);
        org.joda.time.LocalTime localTime71 = localTime69.minusHours(3780000);
        int[] intArray73 = chronology45.get((org.joda.time.ReadablePartial) localTime71, (long) 86399001);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter39.withChronology(chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter39.withPivotYear(1970);
        java.io.Writer writer77 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter76.printTo(writer77, (-61526450787820L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[23, 59, 59, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        int int13 = property9.get();
        org.joda.time.LocalTime localTime14 = property9.roundFloorCopy();
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property15.getLocalTime();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.LocalTime localTime7 = localTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = localTime5.indexOf(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = localTime5.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime16.minus((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime16.minusMinutes(100);
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        java.lang.String str32 = durationFieldType31.getName();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        int[] intArray49 = chronology38.get((org.joda.time.ReadablePartial) localTime47, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField50 = chronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology38.minuteOfHour();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        org.joda.time.DateTime.Property property58 = dateTime56.minuteOfHour();
        int int59 = property58.get();
        org.joda.time.Interval interval60 = property58.toInterval();
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.Period period62 = interval60.toPeriod();
        org.joda.time.DurationFieldType durationFieldType63 = null;
        int int64 = period62.get(durationFieldType63);
        int[] intArray66 = chronology38.get((org.joda.time.ReadablePeriod) period62, 1645513759720L);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localTime69.toDateTime(readableInstant70);
        long long73 = chronology38.set((org.joda.time.ReadablePartial) localTime69, (long) 'x');
        org.joda.time.DurationField durationField74 = durationFieldType31.getField(chronology38);
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((java.lang.Object) dateTime16, chronology38);
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime(chronology38);
        org.joda.time.DateTimeField dateTimeField77 = chronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField78 = chronology38.dayOfYear();
        long long80 = dateTimeField78.roundFloor((-2678399722L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "days" + "'", str32, "days");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 2720, 5, 7, 9, 19, 720]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 600000L + "'", long73 == 600000L);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-2678400000L) + "'", long80 == (-2678400000L));
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Period period20 = interval18.toPeriod();
        java.lang.String str21 = interval18.toString();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        int int29 = property28.get();
        org.joda.time.Interval interval30 = property28.toInterval();
        org.joda.time.Interval interval31 = interval30.toInterval();
        long long32 = interval30.toDurationMillis();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval30.toPeriod(periodType33);
        org.joda.time.Interval interval35 = interval18.overlap((org.joda.time.ReadableInterval) interval30);
        boolean boolean36 = interval8.contains((org.joda.time.ReadableInterval) interval35);
        long long37 = interval35.toDurationMillis();
        long long38 = interval35.getEndMillis();
        long long39 = interval35.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str21, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 60000L + "'", long32 == 60000L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 60000L + "'", long37 == 60000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645488659990L + "'", long38 == 1645488659990L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 60000L + "'", long39 == 60000L);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        long long6 = dateTime4.getMillis();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.DateTime.Property property13 = dateTime11.minuteOfHour();
        int int14 = property13.get();
        org.joda.time.Interval interval15 = property13.toInterval();
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime16.getZone();
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.lang.String str25 = locale24.toLanguageTag();
        java.lang.String str26 = dateTimeZone19.getName(1645488659990L, locale24);
        java.lang.String str28 = dateTimeZone19.getShortName(25760222L);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = dateTimeZone19.getShortName(1645513770465L, locale31);
        boolean boolean35 = dateTimeZone19.isStandardOffset(9223372003046400035L);
        boolean boolean36 = dateTimeZone19.isFixed();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime43.plusWeeks(0);
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.secondOfDay();
        long long52 = dateTimeField49.addWrapField(1L, 8);
        long long55 = dateTimeField49.add(25200117L, 5);
        org.joda.time.DurationField durationField56 = dateTimeField49.getLeapDurationField();
        boolean boolean57 = localTime38.equals((java.lang.Object) durationField56);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488599990L + "'", long6 == 1645488599990L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "und" + "'", str25, "und");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hours" + "'", str32, "hours");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 8001L + "'", long52 == 8001L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 25205117L + "'", long55 == 25205117L);
        org.junit.Assert.assertNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology5.getDateTimeMillis((-5999996), 236, 773, 26200526, (-457056), 26, 4017);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26200526 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(42L);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        int int8 = dateTime6.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime6.withHourOfDay(2);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withYear((-1));
        boolean boolean15 = dateTime10.isBefore((long) 10);
        org.joda.time.DateTime.Property property16 = dateTime10.weekOfWeekyear();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.get();
        org.joda.time.Interval interval25 = property23.toInterval();
        org.joda.time.Interval interval26 = interval25.toInterval();
        long long27 = interval25.toDurationMillis();
        org.joda.time.Interval interval29 = interval25.withStartMillis(10L);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 1, chronology36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology36);
        org.joda.time.Interval interval39 = interval25.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField40.getType();
        java.lang.String str42 = dateTimeFieldType41.toString();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) (byte) 1, chronology56);
        int[] intArray59 = chronology48.get((org.joda.time.ReadablePartial) localTime57, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField60 = chronology48.dayOfYear();
        org.joda.time.DurationField durationField61 = chronology48.centuries();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType41.getField(chronology48);
        org.joda.time.DateTime.Property property63 = dateTime10.property(dateTimeFieldType41);
        int int64 = localTime1.get(dateTimeFieldType41);
        org.joda.time.LocalTime localTime66 = localTime1.plusHours((-599998));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType68 = localTime66.getFieldType(489);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 489");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hourOfHalfday" + "'", str42, "hourOfHalfday");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localTime66);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime4.withWeekyear(15);
        org.joda.time.DateTime dateTime23 = dateTime4.minusDays(122);
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        java.lang.String str25 = property24.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property24.getFieldType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfDay" + "'", str25, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("DateTimeField[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[millisOfSecond]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.LocalTime localTime14 = localTime12.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        int int16 = localTime12.indexOf(dateTimeFieldType15);
        org.joda.time.LocalTime localTime18 = localTime12.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 1, chronology32);
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePartial) localTime33, (long) (short) -1);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.DateTime.Property property42 = dateTime40.minuteOfHour();
        int int43 = property42.get();
        org.joda.time.Interval interval44 = property42.toInterval();
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Period period46 = interval44.toPeriod();
        org.joda.time.LocalTime localTime48 = localTime33.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 17);
        org.joda.time.Period period49 = period46.toPeriod();
        org.joda.time.LocalTime localTime51 = localTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int53 = localTime51.get(dateTimeFieldType52);
        int int54 = dateTime4.get(dateTimeFieldType52);
        int int55 = dateTime4.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3780000 + "'", int53 == 3780000);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 600000 + "'", int54 == 600000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20 + "'", int55 == 20);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = property6.getAsText(locale12);
        org.joda.time.DateTime dateTime15 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime16 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime17 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) (short) -1);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weekyears();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        int[] intArray36 = chronology25.get((org.joda.time.ReadablePartial) localTime34, (long) (short) -1);
        org.joda.time.DurationField durationField37 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology25.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField38.getType();
        int int40 = dateTime17.get(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (United States)" + "'", str8, "English (United States)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CN" + "'", str13, "CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        java.lang.String str7 = localTime2.toString();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime23 = dateTime12.minus((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime12.minusMinutes(100);
        org.joda.time.TimeOfDay timeOfDay26 = dateTime12.toTimeOfDay();
        java.lang.String str27 = dateTime12.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean29 = dateTime12.isSupported(dateTimeFieldType28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property30 = localTime2.property(dateTimeFieldType28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:10:00.000" + "'", str7, "00:10:00.000");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010" + "'", str27, "2022-02-22T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.plus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTimeToday(dateTimeZone17);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.joda.time.DateTime.Property property37 = dateTime35.minuteOfHour();
        int int38 = property37.get();
        org.joda.time.Interval interval39 = property37.toInterval();
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        int int48 = property47.get();
        org.joda.time.Interval interval49 = property47.toInterval();
        org.joda.time.Interval interval50 = interval49.toInterval();
        boolean boolean51 = interval40.isBefore((org.joda.time.ReadableInterval) interval49);
        boolean boolean52 = interval29.isAfter((org.joda.time.ReadableInterval) interval40);
        long long53 = interval40.getEndMillis();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645488659990L + "'", long53 == 1645488659990L);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(1970, (int) (short) -1, (int) (short) 0);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        int[] intArray21 = chronology10.get((org.joda.time.ReadablePartial) localTime19, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology10.clockhourOfDay();
        org.joda.time.DurationField durationField23 = chronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology10.getZone();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        java.util.Calendar.Builder builder26 = builder0.setTimeZone(timeZone25);
        java.util.Calendar.Builder builder30 = builder0.setDate(14, 22200000, 52);
        java.util.Calendar.Builder builder35 = builder0.setTimeOfDay(0, 27425232, 0, 958);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval31.toPeriod(periodType33);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.removeUnicodeLocaleAttribute("weekyear");
        boolean boolean38 = interval31.equals((java.lang.Object) builder37);
        org.joda.time.Chronology chronology39 = interval31.getChronology();
        org.joda.time.DateTime dateTime40 = interval31.getStart();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        int int48 = property47.get();
        org.joda.time.Interval interval49 = property47.toInterval();
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Period period51 = interval49.toPeriod();
        java.lang.String str52 = interval49.toString();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.LocalTime localTime58 = dateTime57.toLocalTime();
        org.joda.time.DateTime.Property property59 = dateTime57.minuteOfHour();
        int int60 = property59.get();
        org.joda.time.Interval interval61 = property59.toInterval();
        org.joda.time.Interval interval62 = interval61.toInterval();
        long long63 = interval61.toDurationMillis();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval61.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval49.overlap((org.joda.time.ReadableInterval) interval61);
        org.joda.time.DateTime dateTime67 = interval66.getEnd();
        org.joda.time.Interval interval68 = interval31.withStart((org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str52, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 60000L + "'", long63 == 60000L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime5.plusWeeks(0);
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1645513793488L, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology10.getZone();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.DateTime dateTime10 = dateTime8.minus(0L);
        org.joda.time.DateTime dateTime12 = dateTime8.plusMonths(366);
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(11);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        int int24 = localTime18.compareTo((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean26 = localTime18.isSupported(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int32 = dateTimeZone30.getOffset((long) (byte) 1);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 3);
        org.joda.time.DateTime dateTime35 = localTime18.toDateTimeToday(dateTimeZone28);
        boolean boolean36 = dateTime35.isAfterNow();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weekyears();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (byte) 1, chronology50);
        int[] intArray53 = chronology42.get((org.joda.time.ReadablePartial) localTime51, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField54 = chronology42.dayOfYear();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime.Property property61 = dateTime59.minuteOfHour();
        int int62 = property61.get();
        org.joda.time.Interval interval63 = property61.toInterval();
        org.joda.time.DateTime dateTime64 = interval63.getEnd();
        org.joda.time.Period period65 = interval63.toPeriod();
        int[] intArray67 = chronology42.get((org.joda.time.ReadablePeriod) period65, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int73 = dateTimeZone71.getOffset((long) (byte) 1);
        long long75 = dateTimeZone69.getMillisKeepLocal(dateTimeZone71, (long) 3);
        long long78 = dateTimeZone69.convertLocalToUTC((long) 9, false);
        java.lang.String str79 = dateTimeZone69.toString();
        org.joda.time.Chronology chronology80 = chronology42.withZone(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField81 = chronology42.centuryOfEra();
        org.joda.time.DurationField durationField82 = chronology42.weekyears();
        boolean boolean83 = dateTime35.equals((java.lang.Object) chronology42);
        org.joda.time.DateTime dateTime84 = dateTime13.toDateTime(chronology42);
        int int85 = dateTime84.getWeekyear();
        org.joda.time.DateTime dateTime87 = dateTime84.minusDays(59);
        java.lang.String str88 = dateTime84.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 3L + "'", long75 == 3L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.010" + "'", str79, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2022 + "'", int85 == 2022);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-21T23:59:59.991Z" + "'", str88, "2022-02-21T23:59:59.991Z");
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime.Property property8 = dateTime6.minuteOfHour();
        int int9 = property8.get();
        org.joda.time.Interval interval10 = property8.toInterval();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.getMinimumValue();
        org.joda.time.DateTime dateTime19 = property17.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        boolean boolean21 = interval10.contains((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        java.lang.String str29 = property28.toString();
        org.joda.time.DateTime dateTime30 = property28.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.Interval interval33 = interval10.withStart((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration34 = interval10.toDuration();
        java.lang.String str35 = duration34.toString();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.DateTime.Property property42 = dateTime40.minuteOfHour();
        int int43 = property42.get();
        org.joda.time.Interval interval44 = property42.toInterval();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        org.joda.time.DateTime.Property property51 = dateTime49.minuteOfHour();
        int int52 = property51.getMinimumValue();
        org.joda.time.DateTime dateTime53 = property51.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfYear();
        boolean boolean55 = interval44.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        java.lang.String str63 = property62.toString();
        org.joda.time.DateTime dateTime64 = property62.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.minus(readableDuration65);
        org.joda.time.Interval interval67 = interval44.withStart((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration68 = interval44.toDuration();
        java.lang.String str69 = duration68.toString();
        boolean boolean70 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Instant instant71 = instant1.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period72 = duration34.toPeriod();
        org.joda.time.Period period73 = period72.toPeriod();
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localTime76.toDateTime(readableInstant77);
        org.joda.time.LocalTime localTime79 = dateTime78.toLocalTime();
        int int80 = dateTime78.getMonthOfYear();
        int int81 = dateTime78.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime78, readablePeriod82);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = localTime86.toDateTime(readableInstant87);
        org.joda.time.DateTime dateTime90 = dateTime88.plusYears((-1));
        org.joda.time.TimeOfDay timeOfDay91 = dateTime88.toTimeOfDay();
        org.joda.time.Interval interval92 = interval83.withStart((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime((java.lang.Object) dateTime88);
        org.joda.time.Interval interval94 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period72, (org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[minuteOfHour]" + "'", str29, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT60S" + "'", str35, "PT60S");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Property[minuteOfHour]" + "'", str63, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT60S" + "'", str69, "PT60S");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(timeOfDay91);
        org.junit.Assert.assertNotNull(interval92);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        calendar0.set(53, (int) (short) 0, 5, 53, 6);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = calendar0.getDisplayName(0, 1, locale14);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePartial) localTime31, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.clockhourOfDay();
        org.joda.time.DurationField durationField35 = chronology22.seconds();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology22.getZone();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        calendar0.setTimeZone(timeZone37);
        calendar0.setTimeInMillis((long) 22);
        calendar0.setTimeInMillis((-1724544000000L));
        calendar0.setMinimalDaysInFirstWeek(5478);
        boolean boolean45 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1724544000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=5478,ERA=1,YEAR=1915,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=130,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hours" + "'", str15, "hours");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AD" + "'", str16, "AD");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getMinimum(2);
        int int5 = calendar0.getGreatestMinimum(0);
        calendar0.set((int) (byte) -1, 2, 600000, 2, 15, (int) '#');
        int int13 = calendar0.getWeeksInWeekYear();
        java.util.Date date15 = new java.util.Date((long) (byte) 100);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromDateFields(date15);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((-1));
        org.joda.time.DateTime dateTime24 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime.Property property25 = dateTime21.dayOfYear();
        org.joda.time.DateTime dateTime27 = dateTime21.plusMonths(2022);
        int int28 = dateTime21.getMinuteOfDay();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        org.joda.time.DateTime dateTime42 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime44 = dateTime33.minus((long) '#');
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        boolean boolean46 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.plus(readablePeriod47);
        boolean boolean49 = calendar0.before((java.lang.Object) dateTime44);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        int int58 = localTime52.compareTo((org.joda.time.ReadablePartial) localTime55);
        org.joda.time.LocalTime.Property property59 = localTime52.hourOfDay();
        org.joda.time.LocalTime localTime61 = property59.addCopy(6);
        int int62 = localTime61.getSecondOfMinute();
        org.joda.time.LocalTime.Property property63 = localTime61.secondOfMinute();
        org.joda.time.LocalTime localTime65 = localTime61.withSecondOfMinute(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int67 = localTime61.indexOf(dateTimeFieldType66);
        org.joda.time.DateTime.Property property68 = dateTime44.property(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-1,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=600000,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=2,MINUTE=15,SECOND=35,MILLISECOND=129,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime10 = property9.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField12.set(26132506L, (-4));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.LocalTime localTime23 = localTime21.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        int int25 = localTime21.indexOf(dateTimeFieldType24);
        org.joda.time.LocalTime localTime27 = localTime21.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (byte) 1, chronology41);
        int[] intArray44 = chronology33.get((org.joda.time.ReadablePartial) localTime42, (long) (short) -1);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        org.joda.time.DateTime.Property property51 = dateTime49.minuteOfHour();
        int int52 = property51.get();
        org.joda.time.Interval interval53 = property51.toInterval();
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Period period55 = interval53.toPeriod();
        org.joda.time.LocalTime localTime57 = localTime42.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 17);
        org.joda.time.Period period58 = period55.toPeriod();
        org.joda.time.LocalTime localTime60 = localTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int62 = localTime60.get(dateTimeFieldType61);
        int int63 = dateTime13.get(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.Chronology chronology70 = localTime67.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.weekyears();
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localTime75.toDateTime(readableInstant76);
        org.joda.time.Chronology chronology78 = localTime75.getChronology();
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((long) (byte) 1, chronology78);
        int[] intArray81 = chronology70.get((org.joda.time.ReadablePartial) localTime79, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField82 = chronology70.dayOfYear();
        org.joda.time.DurationField durationField83 = durationFieldType64.getField(chronology70);
        org.joda.time.DurationField durationField84 = chronology70.minutes();
        org.joda.time.DateTimeField dateTimeField85 = chronology70.halfdayOfDay();
        boolean boolean86 = dateTimeFieldType61.isSupported(chronology70);
        org.joda.time.DateTimeZone dateTimeZone87 = chronology70.getZone();
        org.joda.time.Chronology chronology88 = chronology5.withZone(dateTimeZone87);
        int int90 = dateTimeZone87.getOffset((long) 86340);
        java.lang.String str92 = dateTimeZone87.getName(1645513991608L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3780000 + "'", int62 == 3780000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 600000 + "'", int63 == 600000);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+00:00" + "'", str92, "+00:00");
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        java.util.Date date1 = new java.util.Date((-5923760471977564331L));
        java.util.Date date5 = new java.util.Date(15, 4, 10);
        java.lang.String str6 = date5.toGMTString();
        date5.setYear(25845996);
        boolean boolean9 = date1.before(date5);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Dec 10 06:13:55 UTC 187710674");
        org.junit.Assert.assertEquals(date5.toString(), "Sun May 10 00:00:00 UTC 25847896");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10 May 1915 00:00:00 GMT" + "'", str6, "10 May 1915 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.weekyear();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 5, chronology7);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.Period period30 = interval29.toPeriod();
        org.joda.time.DateTime dateTime31 = dateTime20.plus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((java.lang.Object) 120, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.getLocalTime();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("");
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = property9.getAsText(locale15);
        int int18 = property9.getMinimumValueOverall();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        int int27 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.LocalTime.Property property28 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime30 = property28.addCopy(6);
        int int31 = localTime30.getSecondOfMinute();
        org.joda.time.LocalTime.Property property32 = localTime30.secondOfMinute();
        org.joda.time.LocalTime localTime33 = property32.getLocalTime();
        org.joda.time.LocalTime localTime34 = property32.getLocalTime();
        int int35 = property9.compareTo((org.joda.time.ReadablePartial) localTime34);
        int int36 = property9.getMaximumValueOverall();
        org.joda.time.LocalTime localTime38 = property9.addWrapFieldToCopy((-457079));
        int int39 = property9.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        java.time.Instant instant5 = calendar0.toInstant();
        calendar0.clear();
        calendar0.setLenient(false);
        calendar0.setFirstDayOfWeek(1645488539);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        boolean boolean12 = calendar11.isWeekDateSupported();
        java.util.TimeZone timeZone13 = calendar11.getTimeZone();
        calendar0.setTimeZone(timeZone13);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1645488539,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514350275,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=10,MILLISECOND=275,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime4.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime4.plus(readablePeriod18);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        boolean boolean29 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime28.minusMinutes(273);
        long long32 = dateTime28.getMillis();
        org.joda.time.DateTime.Property property33 = dateTime28.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645488599990L + "'", long32 == 1645488599990L);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Date date7 = calendar6.getTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 1, chronology21);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePartial) localTime22, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField26 = chronology13.seconds();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology13.getZone();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        calendar6.setTimeZone(timeZone28);
        calendar6.setMinimalDaysInFirstWeek(600000);
        int int33 = calendar6.getWeeksInWeekYear();
        int int35 = calendar6.getGreatestMinimum(0);
        java.util.Date date36 = calendar6.getTime();
        int int37 = date36.getTimezoneOffset();
        long long38 = date36.getTime();
        long long39 = date36.getTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514350322,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=600000,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=10,MILLISECOND=322,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:19:10 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Feb 22 07:19:10 UTC 2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514350322L + "'", long38 == 1645514350322L);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514350322L + "'", long39 == 1645514350322L);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.clockhourOfHalfday();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        int int15 = dateTimeField13.getMaximumTextLength(locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        boolean boolean25 = dateTimeFieldType16.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        int int35 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateTime dateTime36 = localTime34.toDateTimeToday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int40 = dateTimeZone38.getOffset((long) (byte) 1);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(dateTimeZone38);
        org.joda.time.LocalTime localTime43 = localTime41.withMillisOfSecond((int) (short) 100);
        boolean boolean44 = localTime34.isBefore((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.LocalTime localTime46 = localTime43.withMillisOfDay(86340);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = localTime51.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) (byte) 1, chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.dayOfMonth();
        org.joda.time.Chronology chronology58 = chronology54.withUTC();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = localTime62.getChronology();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) (byte) 1, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.dayOfMonth();
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.now(chronology65);
        org.joda.time.LocalTime localTime71 = localTime69.plusHours((int) 'u');
        org.joda.time.LocalTime localTime73 = localTime69.withMillisOfSecond(1);
        int[] intArray75 = chronology58.get((org.joda.time.ReadablePartial) localTime73, 1645546627089L);
        java.util.Locale locale77 = java.util.Locale.US;
        java.util.Locale locale78 = locale77.stripExtensions();
        java.lang.String str79 = locale77.getISO3Language();
        java.lang.String str80 = locale77.getISO3Country();
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = localTime83.toDateTime(readableInstant84);
        org.joda.time.LocalTime localTime86 = dateTime85.toLocalTime();
        org.joda.time.DateTime.Property property87 = dateTime85.minuteOfHour();
        java.util.Locale locale88 = java.util.Locale.US;
        java.lang.String str89 = locale88.getDisplayName();
        java.util.Locale locale90 = java.util.Locale.GERMAN;
        java.lang.String str91 = locale88.getDisplayName(locale90);
        java.lang.String str92 = property87.getAsText(locale88);
        java.util.Locale locale93 = java.util.Locale.ENGLISH;
        java.lang.String str94 = locale93.getLanguage();
        java.util.Set<java.lang.String> strSet95 = locale93.getUnicodeLocaleKeys();
        java.lang.String str96 = locale88.getDisplayLanguage(locale93);
        java.lang.String str97 = locale88.getDisplayLanguage();
        java.lang.String str98 = locale77.getDisplayLanguage(locale88);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField13.set((org.joda.time.ReadablePartial) localTime46, 29704667, intArray75, "", locale88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2922789 + "'", int35 == 2922789);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[16, 17, 7, 89]");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "eng" + "'", str79, "eng");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "USA" + "'", str80, "USA");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "English (United States)" + "'", str89, "English (United States)");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str91, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "10" + "'", str92, "10");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "en" + "'", str94, "en");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "English" + "'", str96, "English");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "English" + "'", str97, "English");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "English" + "'", str98, "English");
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.LocalTime localTime7 = localTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = localTime5.indexOf(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = localTime5.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePartial) localTime26, (long) (short) -1);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.get();
        org.joda.time.Interval interval37 = property35.toInterval();
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Period period39 = interval37.toPeriod();
        org.joda.time.LocalTime localTime41 = localTime26.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 17);
        org.joda.time.Period period42 = period39.toPeriod();
        org.joda.time.LocalTime localTime44 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 53);
        org.joda.time.LocalTime localTime46 = localTime11.withMillisOfDay(0);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.LocalTime localTime52 = dateTime51.toLocalTime();
        int int53 = dateTime51.getMonthOfYear();
        int int54 = dateTime51.getHourOfDay();
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone57.isLocalDateTimeGap(localDateTime58);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime(dateTimeZone57);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.LocalTime localTime66 = dateTime65.toLocalTime();
        int int67 = dateTime65.getMonthOfYear();
        int int68 = dateTime65.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int74 = dateTimeZone72.getOffset((long) (byte) 1);
        long long76 = dateTimeZone70.getMillisKeepLocal(dateTimeZone72, (long) 3);
        org.joda.time.DateTime dateTime77 = dateTime65.toDateTime(dateTimeZone70);
        org.joda.time.DateTime dateTime79 = dateTime77.withYearOfCentury((int) '4');
        org.joda.time.DateTime.Property property80 = dateTime79.year();
        boolean boolean81 = localTime60.equals((java.lang.Object) property80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property80.getFieldType();
        org.joda.time.DateTime.Property property83 = dateTime51.property(dateTimeFieldType82);
        org.joda.time.MutableDateTime mutableDateTime84 = dateTime51.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int86 = dateTime51.get(dateTimeFieldType85);
        java.lang.String str87 = dateTimeFieldType85.toString();
        boolean boolean88 = localTime46.isSupported(dateTimeFieldType85);
        org.joda.time.LocalTime.Property property89 = localTime46.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 3L + "'", long76 == 3L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 600000 + "'", int86 == 600000);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "millisOfDay" + "'", str87, "millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval31.toPeriod(periodType33);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.removeUnicodeLocaleAttribute("weekyear");
        boolean boolean38 = interval31.equals((java.lang.Object) builder37);
        java.util.Locale.Builder builder39 = builder37.clearExtensions();
        java.util.Locale.Builder builder40 = builder39.clear();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        int int48 = property47.getMinimumValue();
        org.joda.time.DateTime dateTime49 = property47.roundFloorCopy();
        org.joda.time.DateTime dateTime50 = property47.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int57 = dateTimeZone55.getOffset((long) (byte) 1);
        long long59 = dateTimeZone53.getMillisKeepLocal(dateTimeZone55, (long) 3);
        long long63 = dateTimeZone53.convertLocalToUTC((long) '4', false, 600000L);
        long long66 = dateTimeZone53.convertLocalToUTC((long) 600000, false);
        org.joda.time.DateTime dateTime67 = dateTime50.toDateTime(dateTimeZone53);
        java.lang.String str69 = dateTimeZone53.getName(1645513794254L);
        long long71 = dateTimeZone53.convertUTCToLocal(4320600000L);
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.lang.String str74 = locale73.getLanguage();
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleKeys();
        java.util.Locale locale76 = java.util.Locale.US;
        java.util.Locale locale77 = locale76.stripExtensions();
        boolean boolean78 = locale77.hasExtensions();
        java.lang.String str79 = locale73.getDisplayLanguage(locale77);
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale73);
        java.lang.String str81 = dateTimeZone53.getName(1645513820819L, locale73);
        java.lang.String str82 = locale73.getISO3Language();
        java.util.Locale.Builder builder83 = builder39.setLocale(locale73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder85 = builder83.setScript("Property[weekyear]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Property[weekyear] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 3L + "'", long59 == 3L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 42L + "'", long63 == 42L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 599990L + "'", long66 == 599990L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4320600010L + "'", long71 == 4320600010L);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "en" + "'", str74, "en");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "English" + "'", str79, "English");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1645514350434,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=10,MILLISECOND=434,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "eng" + "'", str82, "eng");
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = locale12.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.lang.String str16 = property11.getAsText(locale12);
        java.util.Locale.Builder builder17 = builder3.setLocale(locale12);
        java.util.Locale locale18 = builder17.build();
        java.util.Locale.Builder builder19 = builder17.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder20.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder20.addUnicodeLocaleAttribute("07:14:10.663");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 07:14:10.663 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (United States)" + "'", str13, "English (United States)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str15, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10" + "'", str16, "10");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.MutableInterval mutableInterval21 = interval18.toMutableInterval();
        boolean boolean22 = interval18.containsNow();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        org.joda.time.DateTime dateTime31 = localTime30.toDateTimeToday();
        org.joda.time.LocalTime localTime33 = localTime30.minusMinutes(1);
        org.joda.time.LocalTime.Property property34 = localTime30.millisOfDay();
        int int35 = localTime30.getMillisOfDay();
        org.joda.time.DateTime dateTime36 = localTime30.toDateTimeToday();
        int int37 = dateTime36.getWeekyear();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = localTime41.getChronology();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfHalfday();
        int int48 = dateTimeField46.getMaximumValue(3L);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField46.getType();
        org.joda.time.DateTime.Property property50 = dateTime36.property(dateTimeFieldType49);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = null;
        org.joda.time.format.DateTimeParser dateTimeParser52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter53.withPivotYear((java.lang.Integer) 122);
        org.joda.time.Chronology chronology56 = dateTimeFormatter53.getChronology();
        java.util.Locale locale58 = new java.util.Locale("weekyear");
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter53.withLocale(locale58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter61.withPivotYear(7);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.Chronology chronology70 = localTime67.getChronology();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) (byte) 1, chronology70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology70);
        org.joda.time.DateTimeField dateTimeField73 = chronology70.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter61.withChronology(chronology70);
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType49.getField(chronology70);
        boolean boolean76 = interval18.equals((java.lang.Object) chronology70);
        org.joda.time.DateTimeField dateTimeField77 = chronology70.yearOfEra();
        org.joda.time.DurationField durationField78 = chronology70.years();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNull(chronology56);
        org.junit.Assert.assertEquals(locale58.toString(), "weekyear");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        int int27 = dateTime24.getMillisOfDay();
        org.joda.time.DateTime.Property property28 = dateTime24.year();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime24.plus(readablePeriod29);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 600000 + "'", int27 == 600000);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.weekyear();
        org.joda.time.DurationField durationField15 = chronology7.centuries();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean10 = localTime2.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int16 = dateTimeZone14.getOffset((long) (byte) 1);
        long long18 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 3);
        org.joda.time.DateTime dateTime19 = localTime2.toDateTimeToday(dateTimeZone12);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone12);
        int int23 = dateTimeZone12.getStandardOffset(3L);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.DateTime dateTime26 = localTime25.toDateTimeToday();
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        org.joda.time.DateTime dateTime29 = dateTime26.plusDays(86399999);
        org.joda.time.DateTime.Property property30 = dateTime29.weekyear();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        java.util.Date date1 = new java.util.Date((-113865L));
        java.lang.String str2 = date1.toLocaleString();
        date1.setMonth(38);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Mar 31 23:58:06 UTC 1972");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Dec 31, 1969 11:58:06 PM" + "'", str2, "Dec 31, 1969 11:58:06 PM");
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 4);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = localTime10.withMillisOfSecond(22);
        int int13 = localTime12.getSecondOfMinute();
        org.joda.time.DateTime dateTime14 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology20.getZone();
        java.util.Date date26 = new java.util.Date((long) (byte) 100);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromDateFields(date26);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((-1));
        org.joda.time.DateTime dateTime35 = localTime27.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        boolean boolean37 = localTime27.isSupported(dateTimeFieldType36);
        int[] intArray39 = chronology20.get((org.joda.time.ReadablePartial) localTime27, 25771537L);
        org.joda.time.LocalTime.Property property40 = localTime27.secondOfMinute();
        org.joda.time.LocalTime localTime42 = property40.addNoWrapToCopy(3);
        java.lang.String str43 = property40.getAsShortText();
        org.joda.time.DateTimeField dateTimeField44 = property40.getField();
        int int47 = dateTimeField44.getDifference(1645513940336L, (long) 14955016);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField44.getType();
        int int49 = localTime12.indexOf(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[7, 9, 31, 537]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1645498985 + "'", int47 == 1645498985);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime(dateTimeZone19);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int32 = dateTimeZone30.getOffset((long) (byte) 1);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 3);
        org.joda.time.DateTime dateTime35 = dateTime26.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = dateTime26.minus((long) '#');
        org.joda.time.DateTime.Property property38 = dateTime26.weekyear();
        org.joda.time.DateTime dateTime40 = dateTime26.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime26.toDateTime();
        org.joda.time.DateTime dateTime42 = dateTime26.withLaterOffsetAtOverlap();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTime dateTime45 = dateTime42.withZoneRetainFields(dateTimeZone44);
        int int46 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = dateTime4.toDateTime(dateTimeZone19);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.get();
        org.joda.time.Interval interval56 = property54.toInterval();
        org.joda.time.DateTime dateTime58 = property54.addToCopy(9);
        int int59 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime58);
        java.lang.String str61 = dateTimeZone19.getNameKey((-419L));
        java.lang.String str63 = dateTimeZone19.getShortName(1645514095695L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.010" + "'", str63, "+00:00:00.010");
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(9, 14, 13);
        java.util.Calendar calendar5 = builder0.build();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localTime21, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField24 = chronology12.weekyear();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 5, chronology12);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.DateTime.Property property32 = dateTime30.minuteOfHour();
        int int33 = property32.get();
        org.joda.time.Interval interval34 = property32.toInterval();
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) period35);
        java.util.GregorianCalendar gregorianCalendar37 = dateTime36.toGregorianCalendar();
        gregorianCalendar37.set((int) 'a', 17, 2, 59, 2922789);
        gregorianCalendar37.set(13, 540, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int51 = dateTimeZone49.getOffsetFromLocal(0L);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(dateTimeZone49);
        java.util.TimeZone timeZone53 = dateTimeZone49.toTimeZone();
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale58 = locale57.stripExtensions();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone53, locale58);
        gregorianCalendar37.setTimeZone(timeZone53);
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone53);
        java.util.Locale locale63 = new java.util.Locale("+00:00:00.010");
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.lang.String str65 = locale63.getDisplayCountry(locale64);
        java.util.Locale locale66 = locale64.stripExtensions();
        java.lang.String str67 = locale64.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet68 = locale64.getExtensionKeys();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone53, locale64);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=33253000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=14,SECOND=13,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "_HI!");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645514350790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=10,MILLISECOND=800,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals(locale63.toString(), "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645514350790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=10,MILLISECOND=800,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.millisOfDay();
        long long29 = chronology19.getDateTimeMillis(292278993, 7, 22, (int) '#');
        org.joda.time.DateTimeField dateTimeField30 = chronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology19.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372003046400035L + "'", long29 == 9223372003046400035L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        boolean boolean9 = dateTimeZone3.equals((java.lang.Object) 1);
        long long13 = dateTimeZone3.convertLocalToUTC(1970L, false, 345600000L);
        long long16 = dateTimeZone3.convertLocalToUTC((long) 100, false);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        java.lang.String str25 = property24.toString();
        org.joda.time.DateTime dateTime26 = property24.roundFloorCopy();
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds((int) '4');
        long long29 = dateTime26.getMillis();
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property31 = dateTime26.monthOfYear();
        org.joda.time.DateTime dateTime33 = property31.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime35 = property31.addToCopy(0);
        org.joda.time.DateTime dateTime37 = property31.addWrapFieldToCopy(823);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1960L + "'", long13 == 1960L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 90L + "'", long16 == 90L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[minuteOfHour]" + "'", str25, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645488599990L + "'", long29 == 1645488599990L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime18 = dateTime4.withMonthOfYear(3);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        int int25 = dateTime23.getMonthOfYear();
        int int26 = dateTime23.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int32 = dateTimeZone30.getOffset((long) (byte) 1);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 3);
        org.joda.time.DateTime dateTime35 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime36 = dateTime4.toDateTime(dateTimeZone28);
        org.joda.time.DateTime.Property property37 = dateTime4.era();
        org.joda.time.DateTime dateTime39 = dateTime4.plus((long) '4');
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        java.lang.String str6 = dateTimeZone2.getNameKey((-419L));
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(25792139L, dateTimeZone2);
        org.joda.time.LocalTime localTime9 = localTime7.plusMinutes(25837734);
        org.joda.time.DateTimeField dateTimeField11 = localTime9.getField((int) (byte) 1);
        long long13 = dateTimeField11.roundHalfFloor((-60494237584371L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60494237580000L) + "'", long13 == (-60494237580000L));
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.getMinimumValue();
        org.joda.time.DateTime dateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        boolean boolean40 = interval29.contains((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        java.lang.String str48 = property47.toString();
        org.joda.time.DateTime dateTime49 = property47.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.minus(readableDuration50);
        org.joda.time.Interval interval52 = interval29.withStart((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Interval interval53 = interval19.overlap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration54 = interval53.toDuration();
        org.joda.time.Interval interval55 = interval8.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Period period56 = duration54.toPeriod();
        org.joda.time.Period period57 = duration54.toPeriod();
        long long58 = duration54.getMillis();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.LocalTime localTime64 = dateTime63.toLocalTime();
        int int65 = dateTime63.getMonthOfYear();
        int int66 = dateTime63.getHourOfDay();
        org.joda.time.DateTime.Property property67 = dateTime63.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = dateTime63.toString(dateTimeFormatter68);
        org.joda.time.DateTime dateTime71 = dateTime63.plusMinutes(17);
        long long72 = dateTime63.getMillis();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.weekyears();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[minuteOfHour]" + "'", str48, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010" + "'", str69, "2022-02-22T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645488599990L + "'", long72 == 1645488599990L);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Feb 22, 2022 7:17:58 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Feb 22, 2022 7:17:58 AM' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        java.util.Date date3 = new java.util.Date(0, 27, 528);
        long long4 = date3.getTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        java.lang.String str12 = property11.toString();
        org.joda.time.DateTime dateTime13 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = property11.addToCopy((long) 366);
        int int16 = property11.getMinimumValue();
        int int17 = property11.getMaximumValue();
        org.joda.time.DurationField durationField18 = property11.getRangeDurationField();
        org.joda.time.Interval interval19 = property11.toInterval();
        boolean boolean20 = date3.equals((java.lang.Object) property11);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Sep 10 00:00:00 UTC 1903");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-2092608000000L) + "'", long4 == (-2092608000000L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[minuteOfHour]" + "'", str12, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime7.withMillisOfSecond(0);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Period period21 = interval19.toPeriod();
        java.lang.String str22 = interval19.toString();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfHour();
        int int30 = property29.get();
        org.joda.time.Interval interval31 = property29.toInterval();
        org.joda.time.Interval interval32 = interval31.toInterval();
        long long33 = interval31.toDurationMillis();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = interval31.toPeriod(periodType34);
        boolean boolean36 = interval19.contains((org.joda.time.ReadableInterval) interval31);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = interval31.toPeriod(periodType37);
        org.joda.time.LocalTime localTime39 = localTime7.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        int int47 = property46.getMinimumValue();
        org.joda.time.DateTime dateTime48 = property46.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.Chronology chronology55 = localTime52.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.weekyears();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        org.joda.time.Chronology chronology63 = localTime60.getChronology();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) (byte) 1, chronology63);
        int[] intArray66 = chronology55.get((org.joda.time.ReadablePartial) localTime64, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField67 = chronology55.dayOfYear();
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localTime70.toDateTime(readableInstant71);
        org.joda.time.LocalTime localTime73 = dateTime72.toLocalTime();
        org.joda.time.DateTime.Property property74 = dateTime72.minuteOfHour();
        int int75 = property74.get();
        org.joda.time.Interval interval76 = property74.toInterval();
        org.joda.time.DateTime dateTime77 = interval76.getEnd();
        org.joda.time.Period period78 = interval76.toPeriod();
        int[] intArray80 = chronology55.get((org.joda.time.ReadablePeriod) period78, (long) (byte) 100);
        org.joda.time.DateTime dateTime81 = dateTime48.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime83 = dateTime81.withYear((int) (byte) 1);
        org.joda.time.Instant instant84 = dateTime81.toInstant();
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period38, (org.joda.time.ReadableInstant) instant84);
        org.joda.time.Chronology chronology86 = instant84.getChronology();
        org.joda.time.Instant instant88 = instant84.plus(320702385000L);
        org.joda.time.Instant instant89 = instant84.toInstant();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T00:10:00.000Z/2022-02-22T00:11:00.000Z" + "'", str22, "2022-02-22T00:10:00.000Z/2022-02-22T00:11:00.000Z");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 60000L + "'", long33 == 60000L);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 122);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 2922789);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronology();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.Interval interval20 = interval19.toInterval();
        long long21 = interval19.toDurationMillis();
        org.joda.time.Interval interval23 = interval19.withStartMillis(10L);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology30);
        org.joda.time.Interval interval33 = interval19.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField34 = chronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology30.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter9.withZone(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 60000L + "'", long21 == 60000L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.Period period21 = interval20.toPeriod();
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period21.toPeriod();
        org.joda.time.DateTime dateTime25 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime25.withDayOfMonth(408);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 408 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.yearOfEra();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfMonth();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.LocalTime localTime20 = localTime18.plusHours((int) 'u');
        long long22 = chronology5.set((org.joda.time.ReadablePartial) localTime18, 0L);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean25 = localTime23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.DateTime.Property property32 = dateTime30.minuteOfHour();
        int int33 = property32.get();
        org.joda.time.DateTime dateTime35 = property32.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime36 = property32.getDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMonths(6);
        org.joda.time.DateTime dateTime39 = localTime23.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime38.toGregorianCalendar();
        org.joda.time.DateTime.Property property41 = dateTime38.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        java.lang.String str43 = property41.toString();
        boolean boolean45 = property41.equals((java.lang.Object) 25985556L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 26351228L + "'", long22 == 26351228L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(gregorianCalendar40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[millisOfSecond]" + "'", str43, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("und");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: und");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        java.lang.String str17 = property16.toString();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        long long21 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = property9.addToCopy((-1645451999));
        int int24 = property9.getLeapAmount();
        long long25 = property9.remainder();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[minuteOfHour]" + "'", str17, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 600000L + "'", long25 == 600000L);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.yearOfEra();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfMonth();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.LocalTime localTime20 = localTime18.plusHours((int) 'u');
        long long22 = chronology5.set((org.joda.time.ReadablePartial) localTime18, 0L);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean25 = localTime23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.DateTime.Property property32 = dateTime30.minuteOfHour();
        int int33 = property32.get();
        org.joda.time.DateTime dateTime35 = property32.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime36 = property32.getDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMonths(6);
        org.joda.time.DateTime dateTime39 = localTime23.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime38.toGregorianCalendar();
        gregorianCalendar40.set(540000, 599, 525949, (int) (short) -1, 1645498985);
        int int47 = gregorianCalendar40.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 26351284L + "'", long22 == 26351284L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(gregorianCalendar40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DurationField durationField17 = chronology5.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology5.year();
        org.joda.time.DateTimeField dateTimeField19 = chronology5.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, readableDuration16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.Interval interval19 = interval17.toInterval();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Period period30 = interval28.toPeriod();
        java.lang.String str31 = interval28.toString();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Interval interval41 = interval40.toInterval();
        long long42 = interval40.toDurationMillis();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = interval40.toPeriod(periodType43);
        org.joda.time.Interval interval45 = interval28.overlap((org.joda.time.ReadableInterval) interval40);
        boolean boolean46 = interval17.abuts((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = interval17.isAfter(readableInterval47);
        boolean boolean49 = interval17.containsNow();
        boolean boolean50 = interval17.containsNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str31, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 60000L + "'", long42 == 60000L);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period26 = interval8.toPeriod();
        org.joda.time.MutableInterval mutableInterval27 = interval8.toMutableInterval();
        boolean boolean29 = interval8.isAfter(28944000000L);
        boolean boolean31 = interval8.isBefore(1645514016022L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        boolean boolean20 = dateTime4.isEqual((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime4.withMillisOfSecond(26);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime4.minusMinutes(100);
        org.joda.time.TimeOfDay timeOfDay18 = dateTime4.toTimeOfDay();
        org.joda.time.DateTime dateTime20 = dateTime4.withCenturyOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime4.plusYears(457087);
        org.joda.time.DateTime.Property property23 = dateTime22.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getMinimum(2);
        int int5 = calendar0.getGreatestMinimum(0);
        calendar0.set((int) (byte) -1, 2, 600000, 2, 15, (int) '#');
        long long13 = calendar0.getTimeInMillis();
        calendar0.setTimeInMillis((long) 46);
        calendar0.setLenient(false);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=46,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=46,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-10353908664593L) + "'", long13 == (-10353908664593L));
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        int int21 = dateTime19.getMonthOfYear();
        int int22 = dateTime19.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int28 = dateTimeZone26.getOffset((long) (byte) 1);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 3);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTimeToday(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        int int35 = calendar34.getFirstDayOfWeek();
        java.time.Instant instant36 = calendar34.toInstant();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromCalendarFields(calendar34);
        java.util.TimeZone timeZone38 = calendar34.getTimeZone();
        gregorianCalendar33.setTimeZone(timeZone38);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        int int48 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.LocalTime.Property property49 = localTime42.hourOfDay();
        org.joda.time.LocalTime localTime50 = property49.withMinimumValue();
        org.joda.time.DurationField durationField51 = property49.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField52 = property49.getField();
        org.joda.time.DateTimeField dateTimeField53 = property49.getField();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = localTime56.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.weekyears();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = localTime64.getChronology();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) (byte) 1, chronology67);
        int[] intArray70 = chronology59.get((org.joda.time.ReadablePartial) localTime68, (long) (short) -1);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        org.joda.time.DateTime.Property property77 = dateTime75.minuteOfHour();
        int int78 = property77.get();
        org.joda.time.Interval interval79 = property77.toInterval();
        org.joda.time.DateTime dateTime80 = interval79.getEnd();
        org.joda.time.Period period81 = interval79.toPeriod();
        org.joda.time.LocalTime localTime83 = localTime68.withPeriodAdded((org.joda.time.ReadablePeriod) period81, 17);
        java.util.Locale locale84 = java.util.Locale.getDefault();
        java.lang.String str85 = locale84.getLanguage();
        java.lang.String str86 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) localTime83, locale84);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone38, locale84);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gregorianCalendar33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514351415,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=11,MILLISECOND=415,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(locale84);
// flaky:         org.junit.Assert.assertEquals(locale84.toString(), "_HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0" + "'", str86, "0");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1645514351415,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=11,MILLISECOND=415,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.DateTime dateTime10 = dateTime8.minus(0L);
        int int11 = dateTime10.getMillisOfSecond();
        int int12 = dateTime10.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime10.withDate(18000000, 75, 45122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = property9.getAsShortText(locale14);
        org.joda.time.DateTimeField dateTimeField16 = property9.getField();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = dateTime16.withField(dateTimeFieldType19, (int) (byte) 1);
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder26 = builder22.setTimeOfDay(9, 14, 13);
        boolean boolean27 = dateTime21.equals((java.lang.Object) 13);
        org.joda.time.DateMidnight dateMidnight28 = dateTime21.toDateMidnight();
        org.joda.time.DateTime dateTime30 = dateTime21.minusSeconds(2072);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property8.addToCopy((long) 19);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 35);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(469);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        boolean boolean25 = interval8.contains((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration26 = interval20.toDuration();
        long long27 = interval20.toDurationMillis();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime32.plusWeeks(0);
        int int37 = dateTime32.getHourOfDay();
        boolean boolean38 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int39 = dateTime32.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, readableDuration16);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime22.plusWeeks(0);
        int int27 = dateTime22.getDayOfMonth();
        int int28 = dateTime22.getMonthOfYear();
        long long29 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property30 = dateTime22.millisOfDay();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTime dateTime39 = localTime38.toDateTimeToday();
        org.joda.time.LocalTime localTime41 = localTime38.withMillisOfSecond(0);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.get();
        org.joda.time.Interval interval50 = property48.toInterval();
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Period period52 = interval50.toPeriod();
        java.lang.String str53 = interval50.toString();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.get();
        org.joda.time.Interval interval62 = property60.toInterval();
        org.joda.time.Interval interval63 = interval62.toInterval();
        long long64 = interval62.toDurationMillis();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = interval62.toPeriod(periodType65);
        boolean boolean67 = interval50.contains((org.joda.time.ReadableInterval) interval62);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = interval62.toPeriod(periodType68);
        org.joda.time.LocalTime localTime70 = localTime38.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period69);
        boolean boolean72 = interval17.abuts((org.joda.time.ReadableInterval) interval71);
        boolean boolean73 = interval17.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645488599990L + "'", long29 == 1645488599990L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str53, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 60000L + "'", long64 == 60000L);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        java.util.Date date5 = new java.util.Date(0, 5478, 26014330, 0, 15120246);
        java.util.Date date9 = new java.util.Date((-4), 2021, 59);
        boolean boolean10 = date5.after(date9);
        java.lang.Object obj11 = date5.clone();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 22 04:06:00 UTC 73610");
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jul 29 00:00:00 UTC 2064");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "Fri Jan 22 04:06:00 UTC 73610");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "Fri Jan 22 04:06:00 UTC 73610");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "Fri Jan 22 04:06:00 UTC 73610");
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        long long13 = dateTime11.getMillis();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.get();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        int int24 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime23.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime23.getZone();
        boolean boolean27 = calendar6.before((java.lang.Object) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int29 = dateTime23.get(dateTimeFieldType28);
        org.joda.time.TimeOfDay timeOfDay30 = dateTime23.toTimeOfDay();
        boolean boolean32 = dateTime23.isBefore((long) 292278994);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514351627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=11,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645488599990L + "'", long13 == 1645488599990L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(0, 27424811);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27424811 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property13.roundHalfCeilingCopy();
        int int15 = property13.get();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePartial) localTime31, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.weekyear();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 5, chronology22);
        int int36 = property13.getDifference((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime35.getHourOfDay();
        java.util.Date date38 = dateTime35.toDate();
        int int39 = dateTime35.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22199 + "'", int36 == 22199);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(6);
        org.joda.time.TimeOfDay timeOfDay17 = dateTime16.toTimeOfDay();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.weekyears();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = localTime28.getChronology();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (byte) 1, chronology31);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePartial) localTime32, (long) (short) -1);
        org.joda.time.LocalTime.Property property35 = localTime32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalTime localTime37 = property35.withMinimumValue();
        org.joda.time.LocalTime localTime39 = property35.addCopy(59);
        org.joda.time.LocalTime.Property property40 = localTime39.minuteOfHour();
        boolean boolean41 = timeOfDay17.isEqual((org.joda.time.ReadablePartial) localTime39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField43 = timeOfDay17.getField(1967);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1967");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = dateTime16.withField(dateTimeFieldType19, (int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(23);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay((int) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime23.minusSeconds(86340);
        org.joda.time.Instant instant28 = dateTime23.toInstant();
        org.joda.time.DateTime.Property property29 = dateTime23.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(1970, (int) (short) -1, (int) (short) 0);
        java.util.Calendar.Builder builder8 = builder0.setDate(292278993, 4, (int) 'a');
        java.util.Calendar.Builder builder12 = builder0.setTimeOfDay((int) 'u', (-1), 2922789);
        java.util.Calendar.Builder builder16 = builder0.setTimeOfDay(17, 32772, 999);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getFirstDayOfWeek();
        int int20 = calendar17.getLeastMaximum(2);
        java.lang.String str21 = calendar17.getCalendarType();
        calendar17.set(53, (int) (short) 0, 5, 53, 6);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = calendar17.getDisplayName(0, 1, locale31);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = localTime36.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.weekyears();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1, chronology47);
        int[] intArray50 = chronology39.get((org.joda.time.ReadablePartial) localTime48, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField51 = chronology39.clockhourOfDay();
        org.joda.time.DurationField durationField52 = chronology39.seconds();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology39.getZone();
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        calendar17.setTimeZone(timeZone54);
        calendar17.setFirstDayOfWeek(12);
        java.util.TimeZone timeZone58 = calendar17.getTimeZone();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone58);
        java.util.Calendar.Builder builder60 = builder16.setTimeZone(timeZone58);
        java.util.Calendar.Builder builder62 = builder16.setLenient(true);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance();
        boolean boolean64 = calendar63.isWeekDateSupported();
        calendar63.add((int) (short) 10, 100);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int73 = dateTimeZone71.getOffset((long) (byte) 1);
        long long75 = dateTimeZone69.getMillisKeepLocal(dateTimeZone71, (long) 3);
        boolean boolean77 = dateTimeZone71.equals((java.lang.Object) 1);
        long long81 = dateTimeZone71.convertLocalToUTC(1970L, false, 345600000L);
        java.util.TimeZone timeZone82 = dateTimeZone71.toTimeZone();
        calendar63.setTimeZone(timeZone82);
        java.util.Calendar.Builder builder84 = builder16.setTimeZone(timeZone82);
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.010' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-60494237628276,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=12,minimalDaysInFirstWeek=1,ERA=1,YEAR=53,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=7,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=6,SECOND=11,MILLISECOND=724,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hours" + "'", str32, "hours");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AD" + "'", str33, "AD");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645514351724,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=11,MILLISECOND=724,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645874351724,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=57,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=19,SECOND=11,MILLISECOND=724,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 3L + "'", long75 == 3L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1960L + "'", long81 == 1960L);
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1645514351725,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=11,MILLISECOND=735,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfSecond();
        int int17 = property16.get();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str20 = dateTimeFieldType19.toString();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.weekyears();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) (byte) 1, chronology34);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePartial) localTime35, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField38 = chronology26.clockhourOfDay();
        org.joda.time.DurationField durationField39 = chronology26.seconds();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType19.getField(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) (byte) 1, chronology48);
        boolean boolean50 = dateTimeFieldType41.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.centuryOfEra();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology48);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology48);
        org.joda.time.DurationField durationField54 = chronology48.hours();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.year();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType19.getField(chronology48);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        int int65 = localTime59.compareTo((org.joda.time.ReadablePartial) localTime62);
        org.joda.time.LocalTime.Property property66 = localTime59.hourOfDay();
        org.joda.time.LocalTime localTime68 = property66.addCopy(6);
        org.joda.time.LocalTime localTime69 = property66.getLocalTime();
        org.joda.time.LocalTime localTime71 = property66.addCopy(1645513795941L);
        org.joda.time.LocalTime.Property property72 = localTime71.minuteOfHour();
        int[] intArray74 = chronology48.get((org.joda.time.ReadablePartial) localTime71, 25881139L);
        org.joda.time.DateTimeField dateTimeField75 = chronology48.minuteOfHour();
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((java.lang.Object) dateTime18, chronology48);
        int int77 = localTime76.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 965 + "'", int17 == 965);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "centuryOfEra" + "'", str20, "centuryOfEra");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[7, 11, 21, 139]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 122);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology10);
        boolean boolean15 = dateTimeFormatter14.isPrinter();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        int int22 = dateTime20.getMonthOfYear();
        int int23 = dateTime20.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        org.joda.time.DateTime dateTime32 = dateTime20.toDateTime(dateTimeZone27);
        java.lang.String str34 = dateTimeZone27.getNameKey((long) 19535048);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter14.withZone(dateTimeZone27);
        java.lang.Appendable appendable36 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        int int43 = dateTime41.getMonthOfYear();
        int int44 = dateTime41.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int50 = dateTimeZone48.getOffset((long) (byte) 1);
        long long52 = dateTimeZone46.getMillisKeepLocal(dateTimeZone48, (long) 3);
        org.joda.time.DateTime dateTime53 = dateTime41.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfCentury((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime53.withMillis(26136412L);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter35.printTo(appendable36, (org.joda.time.ReadableInstant) dateTime57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(25760222L);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Period period29 = interval27.toPeriod();
        org.joda.time.LocalTime localTime31 = localTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period29, 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int33 = localTime31.indexOf(dateTimeFieldType32);
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType32.getDurationType();
        boolean boolean35 = localTime1.isSupported(durationFieldType34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalTime localTime50 = localTime46.plus(readablePeriod49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean52 = localTime50.isSupported(dateTimeFieldType51);
        org.joda.time.DateTime dateTime53 = dateTime43.withFields((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int59 = dateTimeZone57.getOffset((long) (byte) 1);
        long long61 = dateTimeZone55.getMillisKeepLocal(dateTimeZone57, (long) 3);
        long long64 = dateTimeZone55.convertLocalToUTC((long) 9, false);
        java.lang.String str65 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime66 = localTime50.toDateTimeToday(dateTimeZone55);
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration38, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(92234312150400000L, chronology69);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(1645452572991L, chronology69);
        org.joda.time.DateTimeField dateTimeField72 = chronology69.minuteOfHour();
        boolean boolean73 = durationFieldType34.isSupported(chronology69);
        org.joda.time.DateTimeField dateTimeField74 = chronology69.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3L + "'", long61 == 3L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime4.toString(dateTimeFormatter9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010" + "'", str10, "2022-02-22T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime4.toString(dateTimeFormatter9);
        org.joda.time.DateTime dateTime12 = dateTime4.plusMinutes(17);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMillis(52);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        int int28 = dateTime26.getMonthOfYear();
        int int29 = dateTime26.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfCentury((int) '4');
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        boolean boolean42 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = localTime46.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (byte) 1, chronology49);
        org.joda.time.DateTime dateTime51 = localTime50.toDateTimeToday();
        org.joda.time.LocalTime localTime53 = localTime50.minusMinutes(1);
        org.joda.time.LocalTime.Property property54 = localTime50.millisOfDay();
        int int55 = localTime50.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean57 = localTime50.isSupported(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType56.getDurationType();
        org.joda.time.DateTime dateTime60 = dateTime38.withFieldAdded(durationFieldType58, 0);
        org.joda.time.DateTime dateTime62 = dateTime12.withFieldAdded(durationFieldType58, (-525948));
        org.joda.time.DateTime dateTime64 = dateTime62.plusWeeks(15);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010" + "'", str10, "2022-02-22T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, readablePeriod8);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.getMinimumValue();
        org.joda.time.DateTime dateTime37 = property35.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfYear();
        boolean boolean39 = interval28.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        java.lang.String str47 = property46.toString();
        org.joda.time.DateTime dateTime48 = property46.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.Interval interval51 = interval28.withStart((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Interval interval52 = interval18.overlap((org.joda.time.ReadableInterval) interval28);
        boolean boolean53 = interval9.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.getMinimumValue();
        org.joda.time.DateTime dateTime62 = property60.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime65 = null;
        boolean boolean66 = dateTimeZone64.isLocalDateTimeGap(localDateTime65);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(dateTimeZone64);
        org.joda.time.DateTime dateTime68 = dateTime62.withZoneRetainFields(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) dateTime68);
        org.joda.time.DateTime dateTime70 = dateTime68.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime72 = dateTime68.minusSeconds(3);
        org.joda.time.DateTime dateTime74 = dateTime68.plusMinutes(32770);
        boolean boolean75 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime74);
        int int76 = dateTime74.getMonthOfYear();
        org.joda.time.DateTime.Property property77 = dateTime74.weekOfWeekyear();
        int int78 = dateTime74.getEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[minuteOfHour]" + "'", str47, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfHour();
        int int30 = property29.get();
        org.joda.time.Interval interval31 = property29.toInterval();
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfHour();
        int int40 = property39.get();
        org.joda.time.Interval interval41 = property39.toInterval();
        org.joda.time.Interval interval42 = interval41.toInterval();
        boolean boolean43 = interval32.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        int int51 = property50.get();
        org.joda.time.Interval interval52 = property50.toInterval();
        org.joda.time.Interval interval53 = interval52.toInterval();
        boolean boolean54 = interval32.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = interval52.toPeriod(periodType55);
        boolean boolean57 = interval8.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTime dateTime58 = interval8.getStart();
        org.joda.time.DateTime dateTime59 = interval8.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(49);
        org.joda.time.DateTime dateTime63 = dateTime59.withDayOfWeek((int) (short) 1);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra(4);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        java.lang.String str5 = localTime2.toString();
        org.joda.time.LocalTime localTime7 = localTime2.minusMillis(790);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.100" + "'", str5, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime dateTime18 = dateTime13.withYear(9);
        int int19 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime20 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(53);
        org.joda.time.DateTime.Property property23 = dateTime20.millisOfSecond();
        long long24 = property23.remainder();
        org.joda.time.DateTime dateTime25 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(14523742792000L, 814928910419393846L);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.junit.Assert.assertNotNull(interval3);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.hours();
        org.joda.time.DurationField durationField12 = chronology9.weeks();
        int int14 = durationField12.getValue((-365999996L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        long long1 = calendar0.getTimeInMillis();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology7.minuteOfHour();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Period period31 = interval29.toPeriod();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = period31.get(durationFieldType32);
        int[] intArray35 = chronology7.get((org.joda.time.ReadablePeriod) period31, 1645513759720L);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        long long42 = chronology7.set((org.joda.time.ReadablePartial) localTime38, (long) 'x');
        boolean boolean43 = calendar0.after((java.lang.Object) long42);
        java.util.TimeZone timeZone44 = calendar0.getTimeZone();
        java.lang.String str45 = calendar0.getCalendarType();
        java.lang.Object obj46 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514352064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=12,MILLISECOND=64,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645514352064L + "'", long1 == 1645514352064L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 2720, 5, 7, 9, 19, 720]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 600000L + "'", long42 == 600000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gregory" + "'", str45, "gregory");
        org.junit.Assert.assertNotNull(obj46);
// flaky:         org.junit.Assert.assertEquals(obj46.toString(), "java.util.GregorianCalendar[time=1645514352064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=12,MILLISECOND=64,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "java.util.GregorianCalendar[time=1645514352064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=12,MILLISECOND=64,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "java.util.GregorianCalendar[time=1645514352064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=12,MILLISECOND=64,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime17 = property9.addCopy((long) 292278993);
        org.joda.time.LocalTime localTime18 = property9.withMaximumValue();
        int int19 = property9.getMinimumValueOverall();
        org.joda.time.LocalTime localTime20 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime21 = property9.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Feb");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int17 = dateTimeZone15.getOffset((long) (byte) 1);
        long long19 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 3);
        org.joda.time.DateTime dateTime20 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = dateTime11.minus((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime11.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime11.plus(readablePeriod25);
        org.joda.time.DateTime.Property property27 = dateTime11.yearOfCentury();
        boolean boolean28 = languageRange1.equals((java.lang.Object) dateTime11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "feb" + "'", str2, "feb");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "feb" + "'", str6, "feb");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        int int3 = calendar2.getMinimalDaysInFirstWeek();
        calendar2.set(100, (int) ' ', 600000, (int) 'x', 8, 20);
        int int12 = calendar2.getMaximum(1);
        calendar2.clear();
        calendar2.set(600, 38, 26014330, (int) 'u', 14, 22);
        int int22 = calendar2.getActualMinimum(13);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        int[] intArray41 = chronology30.get((org.joda.time.ReadablePartial) localTime39, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField42 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField43 = durationFieldType24.getField(chronology30);
        org.joda.time.DurationField durationField44 = chronology30.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology30.halfdayOfDay();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(599990L, chronology30);
        org.joda.time.DateTimeField dateTimeField47 = chronology30.era();
        boolean boolean48 = calendar2.before((java.lang.Object) dateTimeField47);
        java.util.TimeZone timeZone49 = calendar2.getTimeZone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=600,MONTH=38,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=26014330,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=117,MINUTE=14,SECOND=22,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278994 + "'", int12 == 292278994);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.get();
        boolean boolean17 = interval8.equals((java.lang.Object) int16);
        org.joda.time.Interval interval18 = interval8.toInterval();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 1, chronology32);
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePartial) localTime33, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField36 = chronology24.dayOfYear();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        org.joda.time.DateTime.Property property43 = dateTime41.minuteOfHour();
        int int44 = property43.get();
        org.joda.time.Interval interval45 = property43.toInterval();
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Period period47 = interval45.toPeriod();
        int[] intArray49 = chronology24.get((org.joda.time.ReadablePeriod) period47, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.weekyears();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = localTime61.getChronology();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) (byte) 1, chronology64);
        int[] intArray67 = chronology56.get((org.joda.time.ReadablePartial) localTime65, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField68 = chronology56.dayOfYear();
        org.joda.time.DurationField durationField69 = durationFieldType50.getField(chronology56);
        int int70 = period47.get(durationFieldType50);
        org.joda.time.PeriodType periodType71 = period47.getPeriodType();
        org.joda.time.Period period72 = interval8.toPeriod(periodType71);
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localTime75.toDateTime(readableInstant76);
        org.joda.time.LocalTime localTime78 = dateTime77.toLocalTime();
        org.joda.time.DateTime.Property property79 = dateTime77.minuteOfHour();
        int int80 = property79.get();
        org.joda.time.Interval interval81 = property79.toInterval();
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = localTime84.toDateTime(readableInstant85);
        org.joda.time.LocalTime localTime87 = dateTime86.toLocalTime();
        org.joda.time.DateTime.Property property88 = dateTime86.minuteOfHour();
        int int89 = property88.getMinimumValue();
        org.joda.time.DateTime dateTime90 = property88.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property91 = dateTime90.dayOfYear();
        boolean boolean92 = interval81.contains((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Interval interval93 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period72, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Duration duration94 = interval93.toDuration();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(duration94);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(26121778L);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime.Property property17 = localTime14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.LocalTime localTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime21 = property17.addCopy(25765324L);
        org.joda.time.DateTimeField dateTimeField22 = property17.getField();
        org.joda.time.LocalTime localTime23 = property17.getLocalTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        java.lang.String str32 = interval31.toString();
        org.joda.time.Period period33 = interval31.toPeriod();
        java.lang.String str34 = interval31.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str32, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str34, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone8.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone8);
        long long15 = dateTimeZone8.convertLocalToUTC(600000L, true, (long) 600000);
        org.joda.time.DateTime dateTime16 = dateTime4.withZone(dateTimeZone8);
        org.joda.time.DateTime dateTime18 = dateTime4.plusMinutes(485);
        org.joda.time.DateTime.Property property19 = dateTime4.dayOfWeek();
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        org.joda.time.DateTime dateTime22 = property19.addToCopy(0);
        org.joda.time.DateTime dateTime23 = property19.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 599990L + "'", long15 == 599990L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = calendar1.getLeastMaximum(974);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 974");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514352326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=12,MILLISECOND=326,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfDay();
        boolean boolean12 = dateTimeField10.isLeap((long) 17);
        java.util.Locale locale16 = new java.util.Locale("10", "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010", "1 Jan 1970 00:00:00 GMT");
        java.lang.String str18 = locale16.getExtension('u');
        int int19 = dateTimeField10.getMaximumTextLength(locale16);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale16.getDisplayName(locale20);
        java.util.Set<java.lang.Character> charSet23 = locale16.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(locale16.toString(), "10_2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010_1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10 (2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010,1 Jan 1970 00:00:00 GMT)" + "'", str22, "10 (2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010,1 Jan 1970 00:00:00 GMT)");
        org.junit.Assert.assertNotNull(charSet23);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.halfdays();
        long long35 = durationField32.add(2369451657600000L, 86399999);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6101931614400000L + "'", long35 == 6101931614400000L);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfHour();
        int int30 = property29.get();
        org.joda.time.Interval interval31 = property29.toInterval();
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfHour();
        int int40 = property39.get();
        org.joda.time.Interval interval41 = property39.toInterval();
        org.joda.time.Interval interval42 = interval41.toInterval();
        boolean boolean43 = interval32.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        int int51 = property50.get();
        org.joda.time.Interval interval52 = property50.toInterval();
        org.joda.time.Interval interval53 = interval52.toInterval();
        boolean boolean54 = interval32.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = interval52.toPeriod(periodType55);
        boolean boolean57 = interval8.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = localTime62.getChronology();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) (byte) 1, chronology65);
        boolean boolean67 = dateTimeFieldType58.isSupported(chronology65);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.centuryOfEra();
        org.joda.time.DurationField durationField69 = chronology65.halfdays();
        org.joda.time.DateTimeField dateTimeField70 = chronology65.millisOfSecond();
        org.joda.time.Interval interval71 = interval52.withChronology(chronology65);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime(chronology65);
        org.joda.time.DateTimeField dateTimeField73 = chronology65.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = property9.addWrapFieldToCopy(0);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("weekyear");
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.util.Locale.Builder builder21 = builder15.setLocale(locale19);
        int int22 = property9.getMaximumTextLength(locale19);
        org.joda.time.Interval interval23 = property9.toInterval();
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        boolean boolean11 = dateTimeFieldType2.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.minuteOfHour();
        org.joda.time.DurationField durationField17 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.year();
        boolean boolean19 = durationFieldType1.isSupported(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.DateTime dateTime10 = dateTime8.minus(0L);
        int int11 = dateTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime10.withMillis((long) (-1));
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.DateTime.Property property21 = dateTime19.minuteOfHour();
        int int22 = property21.get();
        org.joda.time.Interval interval23 = property21.toInterval();
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval24.getStart();
        boolean boolean26 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime25.minus(25911495L);
        org.joda.time.DateTime dateTime31 = dateTime29.plusWeeks(122);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Interval interval41 = interval40.toInterval();
        long long42 = interval40.toDurationMillis();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        int int50 = property49.get();
        org.joda.time.Interval interval51 = property49.toInterval();
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.LocalTime localTime58 = dateTime57.toLocalTime();
        org.joda.time.DateTime.Property property59 = dateTime57.minuteOfHour();
        int int60 = property59.get();
        org.joda.time.Interval interval61 = property59.toInterval();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.LocalTime localTime67 = dateTime66.toLocalTime();
        org.joda.time.DateTime.Property property68 = dateTime66.minuteOfHour();
        int int69 = property68.getMinimumValue();
        org.joda.time.DateTime dateTime70 = property68.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property71 = dateTime70.dayOfYear();
        boolean boolean72 = interval61.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localTime75.toDateTime(readableInstant76);
        org.joda.time.LocalTime localTime78 = dateTime77.toLocalTime();
        org.joda.time.DateTime.Property property79 = dateTime77.minuteOfHour();
        java.lang.String str80 = property79.toString();
        org.joda.time.DateTime dateTime81 = property79.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.DateTime dateTime83 = dateTime81.minus(readableDuration82);
        org.joda.time.Interval interval84 = interval61.withStart((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Interval interval85 = interval51.overlap((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Duration duration86 = interval85.toDuration();
        org.joda.time.Interval interval87 = interval40.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Period period88 = duration86.toPeriod();
        org.joda.time.Duration duration89 = duration86.toDuration();
        long long90 = duration86.getMillis();
        org.joda.time.Period period91 = duration86.toPeriod();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration86);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 60000L + "'", long42 == 60000L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Property[minuteOfHour]" + "'", str80, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 60000L + "'", long90 == 60000L);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = dateTime16.withField(dateTimeFieldType19, (int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(23);
        org.joda.time.DateTime dateTime25 = dateTime23.withYear((int) '#');
        org.joda.time.DateTime dateTime27 = dateTime23.minusWeeks(457087);
        org.joda.time.DateTime.Property property28 = dateTime23.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = dateTime1.toString(dateTimeFormatter2);
        org.joda.time.DateTime.Property property4 = dateTime1.millisOfSecond();
        boolean boolean5 = dateTime1.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime1.withWeekyear(26014330);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime23 = dateTime12.minus((long) '#');
        org.joda.time.DateTime.Property property24 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime26 = dateTime12.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime12.withLaterOffsetAtOverlap();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = dateTime28.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 2022);
        int int35 = dateTime34.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime34.getZone();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = dateTime28.toDateTime(dateTimeZone36);
        boolean boolean39 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        int int47 = property46.getMinimumValue();
        org.joda.time.DateTime dateTime48 = property46.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone50.isLocalDateTimeGap(localDateTime51);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = dateTime48.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfEra(6);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
        int int63 = dateTime61.getMonthOfYear();
        int int64 = dateTime61.getHourOfDay();
        org.joda.time.DateTime.Property property65 = dateTime61.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone67.isLocalDateTimeGap(localDateTime68);
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime(dateTimeZone67);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        int int77 = dateTime75.getMonthOfYear();
        int int78 = dateTime75.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int84 = dateTimeZone82.getOffset((long) (byte) 1);
        long long86 = dateTimeZone80.getMillisKeepLocal(dateTimeZone82, (long) 3);
        org.joda.time.DateTime dateTime87 = dateTime75.toDateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime89 = dateTime87.withYearOfCentury((int) '4');
        org.joda.time.DateTime.Property property90 = dateTime89.year();
        boolean boolean91 = localTime70.equals((java.lang.Object) property90);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property90.getFieldType();
        org.joda.time.DateTime.Property property93 = dateTime61.property(dateTimeFieldType92);
        boolean boolean94 = dateTime56.isSupported(dateTimeFieldType92);
        org.joda.time.DurationFieldType durationFieldType95 = dateTimeFieldType92.getRangeDurationType();
        int int96 = dateTime28.get(dateTimeFieldType92);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.062+00:00:00.010" + "'", str3, "1970-01-01T00:00:00.062+00:00:00.010");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 3L + "'", long86 == 3L);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(durationFieldType95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2022 + "'", int96 == 2022);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.setLenient(true);
        long long4 = calendar1.getTimeInMillis();
        java.util.TimeZone timeZone5 = calendar1.getTimeZone();
        int int6 = calendar1.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime12 = property9.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        int int20 = property19.getMinimumValue();
        org.joda.time.DateTime dateTime21 = property19.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(273);
        int int27 = dateTime24.getYearOfCentury();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localTime12.getValue(528);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 528");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy(2);
        org.joda.time.Interval interval9 = property6.toInterval();
        java.lang.String str10 = interval9.toString();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.Interval interval20 = interval19.toInterval();
        long long21 = interval19.toDurationMillis();
        org.joda.time.Interval interval23 = interval19.withStartMillis(10L);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.get();
        int int32 = property30.getMinimumValue();
        org.joda.time.DateTime dateTime34 = property30.addToCopy((long) (byte) -1);
        boolean boolean35 = interval19.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = interval19.isBefore(readableInterval36);
        org.joda.time.Interval interval38 = interval19.toInterval();
        boolean boolean39 = interval9.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.MutableInterval mutableInterval40 = interval38.toMutableInterval();
        org.joda.time.DateTime dateTime41 = interval38.getEnd();
        org.joda.time.DateTime dateTime42 = interval38.getStart();
        int int43 = dateTime42.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.010/1970-01-01T00:00:01.000+00:00:00.010" + "'", str10, "1970-01-01T00:00:00.000+00:00:00.010/1970-01-01T00:00:01.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 60000L + "'", long21 == 60000L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.LocalTime localTime9 = dateTime8.toLocalTime();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayName(locale13);
        java.lang.String str15 = property10.getAsText(locale11);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale11.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder20 = builder3.setLocale(locale11);
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("jpn");
        java.util.Locale.Builder builder24 = builder20.removeUnicodeLocaleAttribute("minutes");
        java.util.Locale.Builder builder26 = builder24.setLanguage("hours");
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale.Builder builder29 = builder26.addUnicodeLocaleAttribute("457087");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (United States)" + "'", str12, "English (United States)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str14, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        long long11 = interval8.getEndMillis();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.getMinimumValue();
        org.joda.time.DateTime dateTime20 = property18.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone22.isLocalDateTimeGap(localDateTime23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime20.withZoneRetainFields(dateTimeZone22);
        boolean boolean27 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Interval interval28 = interval8.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = interval8.withEndMillis(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645488659990L + "'", long11 == 1645488659990L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((-1));
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 1, chronology22);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePartial) localTime23, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField26 = chronology14.dayOfYear();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Period period37 = interval35.toPeriod();
        int[] intArray39 = chronology14.get((org.joda.time.ReadablePeriod) period37, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int45 = dateTimeZone43.getOffset((long) (byte) 1);
        long long47 = dateTimeZone41.getMillisKeepLocal(dateTimeZone43, (long) 3);
        long long50 = dateTimeZone41.convertLocalToUTC((long) 9, false);
        java.lang.String str51 = dateTimeZone41.toString();
        org.joda.time.Chronology chronology52 = chronology14.withZone(dateTimeZone41);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.weekyears();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = localTime63.getChronology();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) (byte) 1, chronology66);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePartial) localTime67, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField70 = chronology58.dayOfYear();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        org.joda.time.DateTime.Property property77 = dateTime75.minuteOfHour();
        int int78 = property77.get();
        org.joda.time.Interval interval79 = property77.toInterval();
        org.joda.time.DateTime dateTime80 = interval79.getEnd();
        org.joda.time.Period period81 = interval79.toPeriod();
        int[] intArray83 = chronology58.get((org.joda.time.ReadablePeriod) period81, (long) (byte) 100);
        long long86 = chronology52.add((org.joda.time.ReadablePeriod) period81, (long) 70, 13);
        org.joda.time.DateTime dateTime88 = dateTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period81, 32769);
        org.joda.time.DateTime dateTime89 = dateTime88.toDateTimeISO();
        org.joda.time.DateTime.Property property90 = dateTime88.dayOfWeek();
        org.joda.time.Chronology chronology91 = dateTime88.getChronology();
        org.joda.time.DurationField durationField92 = chronology91.millis();
        org.joda.time.Interval interval93 = new org.joda.time.Interval(5285400000L, 72038310847680000L, chronology91);
        long long94 = interval93.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 780070L + "'", long86 == 780070L);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 72038305562280000L + "'", long94 == 72038305562280000L);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy(2);
        org.joda.time.Interval interval9 = property6.toInterval();
        java.lang.String str10 = interval9.toString();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        long long12 = interval9.getEndMillis();
        boolean boolean13 = interval9.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.010/1970-01-01T00:00:01.000+00:00:00.010" + "'", str10, "1970-01-01T00:00:00.000+00:00:00.010/1970-01-01T00:00:01.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 990L + "'", long12 == 990L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval9.getStart();
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        java.lang.String str12 = dateTime10.toString();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder13.setWeekDate(1970, (int) (short) -1, (int) (short) 0);
        java.util.Calendar.Builder builder20 = builder17.set(7, (int) (byte) 100);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1, chronology27);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.weekyears();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (byte) 1, chronology42);
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePartial) localTime43, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField46 = chronology34.dayOfYear();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.LocalTime localTime52 = dateTime51.toLocalTime();
        org.joda.time.DateTime.Property property53 = dateTime51.minuteOfHour();
        int int54 = property53.get();
        org.joda.time.Interval interval55 = property53.toInterval();
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Period period57 = interval55.toPeriod();
        int[] intArray59 = chronology34.get((org.joda.time.ReadablePeriod) period57, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = localTime63.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.weekyears();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localTime71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = localTime71.getChronology();
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((long) (byte) 1, chronology74);
        int[] intArray77 = chronology66.get((org.joda.time.ReadablePartial) localTime75, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField78 = chronology66.dayOfYear();
        org.joda.time.DurationField durationField79 = durationFieldType60.getField(chronology66);
        int int80 = period57.get(durationFieldType60);
        int[] intArray83 = chronology27.get((org.joda.time.ReadablePeriod) period57, (long) 100, (long) 22);
        java.util.Calendar.Builder builder84 = builder20.setFields(intArray83);
        boolean boolean85 = dateTime10.equals((java.lang.Object) builder84);
        java.util.Calendar.Builder builder89 = builder84.setWeekDate((int) '#', 544, 27425230);
        java.util.Locale locale91 = new java.util.Locale("23 Dec 1904 02:08:00 GMT");
        java.lang.String str92 = locale91.getDisplayVariant();
        java.util.Calendar.Builder builder93 = builder84.setLocale(locale91);
        java.util.Calendar.Builder builder97 = builder84.setDate(2021, 292278993, 889);
        java.util.Calendar.Builder builder99 = builder97.setLenient(true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010" + "'", str12, "2022-02-22T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 0, 0, -78]");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertEquals(locale91.toString(), "23 dec 1904 02:08:00 gmt");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(0L, 267L);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.junit.Assert.assertNotNull(mutableInterval3);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 1);
        int[] intArray2 = localTime1.getValues();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        int int10 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime11.withZoneRetainFields(dateTimeZone13);
        int int18 = dateTime17.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime21 = dateTime17.plusHours(8);
        org.joda.time.DateTime dateTime23 = dateTime17.withWeekyear(540000);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(32769);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears(19535048);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.plus(readablePeriod13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean16 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int23 = dateTimeZone21.getOffset((long) (byte) 1);
        long long25 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 3);
        long long28 = dateTimeZone19.convertLocalToUTC((long) 9, false);
        java.lang.String str29 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime30 = localTime14.toDateTimeToday(dateTimeZone19);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableDuration2, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(92234312150400000L, chronology33);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(1645452572991L, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.minuteOfHour();
        org.joda.time.Chronology chronology37 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        int int7 = dateTime5.getMonthOfYear();
        int int8 = dateTime5.getHourOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField18.getType();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weekyears();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        int[] intArray36 = chronology25.get((org.joda.time.ReadablePartial) localTime34, (long) (short) -1);
        org.joda.time.DurationField durationField37 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology25.yearOfEra();
        org.joda.time.DurationField durationField39 = chronology25.weekyears();
        boolean boolean40 = dateTimeFieldType19.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField41 = chronology25.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology25.add(readablePeriod42, (long) (byte) 1, 2000);
        org.joda.time.DurationField durationField46 = durationFieldType10.getField(chronology25);
        org.joda.time.DateTime dateTime48 = dateTime5.withFieldAdded(durationFieldType10, (int) (short) 0);
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval50);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(1970, (int) (short) -1, (int) (short) 0);
        java.util.Calendar.Builder builder7 = builder4.set(7, (int) (byte) 100);
        java.util.Calendar.Builder builder11 = builder7.setWeekDate(32772, (int) (byte) -1, 597);
        java.util.Calendar.Builder builder15 = builder11.setTimeOfDay(27394429, 67, 121);
        java.util.Calendar.Builder builder20 = builder11.setTimeOfDay(9, 27394429, 27425232, 995);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.Instant instant17 = dateTime4.toInstant();
        org.joda.time.Instant instant19 = instant17.withMillis((-1645488599L));
        org.joda.time.Instant instant22 = instant17.withDurationAdded(22199L, (int) (short) 10);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.Interval interval30 = interval29.toInterval();
        boolean boolean31 = interval9.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.getMinimumValue();
        org.joda.time.DateTime dateTime50 = property48.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone52.isLocalDateTimeGap(localDateTime53);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime50.withZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) dateTime56);
        org.joda.time.Interval interval58 = interval41.withEnd((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Interval interval59 = interval9.withStart((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded(readableDuration60, (int) (byte) 100);
        int int63 = dateTime62.getDayOfWeek();
        org.joda.time.DateTime dateTime65 = dateTime62.withMillis((long) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay66 = dateTime62.toTimeOfDay();
        org.joda.time.DateTime dateTime68 = dateTime62.withDayOfYear(16);
        org.joda.time.DateTime dateTime70 = dateTime62.plus((-22066732800000L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localTime11.getFields();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.LocalTime localTime23 = localTime20.withMillisOfSecond(0);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.get();
        org.joda.time.Interval interval32 = property30.toInterval();
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Period period34 = interval32.toPeriod();
        java.lang.String str35 = interval32.toString();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.DateTime.Property property42 = dateTime40.minuteOfHour();
        int int43 = property42.get();
        org.joda.time.Interval interval44 = property42.toInterval();
        org.joda.time.Interval interval45 = interval44.toInterval();
        long long46 = interval44.toDurationMillis();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = interval44.toPeriod(periodType47);
        boolean boolean49 = interval32.contains((org.joda.time.ReadableInterval) interval44);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval44.toPeriod(periodType50);
        org.joda.time.LocalTime localTime52 = localTime20.minus((org.joda.time.ReadablePeriod) period51);
        int int53 = localTime52.getSecondOfMinute();
        org.joda.time.LocalTime localTime55 = localTime52.minusMinutes(599998);
        boolean boolean56 = localTime11.isBefore((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int61 = dateTimeZone59.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(0L, dateTimeZone59);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMonths((int) (byte) 1);
        org.joda.time.DateTime dateTime66 = dateTime62.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfMonth();
        org.joda.time.DateTime dateTime69 = dateTime66.plusMillis(0);
        org.joda.time.DateTime dateTime70 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        org.joda.time.DateTime.Property property77 = dateTime75.minuteOfHour();
        int int78 = property77.get();
        org.joda.time.Interval interval79 = property77.toInterval();
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localTime82.toDateTime(readableInstant83);
        org.joda.time.LocalTime localTime85 = dateTime84.toLocalTime();
        org.joda.time.DateTime.Property property86 = dateTime84.minuteOfHour();
        int int87 = property86.get();
        boolean boolean88 = interval79.equals((java.lang.Object) int87);
        org.joda.time.PeriodType periodType89 = null;
        org.joda.time.Period period90 = interval79.toPeriod(periodType89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period90, readableInstant91);
        org.joda.time.DateTime dateTime94 = dateTime69.withPeriodAdded((org.joda.time.ReadablePeriod) period90, (int) 'a');
        org.joda.time.DateTime.Property property95 = dateTime94.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010" + "'", str35, "2022-02-22T00:10:00.000+00:00:00.010/2022-02-22T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 60000L + "'", long46 == 60000L);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(1970, (int) (short) -1, (int) (short) 0);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        int[] intArray21 = chronology10.get((org.joda.time.ReadablePartial) localTime19, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology10.clockhourOfDay();
        org.joda.time.DurationField durationField23 = chronology10.seconds();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology10.getZone();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        java.util.Calendar.Builder builder26 = builder0.setTimeZone(timeZone25);
        java.util.Calendar.Builder builder30 = builder0.setTimeOfDay((int) 'u', 6, (int) 'x');
        java.util.Calendar.Builder builder32 = builder0.setLenient(true);
        java.util.Calendar.Builder builder36 = builder0.setWeekDate(796, 2022, 32770);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime10 = property9.withMinimumValue();
        org.joda.time.DurationField durationField11 = property9.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        int int22 = localTime16.compareTo((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime.Property property23 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime25 = property23.addCopy(6);
        int int26 = localTime25.getSecondOfMinute();
        org.joda.time.LocalTime.Property property27 = localTime25.secondOfMinute();
        org.joda.time.LocalTime localTime28 = property27.getLocalTime();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfMonth();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.LocalTime localTime41 = localTime39.plusHours((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = localTime46.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (byte) 1, chronology49);
        boolean boolean51 = dateTimeFieldType42.isSupported(chronology49);
        boolean boolean52 = localTime39.isSupported(dateTimeFieldType42);
        int int53 = localTime28.compareTo((org.joda.time.ReadablePartial) localTime39);
        int int54 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime39);
        int int55 = localTime39.size();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        int int62 = dateTime60.getMonthOfYear();
        int int63 = dateTime60.getHourOfDay();
        org.joda.time.DateTime.Property property64 = dateTime60.dayOfMonth();
        org.joda.time.DurationField durationField65 = property64.getRangeDurationField();
        org.joda.time.DateTime dateTime67 = property64.addWrapFieldToCopy(32769);
        org.joda.time.DateTime dateTime68 = localTime39.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localTime74.toDateTime(readableInstant75);
        int int77 = localTime71.compareTo((org.joda.time.ReadablePartial) localTime74);
        org.joda.time.LocalTime.Property property78 = localTime71.hourOfDay();
        org.joda.time.LocalTime localTime80 = property78.addCopy(6);
        int int81 = localTime80.getSecondOfMinute();
        org.joda.time.LocalTime.Property property82 = localTime80.secondOfMinute();
        org.joda.time.LocalTime localTime83 = property82.roundHalfCeilingCopy();
        int int84 = property82.getMaximumValueOverall();
        org.joda.time.LocalTime localTime86 = property82.addNoWrapToCopy(10);
        org.joda.time.DurationField durationField87 = property82.getLeapDurationField();
        java.util.Locale locale88 = null;
        java.lang.String str89 = property82.getAsShortText(locale88);
        org.joda.time.LocalTime localTime90 = property82.roundCeilingCopy();
        int int91 = localTime39.compareTo((org.joda.time.ReadablePartial) localTime90);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 23 + "'", int54 == 23);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 59 + "'", int84 == 59);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNull(durationField87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0" + "'", str89, "0");
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime12.plusWeeks(0);
        org.joda.time.Chronology chronology17 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology17.weeks();
        boolean boolean21 = property7.equals((java.lang.Object) chronology17);
        org.joda.time.DateTime dateTime23 = property7.addToCopy(25845996);
        org.joda.time.DateTime dateTime25 = property7.addWrapFieldToCopy(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime25.withWeekOfWeekyear(26200526);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26200526 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, readableDuration16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.Interval interval19 = interval17.toInterval();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime28.plus(readablePeriod31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = localTime32.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = dateTime25.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int41 = dateTimeZone39.getOffset((long) (byte) 1);
        long long43 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 3);
        long long46 = dateTimeZone37.convertLocalToUTC((long) 9, false);
        java.lang.String str47 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime48 = localTime32.toDateTimeToday(dateTimeZone37);
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration20, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property50 = dateTime48.weekyear();
        boolean boolean51 = interval17.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime53 = dateTime48.plusYears(743);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        java.lang.String str36 = dateTimeField34.getAsText(1645513835905L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "35" + "'", str36, "35");
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.Period period10 = interval9.toPeriod();
        java.lang.String str11 = period10.toString();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTime dateTime20 = localTime19.toDateTimeToday();
        org.joda.time.LocalTime localTime22 = localTime19.minusMinutes(1);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.LocalTime localTime25 = localTime22.withFields((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean27 = localTime25.isSupported(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType26.getDurationType();
        boolean boolean29 = period10.isSupported(durationFieldType28);
        java.lang.String str30 = durationFieldType28.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "seconds" + "'", str30, "seconds");
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.halfdayOfDay();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        boolean boolean21 = dateTimeField20.isLenient();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(0L, dateTimeZone24);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(dateTimeZone24);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("minuteOfHour");
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localTime28, 68, locale31);
        java.lang.String str34 = localTime28.toString();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime28.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        int int45 = localTime39.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime.Property property46 = localTime39.hourOfDay();
        org.joda.time.LocalTime localTime48 = property46.addCopy(6);
        int int49 = localTime48.getSecondOfMinute();
        org.joda.time.LocalTime.Property property50 = localTime48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        java.util.Locale locale53 = new java.util.Locale("+00:00:00.010");
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        int int56 = property50.getMaximumTextLength(locale54);
        org.joda.time.LocalTime localTime57 = property50.roundHalfEvenCopy();
        java.lang.String str58 = localTime57.toString();
        int int59 = localTime28.compareTo((org.joda.time.ReadablePartial) localTime57);
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = null;
        org.joda.time.format.DateTimeParser dateTimeParser62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter63.withPivotYear((java.lang.Integer) 122);
        org.joda.time.Chronology chronology66 = dateTimeFormatter63.getChronology();
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localTime69.toDateTime(readableInstant70);
        org.joda.time.LocalTime localTime72 = dateTime71.toLocalTime();
        org.joda.time.DateTime.Property property73 = dateTime71.minuteOfHour();
        java.util.Locale locale74 = java.util.Locale.US;
        java.lang.String str75 = locale74.getDisplayName();
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.lang.String str77 = locale74.getDisplayName(locale76);
        java.lang.String str78 = property73.getAsText(locale74);
        java.util.Locale locale82 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleKeys();
        java.lang.String str84 = locale74.getDisplayCountry(locale82);
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter63.withLocale(locale82);
        java.lang.String str87 = locale82.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localTime57, 1917, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1917");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "68" + "'", str33, "68");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "07:19:13.338" + "'", str34, "07:19:13.338");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals(locale53.toString(), "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "06:10:00.000" + "'", str58, "06:10:00.000");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "English (United States)" + "'", str75, "English (United States)");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str77, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "10" + "'", str78, "10");
        org.junit.Assert.assertEquals(locale82.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "United States" + "'", str84, "United States");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "HI!" + "'", str87, "HI!");
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime31 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property32 = dateTime19.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
    }
}

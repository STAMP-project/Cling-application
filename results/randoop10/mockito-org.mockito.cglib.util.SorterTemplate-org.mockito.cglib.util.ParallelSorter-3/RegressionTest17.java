import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest17 {

    public static boolean debug = false;

    @Test
    public void test8501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8501");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test8502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8502");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = strComparator7.reversed();
        java.util.Comparator<java.lang.String> strComparator11 = strComparator10.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy18);
        boolean boolean20 = strComparator10.equals((java.lang.Object) generator12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator12.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator24.getNamingPolicy();
        boolean boolean33 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator24.setStrategy(generatorStrategy34);
        boolean boolean36 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator24.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator24.getStrategy();
        generator0.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        boolean boolean42 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test8503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8503");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        boolean boolean20 = strComparator8.equals((java.lang.Object) generator11);
        generator11.setAttemptLoad(false);
        boolean boolean23 = generator11.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean30 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean33 = generator0.getAttemptLoad();
        boolean boolean34 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        boolean boolean48 = strComparator43.equals((java.lang.Object) strComparator47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { '4', strComparator40, strComparator43, 0.0d };
        generator35.setArrays(objArray50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        java.lang.ClassLoader classLoader59 = generator52.getClassLoader();
        generator35.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader61 = generator35.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator35.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy64);
    }

    @Test
    public void test8504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8504");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator8.getStrategy();
        java.lang.ClassLoader classLoader10 = generator8.getClassLoader();
        generator8.setUseCache(false);
        boolean boolean13 = generator8.getUseCache();
        java.lang.ClassLoader classLoader14 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        java.lang.ClassLoader classLoader36 = null;
        generator19.setClassLoader(classLoader36);
        boolean boolean38 = generator19.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = strComparator39.reversed();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator42.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy50);
        boolean boolean52 = strComparator42.equals((java.lang.Object) generator44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator44.getStrategy();
        generator19.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator19.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator62.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator62.setArrays(objArray86);
        generator56.setArrays(objArray86);
        generator19.setArrays(objArray86);
        generator0.setArrays(objArray86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test8505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8505");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy35);
    }

    @Test
    public void test8506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8506");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator13.getStrategy();
        boolean boolean23 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator13.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy25);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = null;
        generator31.setClassLoader(classLoader35);
        generator31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator31.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        generator40.setUseCache(true);
        generator40.setAttemptLoad(true);
        generator40.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator40.getStrategy();
        java.lang.ClassLoader classLoader54 = generator40.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        boolean boolean68 = strComparator63.equals((java.lang.Object) strComparator67);
        java.lang.Object[] objArray70 = new java.lang.Object[] { '4', strComparator60, strComparator63, 0.0d };
        generator55.setArrays(objArray70);
        generator40.setArrays(objArray70);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator40.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy73);
        generator0.setNamingPolicy(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy73);
    }

    @Test
    public void test8507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8507");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator39.getNamingPolicy();
        boolean boolean48 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator39.setStrategy(generatorStrategy49);
        boolean boolean51 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator39.getStrategy();
        generator39.setAttemptLoad(false);
        boolean boolean55 = generator39.getUseCache();
        java.lang.ClassLoader classLoader56 = generator39.getClassLoader();
        generator0.setClassLoader(classLoader56);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test8508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8508");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter13 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader10);
    }

    @Test
    public void test8509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8509");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        boolean boolean15 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        boolean boolean24 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        generator17.setUseCache(true);
        generator17.setAttemptLoad(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator17.getStrategy();
        java.lang.ClassLoader classLoader33 = generator17.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        boolean boolean47 = strComparator42.equals((java.lang.Object) strComparator46);
        java.lang.Object[] objArray49 = new java.lang.Object[] { '4', strComparator39, strComparator42, 0.0d };
        generator34.setArrays(objArray49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator34.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator34.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator34.getStrategy();
        java.lang.ClassLoader classLoader55 = generator34.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator62.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator62.setArrays(objArray86);
        generator56.setArrays(objArray86);
        generator34.setArrays(objArray86);
        generator17.setArrays(objArray86);
        generator0.setArrays(objArray86);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test8510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8510");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        boolean boolean19 = generator0.getUseCache();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator25.getStrategy();
        generator25.setAttemptLoad(false);
        generator25.setUseCache(false);
        generator25.setUseCache(false);
        generator25.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        boolean boolean56 = strComparator51.equals((java.lang.Object) strComparator55);
        java.lang.Object[] objArray58 = new java.lang.Object[] { '4', strComparator48, strComparator51, 0.0d };
        generator43.setArrays(objArray58);
        generator35.setArrays(objArray58);
        generator25.setArrays(objArray58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator25.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader65);
    }

    @Test
    public void test8511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8511");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        generator22.setStrategy(generatorStrategy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator22.setStrategy(generatorStrategy35);
        generator22.setAttemptLoad(false);
        boolean boolean39 = generator22.getUseCache();
        java.lang.ClassLoader classLoader40 = generator22.getClassLoader();
        generator22.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator43.setStrategy(generatorStrategy56);
        generator43.setAttemptLoad(false);
        boolean boolean60 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator43.getStrategy();
        generator22.setStrategy(generatorStrategy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator63.getStrategy();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = generator63.getClassLoader();
        generator22.setClassLoader(classLoader72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy74);
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test8512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8512");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        boolean boolean23 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test8513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8513");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        boolean boolean41 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter45 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
    }

    @Test
    public void test8514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8514");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        boolean boolean26 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator27.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator38.getStrategy();
        java.lang.ClassLoader classLoader40 = generator38.getClassLoader();
        generator38.setUseCache(false);
        boolean boolean43 = generator38.getAttemptLoad();
        boolean boolean44 = generator38.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator45.setStrategy(generatorStrategy51);
        boolean boolean53 = generator45.getAttemptLoad();
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy62);
        boolean boolean64 = generator56.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        boolean boolean78 = strComparator73.equals((java.lang.Object) strComparator77);
        java.lang.Object[] objArray80 = new java.lang.Object[] { '4', strComparator70, strComparator73, 0.0d };
        generator65.setArrays(objArray80);
        generator56.setArrays(objArray80);
        boolean boolean83 = generator56.getAttemptLoad();
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator56 };
        generator45.setArrays(objArray84);
        generator38.setArrays(objArray84);
        boolean boolean87 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader88 = generator38.getClassLoader();
        generator0.setClassLoader(classLoader88);
        org.mockito.cglib.util.ParallelSorter.Generator generator90 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator90.getStrategy();
        java.lang.ClassLoader classLoader92 = generator90.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = null;
        generator90.setStrategy(generatorStrategy93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator90.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator90.getStrategy();
        generator0.setStrategy(generatorStrategy96);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(generatorStrategy96);
    }

    @Test
    public void test8515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8515");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test8516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8516");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        boolean boolean13 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test8517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8517");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator0.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        boolean boolean45 = generator0.getAttemptLoad();
        boolean boolean46 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy60);
        generator47.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator47.getStrategy();
        generator47.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        generator67.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator67.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy76);
        generator0.setNamingPolicy(namingPolicy76);
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test8518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8518");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy31);
        generator7.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass38 = generator0.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test8519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8519");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        boolean boolean38 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator0.getNamingPolicy();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator45.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        java.lang.ClassLoader classLoader65 = generator62.getClassLoader();
        generator47.setClassLoader(classLoader65);
        generator47.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = generator69.getClassLoader();
        generator47.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator47.getNamingPolicy();
        boolean boolean75 = strComparator46.equals((java.lang.Object) namingPolicy74);
        generator0.setNamingPolicy(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test8520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8520");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        boolean boolean16 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test8521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8521");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        boolean boolean45 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        boolean boolean62 = strComparator57.equals((java.lang.Object) strComparator61);
        java.lang.Object[] objArray64 = new java.lang.Object[] { '4', strComparator54, strComparator57, 0.0d };
        generator49.setArrays(objArray64);
        java.lang.ClassLoader classLoader66 = null;
        generator49.setClassLoader(classLoader66);
        generator49.setAttemptLoad(true);
        generator49.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        boolean boolean79 = generator76.getAttemptLoad();
        boolean boolean80 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator76.getStrategy();
        generator75.setStrategy(generatorStrategy81);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator83.setUseCache(true);
        boolean boolean86 = generator83.getAttemptLoad();
        boolean boolean87 = generator83.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator83.getStrategy();
        generator75.setStrategy(generatorStrategy88);
        generator72.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator72.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator72.getNamingPolicy();
        java.lang.ClassLoader classLoader93 = generator72.getClassLoader();
        generator49.setClassLoader(classLoader93);
        generator0.setClassLoader(classLoader93);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(generatorStrategy96);
    }

    @Test
    public void test8522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8522");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        generator14.setAttemptLoad(true);
        boolean boolean21 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = generator14.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator24.setArrays(objArray42);
        generator14.setArrays(objArray42);
        generator0.setArrays(objArray42);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generator47.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        boolean boolean69 = strComparator64.equals((java.lang.Object) strComparator68);
        java.lang.Object[] objArray71 = new java.lang.Object[] { '4', strComparator61, strComparator64, 0.0d };
        generator56.setArrays(objArray71);
        generator47.setArrays(objArray71);
        generator0.setArrays(objArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter79 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test8523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8523");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        boolean boolean20 = strComparator15.equals((java.lang.Object) strComparator19);
        java.lang.Object[] objArray22 = new java.lang.Object[] { '4', strComparator12, strComparator15, 0.0d };
        generator7.setArrays(objArray22);
        generator4.setArrays(objArray22);
        generator0.setArrays(objArray22);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test8524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8524");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test8525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8525");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = null;
        generator31.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        boolean boolean38 = generator31.getUseCache();
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        generator31.setArrays(objArray39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        generator41.setUseCache(true);
        generator41.setUseCache(false);
        boolean boolean52 = generator41.getUseCache();
        java.lang.ClassLoader classLoader53 = generator41.getClassLoader();
        boolean boolean54 = generator41.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        boolean boolean71 = strComparator66.equals((java.lang.Object) strComparator70);
        java.lang.Object[] objArray73 = new java.lang.Object[] { '4', strComparator63, strComparator66, 0.0d };
        generator58.setArrays(objArray73);
        generator55.setArrays(objArray73);
        generator41.setArrays(objArray73);
        generator31.setArrays(objArray73);
        java.lang.ClassLoader classLoader78 = generator31.getClassLoader();
        generator0.setClassLoader(classLoader78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test8526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8526");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
    }

    @Test
    public void test8527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8527");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy21);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator8.getStrategy();
        java.lang.ClassLoader classLoader26 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader26);
        boolean boolean28 = generator0.getUseCache();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = strComparator38.thenComparing(strComparator39);
        boolean boolean43 = strComparator35.equals((java.lang.Object) strComparator39);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        java.lang.ClassLoader classLoader61 = null;
        generator44.setClassLoader(classLoader61);
        boolean boolean63 = generator44.getAttemptLoad();
        boolean boolean64 = strComparator39.equals((java.lang.Object) generator44);
        boolean boolean65 = generator44.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = generator44.getClassLoader();
        generator0.setClassLoader(classLoader66);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test8528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8528");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = generator4.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
    }

    @Test
    public void test8529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8529");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator14.getStrategy();
        boolean boolean22 = generator14.getAttemptLoad();
        boolean boolean23 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = generator14.getClassLoader();
        generator14.setUseCache(true);
        java.lang.ClassLoader classLoader27 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test8530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8530");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator30.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        generator30.setArrays(objArray60);
        generator23.setArrays(objArray60);
        generator0.setArrays(objArray60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass69 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test8531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8531");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator10.getStrategy();
        generator10.setAttemptLoad(false);
        generator10.setUseCache(false);
        generator10.setUseCache(false);
        generator10.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        boolean boolean41 = strComparator36.equals((java.lang.Object) strComparator40);
        java.lang.Object[] objArray43 = new java.lang.Object[] { '4', strComparator33, strComparator36, 0.0d };
        generator28.setArrays(objArray43);
        generator20.setArrays(objArray43);
        generator10.setArrays(objArray43);
        generator0.setArrays(objArray43);
        java.lang.ClassLoader classLoader48 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        generator49.setUseCache(true);
        generator49.setAttemptLoad(true);
        generator49.setUseCache(false);
        boolean boolean62 = generator49.getUseCache();
        boolean boolean63 = generator49.getAttemptLoad();
        boolean boolean64 = generator49.getUseCache();
        boolean boolean65 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator49.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
    }

    @Test
    public void test8532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8532");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test8533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8533");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        java.lang.ClassLoader classLoader43 = generator40.getClassLoader();
        generator0.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator0.getNamingPolicy();
        boolean boolean46 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader47 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test8534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8534");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        boolean boolean15 = generator0.getAttemptLoad();
        boolean boolean16 = generator0.getUseCache();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        boolean boolean19 = generator0.getUseCache();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy36);
        java.lang.ClassLoader classLoader38 = generator23.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator23.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator41.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator41.getStrategy();
        generator23.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator23.getNamingPolicy();
        java.lang.ClassLoader classLoader51 = generator23.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator52.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator60.getStrategy();
        generator52.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = generator52.getClassLoader();
        generator23.setClassLoader(classLoader67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy69);
        java.lang.Class<?> wildcardClass71 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test8535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8535");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        generator9.setUseCache(true);
        generator9.setAttemptLoad(true);
        generator9.setUseCache(false);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator9.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        generator24.setStrategy(generatorStrategy30);
        boolean boolean32 = generator24.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator33.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator48.setStrategy(generatorStrategy59);
        generator33.setStrategy(generatorStrategy59);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator62.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        boolean boolean73 = generator70.getAttemptLoad();
        boolean boolean74 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator70.getStrategy();
        generator62.setStrategy(generatorStrategy75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        generator62.setArrays(objArray92);
        generator33.setArrays(objArray92);
        generator24.setArrays(objArray92);
        generator9.setArrays(objArray92);
        generator0.setArrays(objArray92);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test8536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8536");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getUseCache();
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test8537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8537");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        boolean boolean31 = strComparator26.equals((java.lang.Object) strComparator30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { '4', strComparator23, strComparator26, 0.0d };
        generator18.setArrays(objArray33);
        java.lang.ClassLoader classLoader35 = null;
        generator18.setClassLoader(classLoader35);
        boolean boolean37 = generator18.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = strComparator38.reversed();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator41.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy49);
        boolean boolean51 = strComparator41.equals((java.lang.Object) generator43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator43.getStrategy();
        generator18.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator18.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        boolean boolean69 = generator61.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        boolean boolean83 = strComparator78.equals((java.lang.Object) strComparator82);
        java.lang.Object[] objArray85 = new java.lang.Object[] { '4', strComparator75, strComparator78, 0.0d };
        generator70.setArrays(objArray85);
        generator61.setArrays(objArray85);
        generator55.setArrays(objArray85);
        generator18.setArrays(objArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy90);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator0.getNamingPolicy();
        boolean boolean93 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test8538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8538");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        boolean boolean14 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator6.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = generator34.getClassLoader();
        generator0.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        generator0.setUseCache(true);
        boolean boolean42 = generator0.getAttemptLoad();
        boolean boolean43 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
    }

    @Test
    public void test8539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8539");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        boolean boolean19 = generator0.getUseCache();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        boolean boolean22 = generator0.getUseCache();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator29.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator29.getStrategy();
        generator24.setStrategy(generatorStrategy36);
        boolean boolean38 = strComparator23.equals((java.lang.Object) generator24);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator24.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy39);
        java.lang.Class<?> wildcardClass41 = namingPolicy39.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test8540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8540");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean27 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        generator31.setUseCache(true);
        generator31.setAttemptLoad(true);
        generator31.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator31.getStrategy();
        java.lang.ClassLoader classLoader45 = generator31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator31.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        boolean boolean57 = generator49.getAttemptLoad();
        generator49.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        boolean boolean68 = generator60.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator60.setArrays(objArray84);
        boolean boolean87 = generator60.getAttemptLoad();
        java.lang.Object[] objArray88 = new java.lang.Object[] { generator60 };
        generator49.setArrays(objArray88);
        generator31.setArrays(objArray88);
        generator0.setArrays(objArray88);
        java.lang.ClassLoader classLoader92 = null;
        generator0.setClassLoader(classLoader92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
    }

    @Test
    public void test8541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8541");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = strComparator10.reversed();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator13.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        boolean boolean23 = strComparator13.equals((java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator26.getNamingPolicy();
        boolean boolean35 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator26.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        boolean boolean46 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator38.getNamingPolicy();
        java.lang.ClassLoader classLoader48 = generator38.getClassLoader();
        generator26.setClassLoader(classLoader48);
        generator0.setClassLoader(classLoader48);
        generator0.setAttemptLoad(false);
        boolean boolean53 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test8542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8542");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        boolean boolean41 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        boolean boolean51 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        boolean boolean59 = generator54.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator54.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator54.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator54.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = generator54.getClassLoader();
        generator44.setClassLoader(classLoader65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        boolean boolean83 = strComparator78.equals((java.lang.Object) strComparator82);
        java.lang.Object[] objArray85 = new java.lang.Object[] { '4', strComparator75, strComparator78, 0.0d };
        generator70.setArrays(objArray85);
        generator67.setArrays(objArray85);
        boolean boolean88 = generator67.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator67.getStrategy();
        generator44.setStrategy(generatorStrategy89);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy91);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test8543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8543");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        boolean boolean24 = strComparator19.equals((java.lang.Object) strComparator23);
        java.lang.Object[] objArray26 = new java.lang.Object[] { '4', strComparator16, strComparator19, 0.0d };
        generator11.setArrays(objArray26);
        java.lang.ClassLoader classLoader28 = null;
        generator11.setClassLoader(classLoader28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        boolean boolean43 = strComparator38.equals((java.lang.Object) strComparator42);
        java.lang.Object[] objArray45 = new java.lang.Object[] { '4', strComparator35, strComparator38, 0.0d };
        generator30.setArrays(objArray45);
        java.lang.ClassLoader classLoader47 = null;
        generator30.setClassLoader(classLoader47);
        boolean boolean49 = generator30.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = strComparator50.reversed();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator53.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy61);
        boolean boolean63 = strComparator53.equals((java.lang.Object) generator55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator55.getStrategy();
        generator30.setStrategy(generatorStrategy64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator30.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator30.getStrategy();
        generator11.setStrategy(generatorStrategy67);
        boolean boolean69 = generator11.getAttemptLoad();
        generator11.setAttemptLoad(false);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = strComparator72.reversed();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator75.reversed();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator78.setUseCache(true);
        java.lang.ClassLoader classLoader81 = generator78.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator82.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator82.getStrategy();
        generator78.setStrategy(generatorStrategy85);
        boolean boolean87 = strComparator77.equals((java.lang.Object) generator78);
        java.lang.ClassLoader classLoader88 = generator78.getClassLoader();
        boolean boolean89 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator78.getStrategy();
        generator11.setStrategy(generatorStrategy90);
        generator0.setStrategy(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test8544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8544");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        boolean boolean13 = strComparator3.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator5.getStrategy();
        boolean boolean16 = generator5.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        boolean boolean22 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        java.lang.ClassLoader classLoader24 = generator17.getClassLoader();
        generator5.setClassLoader(classLoader24);
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(true);
        boolean boolean30 = generator5.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = generator5.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter32 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test8545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8545");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        java.lang.ClassLoader classLoader67 = null;
        generator50.setClassLoader(classLoader67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator77.getStrategy();
        generator76.setStrategy(generatorStrategy82);
        generator50.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean91 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test8546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8546");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        generator15.setStrategy(generatorStrategy28);
        generator12.setStrategy(generatorStrategy28);
        generator4.setStrategy(generatorStrategy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        boolean boolean48 = strComparator43.equals((java.lang.Object) strComparator47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { '4', strComparator40, strComparator43, 0.0d };
        generator35.setArrays(objArray50);
        generator32.setArrays(objArray50);
        generator4.setArrays(objArray50);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        generator54.setAttemptLoad(true);
        boolean boolean61 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator54.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator54.getStrategy();
        generator4.setStrategy(generatorStrategy63);
        generator0.setStrategy(generatorStrategy63);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
    }

    @Test
    public void test8547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8547");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator15.getStrategy();
        generator15.setUseCache(true);
        generator15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator23.getStrategy();
        boolean boolean31 = generator23.getAttemptLoad();
        boolean boolean32 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator23.getStrategy();
        generator3.setStrategy(generatorStrategy33);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test8548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8548");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test8549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8549");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator24.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator37.getNamingPolicy();
        generator37.setUseCache(false);
        boolean boolean48 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator37.getNamingPolicy();
        generator37.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator37.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy52);
        generator24.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        generator56.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = null;
        generator70.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator69.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator69.getNamingPolicy();
        generator69.setUseCache(false);
        boolean boolean80 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator69.getNamingPolicy();
        generator69.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator69.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy84);
        generator24.setNamingPolicy(namingPolicy84);
        boolean boolean87 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader88 = generator24.getClassLoader();
        generator0.setClassLoader(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test8550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8550");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        boolean boolean15 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8551");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getUseCache();
        boolean boolean36 = generator0.getAttemptLoad();
        boolean boolean37 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test8552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8552");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator6.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        generator6.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        generator6.setNamingPolicy(namingPolicy47);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        boolean boolean53 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test8553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8553");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = generator15.getClassLoader();
        generator15.setUseCache(true);
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        java.lang.ClassLoader classLoader44 = null;
        generator27.setClassLoader(classLoader44);
        generator27.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = generator27.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        generator56.setAttemptLoad(true);
        boolean boolean63 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator56.getNamingPolicy();
        java.lang.ClassLoader classLoader65 = generator56.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator66.setArrays(objArray84);
        generator56.setArrays(objArray84);
        generator27.setArrays(objArray84);
        generator15.setArrays(objArray84);
        generator0.setArrays(objArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter91 = org.mockito.cglib.util.ParallelSorter.create(objArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test8554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8554");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = generator3.getClassLoader();
        java.lang.ClassLoader classLoader6 = generator3.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        generator7.setAttemptLoad(false);
        boolean boolean24 = generator7.getUseCache();
        java.lang.ClassLoader classLoader25 = generator7.getClassLoader();
        boolean boolean26 = generator7.getUseCache();
        boolean boolean27 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator7.getStrategy();
        java.lang.ClassLoader classLoader29 = generator7.getClassLoader();
        generator3.setClassLoader(classLoader29);
        boolean boolean31 = generator3.getAttemptLoad();
        boolean boolean32 = generator3.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy33);
        boolean boolean35 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator37.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = generator37.getClassLoader();
        generator37.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator37.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        boolean boolean57 = generator54.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator54.getStrategy();
        java.lang.ClassLoader classLoader59 = generator54.getClassLoader();
        generator54.setUseCache(false);
        boolean boolean62 = generator54.getUseCache();
        generator54.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader69 = null;
        generator65.setClassLoader(classLoader69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        boolean boolean85 = strComparator80.equals((java.lang.Object) strComparator84);
        java.lang.Object[] objArray87 = new java.lang.Object[] { '4', strComparator77, strComparator80, 0.0d };
        generator72.setArrays(objArray87);
        generator65.setArrays(objArray87);
        generator54.setArrays(objArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator54.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator37.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        java.lang.Class<?> wildcardClass95 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test8555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8555");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator14.getNamingPolicy();
        boolean boolean23 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator14.setStrategy(generatorStrategy24);
        boolean boolean26 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator14.getStrategy();
        generator14.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        boolean boolean45 = strComparator40.equals((java.lang.Object) strComparator44);
        java.lang.Object[] objArray47 = new java.lang.Object[] { '4', strComparator37, strComparator40, 0.0d };
        generator32.setArrays(objArray47);
        java.lang.ClassLoader classLoader49 = null;
        generator32.setClassLoader(classLoader49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy56);
        boolean boolean58 = generator32.getUseCache();
        java.lang.ClassLoader classLoader59 = generator32.getClassLoader();
        java.lang.ClassLoader classLoader60 = generator32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator32.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy64);
    }

    @Test
    public void test8556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8556");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader24 = generator17.getClassLoader();
        generator0.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        boolean boolean30 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        boolean boolean40 = generator32.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy54);
        generator32.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator32.getNamingPolicy();
        boolean boolean58 = generator32.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator32.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        generator60.setUseCache(true);
        generator60.setUseCache(false);
        boolean boolean71 = generator60.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator60.getNamingPolicy();
        boolean boolean73 = generator60.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = generator60.getClassLoader();
        generator32.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test8557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8557");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        boolean boolean20 = generator14.getUseCache();
        boolean boolean21 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator24.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = generator24.getClassLoader();
        generator24.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator40.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = generator40.getClassLoader();
        generator24.setClassLoader(classLoader53);
        boolean boolean55 = generator24.getAttemptLoad();
        boolean boolean56 = generator24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator24.getNamingPolicy();
        generator24.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator24.getNamingPolicy();
        boolean boolean61 = generator24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator24.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
    }

    @Test
    public void test8558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8558");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator10.setStrategy(generatorStrategy16);
        boolean boolean18 = generator10.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.lang.ClassLoader classLoader23 = null;
        generator20.setClassLoader(classLoader23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator20.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy32);
        generator10.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator10.getNamingPolicy();
        boolean boolean36 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator10.getNamingPolicy();
        java.lang.ClassLoader classLoader38 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader38);
        boolean boolean40 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test8559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8559");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator33.setStrategy(generatorStrategy46);
        generator30.setStrategy(generatorStrategy46);
        generator22.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        boolean boolean66 = strComparator61.equals((java.lang.Object) strComparator65);
        java.lang.Object[] objArray68 = new java.lang.Object[] { '4', strComparator58, strComparator61, 0.0d };
        generator53.setArrays(objArray68);
        generator50.setArrays(objArray68);
        generator22.setArrays(objArray68);
        generator0.setArrays(objArray68);
        boolean boolean73 = generator0.getAttemptLoad();
        boolean boolean74 = generator0.getAttemptLoad();
        boolean boolean75 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test8560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8560");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = generator4.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy31);
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test8561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8561");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        boolean boolean39 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter40 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test8562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8562");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        java.lang.ClassLoader classLoader33 = generator30.getClassLoader();
        generator15.setClassLoader(classLoader33);
        generator12.setClassLoader(classLoader33);
        generator0.setClassLoader(classLoader33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test8563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8563");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator8.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        java.lang.ClassLoader classLoader31 = generator28.getClassLoader();
        generator13.setClassLoader(classLoader31);
        generator10.setClassLoader(classLoader31);
        generator10.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy42);
        boolean boolean44 = generator36.getAttemptLoad();
        generator36.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generator47.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        boolean boolean69 = strComparator64.equals((java.lang.Object) strComparator68);
        java.lang.Object[] objArray71 = new java.lang.Object[] { '4', strComparator61, strComparator64, 0.0d };
        generator56.setArrays(objArray71);
        generator47.setArrays(objArray71);
        boolean boolean74 = generator47.getAttemptLoad();
        java.lang.Object[] objArray75 = new java.lang.Object[] { generator47 };
        generator36.setArrays(objArray75);
        generator10.setArrays(objArray75);
        generator8.setArrays(objArray75);
        boolean boolean79 = generator8.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy80);
        java.lang.ClassLoader classLoader82 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(namingPolicy83);
    }

    @Test
    public void test8564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8564");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy36);
        boolean boolean38 = generator12.getUseCache();
        java.lang.ClassLoader classLoader39 = generator12.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy41);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test8565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8565");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        generator19.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = generator19.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator19.getNamingPolicy();
        generator19.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        boolean boolean46 = generator38.getUseCache();
        boolean boolean47 = generator38.getUseCache();
        generator38.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        java.lang.ClassLoader classLoader53 = generator50.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy76);
        generator50.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator50.getStrategy();
        generator38.setStrategy(generatorStrategy80);
        boolean boolean82 = generator38.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator38.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy83);
        boolean boolean85 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(namingPolicy86);
    }

    @Test
    public void test8566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8566");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator29.getStrategy();
        generator29.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        generator33.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator33.getNamingPolicy();
        boolean boolean41 = generator33.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        boolean boolean55 = strComparator50.equals((java.lang.Object) strComparator54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { '4', strComparator47, strComparator50, 0.0d };
        generator42.setArrays(objArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator42.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy60);
        generator29.setNamingPolicy(namingPolicy60);
        generator0.setNamingPolicy(namingPolicy60);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test8567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8567");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test8568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8568");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        boolean boolean14 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator6.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = generator34.getClassLoader();
        generator0.setClassLoader(classLoader37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        generator39.setAttemptLoad(true);
        boolean boolean46 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator39.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator52.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator60.getStrategy();
        generator52.setStrategy(generatorStrategy65);
        generator49.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator49.getStrategy();
        java.lang.ClassLoader classLoader71 = generator49.getClassLoader();
        generator39.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = generator39.getClassLoader();
        generator0.setClassLoader(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test8569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8569");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator51.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        boolean boolean65 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test8570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8570");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass52 = namingPolicy51.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test8571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8571");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        boolean boolean29 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        java.lang.ClassLoader classLoader38 = generator33.getClassLoader();
        generator33.setUseCache(false);
        boolean boolean41 = generator33.getUseCache();
        generator33.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        boolean boolean64 = strComparator59.equals((java.lang.Object) strComparator63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { '4', strComparator56, strComparator59, 0.0d };
        generator51.setArrays(objArray66);
        generator44.setArrays(objArray66);
        generator33.setArrays(objArray66);
        generator0.setArrays(objArray66);
        boolean boolean71 = generator0.getAttemptLoad();
        boolean boolean72 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader75 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test8572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8572");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader24 = generator17.getClassLoader();
        generator0.setClassLoader(classLoader24);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test8573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8573");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean10 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test8574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8574");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator31.getClassLoader();
        generator16.setClassLoader(classLoader34);
        generator13.setClassLoader(classLoader34);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator39.setStrategy(generatorStrategy45);
        boolean boolean47 = generator39.getAttemptLoad();
        generator39.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy56);
        boolean boolean58 = generator50.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        generator50.setArrays(objArray74);
        boolean boolean77 = generator50.getAttemptLoad();
        java.lang.Object[] objArray78 = new java.lang.Object[] { generator50 };
        generator39.setArrays(objArray78);
        generator13.setArrays(objArray78);
        generator0.setArrays(objArray78);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader84 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter85 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(classLoader84);
    }

    @Test
    public void test8575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8575");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getUseCache();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader10);
    }

    @Test
    public void test8576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8576");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setUseCache(true);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator3.getNamingPolicy();
        generator3.setUseCache(true);
        boolean boolean20 = generator3.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator21.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        boolean boolean43 = strComparator38.equals((java.lang.Object) strComparator42);
        java.lang.Object[] objArray45 = new java.lang.Object[] { '4', strComparator35, strComparator38, 0.0d };
        generator30.setArrays(objArray45);
        generator21.setArrays(objArray45);
        generator21.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy72);
        java.lang.ClassLoader classLoader74 = generator50.getClassLoader();
        generator50.setUseCache(false);
        generator50.setUseCache(false);
        boolean boolean79 = generator50.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator50.getNamingPolicy();
        generator50.setAttemptLoad(false);
        java.lang.ClassLoader classLoader83 = generator50.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator50.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy84);
        java.lang.ClassLoader classLoader86 = generator21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator21.getStrategy();
        generator3.setStrategy(generatorStrategy87);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test8577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8577");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator32.getStrategy();
        generator25.setStrategy(generatorStrategy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator35.getClassLoader();
        generator25.setClassLoader(classLoader38);
        boolean boolean40 = generator25.getAttemptLoad();
        boolean boolean41 = generator25.getUseCache();
        generator25.setUseCache(false);
        generator25.setUseCache(false);
        java.lang.ClassLoader classLoader46 = generator25.getClassLoader();
        generator25.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        generator25.setAttemptLoad(false);
        generator25.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter57 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test8578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8578");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.reverseOrder();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator3.thenComparing(strComparator7);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        boolean boolean11 = strComparator8.equals((java.lang.Object) boolean10);
        java.util.Comparator<java.lang.String> strComparator12 = strComparator8.reversed();
        int int15 = strComparator8.compare("hi!", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test8579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8579");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator14.getStrategy();
        generator7.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        boolean boolean35 = generator22.getUseCache();
        boolean boolean36 = generator22.getAttemptLoad();
        boolean boolean37 = generator22.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator38.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader46 = generator22.getClassLoader();
        generator22.setAttemptLoad(false);
        boolean boolean49 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator22.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
    }

    @Test
    public void test8580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8580");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator15.getStrategy();
        generator10.setStrategy(generatorStrategy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator24.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = generator24.getClassLoader();
        generator24.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator40.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = generator40.getClassLoader();
        generator24.setClassLoader(classLoader53);
        generator10.setClassLoader(classLoader53);
        generator0.setClassLoader(classLoader53);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(classLoader53);
    }

    @Test
    public void test8581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8581");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        generator7.setAttemptLoad(false);
        boolean boolean24 = generator7.getUseCache();
        java.lang.ClassLoader classLoader25 = generator7.getClassLoader();
        boolean boolean26 = generator7.getUseCache();
        boolean boolean27 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator7.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator32.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator32.getStrategy();
        boolean boolean40 = generator32.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        boolean boolean54 = strComparator49.equals((java.lang.Object) strComparator53);
        java.lang.Object[] objArray56 = new java.lang.Object[] { '4', strComparator46, strComparator49, 0.0d };
        generator41.setArrays(objArray56);
        java.lang.ClassLoader classLoader58 = null;
        generator41.setClassLoader(classLoader58);
        boolean boolean60 = generator41.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        generator41.setStrategy(generatorStrategy66);
        generator32.setStrategy(generatorStrategy66);
        generator29.setStrategy(generatorStrategy66);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator71.setUseCache(true);
        boolean boolean74 = generator71.getAttemptLoad();
        boolean boolean75 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator71.getStrategy();
        generator70.setStrategy(generatorStrategy76);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator78.setUseCache(true);
        boolean boolean81 = generator78.getAttemptLoad();
        boolean boolean82 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator78.getStrategy();
        generator70.setStrategy(generatorStrategy83);
        generator70.setAttemptLoad(false);
        boolean boolean87 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator70.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator70.getStrategy();
        generator29.setStrategy(generatorStrategy89);
        generator7.setStrategy(generatorStrategy89);
        generator0.setStrategy(generatorStrategy89);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test8582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8582");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy54);
    }

    @Test
    public void test8583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8583");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy31);
        generator7.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        boolean boolean35 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy49);
        generator36.setAttemptLoad(false);
        generator36.setUseCache(false);
        generator36.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator36.getStrategy();
        generator0.setStrategy(generatorStrategy57);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter63 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy57);
    }

    @Test
    public void test8584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8584");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator0.setStrategy(generatorStrategy8);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator11.getStrategy();
        java.lang.ClassLoader classLoader13 = generator11.getClassLoader();
        generator11.setUseCache(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test8585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8585");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        boolean boolean35 = strComparator30.equals((java.lang.Object) strComparator34);
        java.lang.Object[] objArray37 = new java.lang.Object[] { '4', strComparator27, strComparator30, 0.0d };
        generator22.setArrays(objArray37);
        generator14.setArrays(objArray37);
        generator0.setArrays(objArray37);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator43.getNamingPolicy();
        java.lang.ClassLoader classLoader52 = generator43.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator43.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator43.getNamingPolicy();
        boolean boolean55 = generator43.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        boolean boolean69 = strComparator64.equals((java.lang.Object) strComparator68);
        java.lang.Object[] objArray71 = new java.lang.Object[] { '4', strComparator61, strComparator64, 0.0d };
        generator56.setArrays(objArray71);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader74 = null;
        generator73.setClassLoader(classLoader74);
        java.lang.ClassLoader classLoader76 = null;
        generator73.setClassLoader(classLoader76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader80 = generator56.getClassLoader();
        generator56.setUseCache(false);
        generator56.setUseCache(false);
        boolean boolean85 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator56.getNamingPolicy();
        generator56.setAttemptLoad(false);
        java.lang.ClassLoader classLoader89 = generator56.getClassLoader();
        generator43.setClassLoader(classLoader89);
        java.lang.ClassLoader classLoader91 = generator43.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator43.getStrategy();
        generator0.setStrategy(generatorStrategy92);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test8586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8586");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        boolean boolean24 = generator19.getAttemptLoad();
        generator19.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test8587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8587");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator19.setStrategy(generatorStrategy32);
        generator16.setStrategy(generatorStrategy32);
        generator8.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        boolean boolean52 = strComparator47.equals((java.lang.Object) strComparator51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { '4', strComparator44, strComparator47, 0.0d };
        generator39.setArrays(objArray54);
        generator36.setArrays(objArray54);
        generator8.setArrays(objArray54);
        generator7.setArrays(objArray54);
        generator0.setArrays(objArray54);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean66 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test8588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8588");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator3 = strComparator2.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
    }

    @Test
    public void test8589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8589");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator3.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator3.getStrategy();
        boolean boolean11 = generator3.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        boolean boolean31 = generator12.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        generator3.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader41 = generator0.getClassLoader();
        boolean boolean42 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy49);
        boolean boolean51 = generator43.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy65);
        generator43.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator43.getNamingPolicy();
        boolean boolean69 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator43.getNamingPolicy();
        generator43.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy78);
        generator0.setNamingPolicy(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test8590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8590");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        java.lang.ClassLoader classLoader16 = generator13.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        generator3.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader23 = generator3.getClassLoader();
        generator3.setUseCache(true);
        generator3.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        boolean boolean41 = strComparator36.equals((java.lang.Object) strComparator40);
        java.lang.Object[] objArray43 = new java.lang.Object[] { '4', strComparator33, strComparator36, 0.0d };
        generator28.setArrays(objArray43);
        java.lang.ClassLoader classLoader45 = generator28.getClassLoader();
        generator3.setClassLoader(classLoader45);
        generator3.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator3.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy49);
    }

    @Test
    public void test8591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8591");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        boolean boolean30 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
    }

    @Test
    public void test8592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8592");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy21);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator8.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator26.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy34);
        generator0.setNamingPolicy(namingPolicy34);
        boolean boolean37 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader41 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader42);
    }

    @Test
    public void test8593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8593");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator51.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter67 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
    }

    @Test
    public void test8594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8594");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test8595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8595");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy19);
        boolean boolean21 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator13.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        generator23.setUseCache(true);
        generator23.setAttemptLoad(true);
        generator23.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        generator36.setUseCache(false);
        boolean boolean41 = generator36.getAttemptLoad();
        boolean boolean42 = generator36.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy49);
        boolean boolean51 = generator43.getAttemptLoad();
        generator43.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator54.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        boolean boolean76 = strComparator71.equals((java.lang.Object) strComparator75);
        java.lang.Object[] objArray78 = new java.lang.Object[] { '4', strComparator68, strComparator71, 0.0d };
        generator63.setArrays(objArray78);
        generator54.setArrays(objArray78);
        boolean boolean81 = generator54.getAttemptLoad();
        java.lang.Object[] objArray82 = new java.lang.Object[] { generator54 };
        generator43.setArrays(objArray82);
        generator36.setArrays(objArray82);
        generator23.setArrays(objArray82);
        generator13.setArrays(objArray82);
        generator0.setArrays(objArray82);
        boolean boolean88 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test8596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8596");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator10.getStrategy();
        generator10.setUseCache(false);
        java.lang.ClassLoader classLoader18 = generator10.getClassLoader();
        java.lang.ClassLoader classLoader19 = generator10.getClassLoader();
        java.lang.ClassLoader classLoader20 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator21.setClassLoader(classLoader51);
        boolean boolean53 = generator21.getUseCache();
        java.lang.ClassLoader classLoader54 = generator21.getClassLoader();
        java.lang.ClassLoader classLoader55 = generator21.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        generator56.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator63.getStrategy();
        generator56.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        java.lang.ClassLoader classLoader69 = generator66.getClassLoader();
        generator56.setClassLoader(classLoader69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator56.setArrays(objArray86);
        generator21.setArrays(objArray86);
        generator10.setArrays(objArray86);
        generator0.setArrays(objArray86);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test8597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8597");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        boolean boolean10 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass15 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test8598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8598");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator66.getStrategy();
        generator59.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator69.setUseCache(true);
        java.lang.ClassLoader classLoader72 = generator69.getClassLoader();
        generator59.setClassLoader(classLoader72);
        generator53.setClassLoader(classLoader72);
        java.lang.ClassLoader classLoader75 = generator53.getClassLoader();
        java.lang.ClassLoader classLoader76 = generator53.getClassLoader();
        generator0.setClassLoader(classLoader76);
        java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader79 = null;
        generator0.setClassLoader(classLoader79);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test8599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8599");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        java.lang.ClassLoader classLoader33 = generator30.getClassLoader();
        generator15.setClassLoader(classLoader33);
        generator12.setClassLoader(classLoader33);
        generator0.setClassLoader(classLoader33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader50 = null;
        generator47.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        java.lang.ClassLoader classLoader57 = generator54.getClassLoader();
        generator39.setClassLoader(classLoader57);
        generator39.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = generator61.getClassLoader();
        generator39.setClassLoader(classLoader64);
        boolean boolean66 = generator39.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        generator67.setStrategy(generatorStrategy78);
        java.lang.ClassLoader classLoader80 = generator67.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator67.getNamingPolicy();
        generator67.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator67.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        boolean boolean88 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test8600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8600");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader33 = generator18.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator18.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator36.getStrategy();
        generator18.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy46);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy50);
    }

    @Test
    public void test8601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8601");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        generator11.setClassLoader(classLoader15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator17.setStrategy(generatorStrategy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        generator17.setStrategy(generatorStrategy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator32.setStrategy(generatorStrategy43);
        generator17.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator46.setStrategy(generatorStrategy59);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        boolean boolean74 = strComparator69.equals((java.lang.Object) strComparator73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { '4', strComparator66, strComparator69, 0.0d };
        generator61.setArrays(objArray76);
        generator46.setArrays(objArray76);
        generator17.setArrays(objArray76);
        generator11.setArrays(objArray76);
        generator0.setArrays(objArray76);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test8602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8602");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        boolean boolean34 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        boolean boolean43 = generator35.getUseCache();
        boolean boolean44 = generator35.getUseCache();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = strComparator45.reversed();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator48.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy56);
        boolean boolean58 = strComparator48.equals((java.lang.Object) generator50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator50.getStrategy();
        generator35.setStrategy(generatorStrategy59);
        boolean boolean61 = generator35.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator35.getStrategy();
        generator0.setStrategy(generatorStrategy62);
        java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass65 = classLoader64.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test8603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8603");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test8604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8604");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator26.setStrategy(generatorStrategy37);
        generator11.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader45 = null;
        generator41.setClassLoader(classLoader45);
        generator41.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator41.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy56);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator50.setStrategy(generatorStrategy63);
        generator50.setAttemptLoad(false);
        java.lang.ClassLoader classLoader67 = generator50.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        boolean boolean81 = strComparator76.equals((java.lang.Object) strComparator80);
        java.lang.Object[] objArray83 = new java.lang.Object[] { '4', strComparator73, strComparator76, 0.0d };
        generator68.setArrays(objArray83);
        java.lang.ClassLoader classLoader85 = generator68.getClassLoader();
        generator50.setClassLoader(classLoader85);
        generator41.setClassLoader(classLoader85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator41.getStrategy();
        generator0.setStrategy(generatorStrategy88);
        boolean boolean90 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test8605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8605");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        boolean boolean18 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        boolean boolean24 = generator0.getAttemptLoad();
        java.lang.Object[] objArray25 = null;
        generator0.setArrays(objArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        boolean boolean28 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter29 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test8606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8606");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        generator15.setStrategy(generatorStrategy28);
        generator12.setStrategy(generatorStrategy28);
        boolean boolean31 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy33);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test8607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8607");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator35.setStrategy(generatorStrategy46);
        generator20.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator49.setStrategy(generatorStrategy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        boolean boolean77 = strComparator72.equals((java.lang.Object) strComparator76);
        java.lang.Object[] objArray79 = new java.lang.Object[] { '4', strComparator69, strComparator72, 0.0d };
        generator64.setArrays(objArray79);
        generator49.setArrays(objArray79);
        generator20.setArrays(objArray79);
        generator14.setArrays(objArray79);
        generator0.setArrays(objArray79);
        java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean88 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        boolean boolean91 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test8608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8608");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        java.lang.ClassLoader classLoader37 = null;
        generator20.setClassLoader(classLoader37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy52);
        generator20.setStrategy(generatorStrategy52);
        generator12.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader56 = generator12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator12.getStrategy();
        boolean boolean58 = generator12.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader59);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test8609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8609");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        boolean boolean26 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        generator32.setUseCache(true);
        boolean boolean41 = strComparator29.equals((java.lang.Object) generator32);
        java.lang.ClassLoader classLoader42 = generator32.getClassLoader();
        boolean boolean43 = generator32.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = generator44.getClassLoader();
        generator44.setUseCache(true);
        generator44.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator44.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = generator32.getClassLoader();
        generator0.setClassLoader(classLoader55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        java.lang.ClassLoader classLoader61 = null;
        generator57.setClassLoader(classLoader61);
        generator57.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator57.getNamingPolicy();
        generator57.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        boolean boolean71 = generator68.getAttemptLoad();
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        generator68.setUseCache(true);
        generator68.setAttemptLoad(true);
        generator68.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator68.getStrategy();
        java.lang.ClassLoader classLoader82 = generator68.getClassLoader();
        generator57.setClassLoader(classLoader82);
        generator0.setClassLoader(classLoader82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter86 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test8610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8610");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        generator19.setUseCache(true);
        generator19.setAttemptLoad(true);
        generator19.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator19.getStrategy();
        java.lang.ClassLoader classLoader33 = generator19.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        boolean boolean47 = strComparator42.equals((java.lang.Object) strComparator46);
        java.lang.Object[] objArray49 = new java.lang.Object[] { '4', strComparator39, strComparator42, 0.0d };
        generator34.setArrays(objArray49);
        generator19.setArrays(objArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator19.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator53.setStrategy(generatorStrategy59);
        generator53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator53.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = generator19.getClassLoader();
        java.lang.ClassLoader classLoader66 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader66);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test8611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8611");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy36);
        generator10.setNamingPolicy(namingPolicy36);
        generator0.setNamingPolicy(namingPolicy36);
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        boolean boolean56 = strComparator51.equals((java.lang.Object) strComparator55);
        java.lang.Object[] objArray58 = new java.lang.Object[] { '4', strComparator48, strComparator51, 0.0d };
        generator43.setArrays(objArray58);
        java.lang.ClassLoader classLoader60 = null;
        generator43.setClassLoader(classLoader60);
        boolean boolean62 = generator43.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = strComparator63.reversed();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator66.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy74);
        boolean boolean76 = strComparator66.equals((java.lang.Object) generator68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator68.getStrategy();
        generator43.setStrategy(generatorStrategy77);
        generator0.setStrategy(generatorStrategy77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test8612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8612");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy21);
        boolean boolean23 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator15.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        generator25.setUseCache(true);
        generator25.setAttemptLoad(true);
        generator25.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator38.getStrategy();
        java.lang.ClassLoader classLoader40 = generator38.getClassLoader();
        generator38.setUseCache(false);
        boolean boolean43 = generator38.getAttemptLoad();
        boolean boolean44 = generator38.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator45.setStrategy(generatorStrategy51);
        boolean boolean53 = generator45.getAttemptLoad();
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy62);
        boolean boolean64 = generator56.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        boolean boolean78 = strComparator73.equals((java.lang.Object) strComparator77);
        java.lang.Object[] objArray80 = new java.lang.Object[] { '4', strComparator70, strComparator73, 0.0d };
        generator65.setArrays(objArray80);
        generator56.setArrays(objArray80);
        boolean boolean83 = generator56.getAttemptLoad();
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator56 };
        generator45.setArrays(objArray84);
        generator38.setArrays(objArray84);
        generator25.setArrays(objArray84);
        generator15.setArrays(objArray84);
        generator0.setArrays(objArray84);
        boolean boolean90 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter92 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test8613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8613");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        generator20.setClassLoader(classLoader24);
        generator20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator20.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        java.lang.ClassLoader classLoader46 = generator29.getClassLoader();
        generator20.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        boolean boolean55 = generator52.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        generator0.setStrategy(generatorStrategy56);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        java.lang.ClassLoader classLoader61 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test8614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8614");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        boolean boolean45 = strComparator40.equals((java.lang.Object) strComparator44);
        java.lang.Object[] objArray47 = new java.lang.Object[] { '4', strComparator37, strComparator40, 0.0d };
        generator32.setArrays(objArray47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy54);
        generator0.setNamingPolicy(namingPolicy54);
        boolean boolean57 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        boolean boolean59 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator60.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        generator60.setStrategy(generatorStrategy71);
        boolean boolean73 = generator60.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator74.setUseCache(true);
        boolean boolean77 = generator74.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = null;
        generator74.setClassLoader(classLoader78);
        generator74.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator82.setUseCache(true);
        boolean boolean85 = generator82.getAttemptLoad();
        boolean boolean86 = generator82.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator82.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator82.getStrategy();
        generator74.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator74.getStrategy();
        generator60.setStrategy(generatorStrategy90);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator60.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy92);
        generator0.setUseCache(true);
        boolean boolean96 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test8615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8615");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        java.lang.ClassLoader classLoader30 = generator23.getClassLoader();
        generator6.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = generator6.getClassLoader();
        boolean boolean33 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        boolean boolean47 = strComparator42.equals((java.lang.Object) strComparator46);
        java.lang.Object[] objArray49 = new java.lang.Object[] { '4', strComparator39, strComparator42, 0.0d };
        generator34.setArrays(objArray49);
        java.lang.ClassLoader classLoader51 = generator34.getClassLoader();
        generator34.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator34.getStrategy();
        generator6.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test8616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8616");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator17.setStrategy(generatorStrategy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        generator17.setStrategy(generatorStrategy30);
        generator14.setStrategy(generatorStrategy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = generator33.getClassLoader();
        generator14.setClassLoader(classLoader35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        generator44.setStrategy(generatorStrategy50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator44.setStrategy(generatorStrategy57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        generator44.setArrays(objArray74);
        generator37.setArrays(objArray74);
        generator14.setArrays(objArray74);
        generator0.setArrays(objArray74);
        boolean boolean80 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test8617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8617");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        generator0.setNamingPolicy(namingPolicy41);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test8618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8618");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        generator11.setAttemptLoad(true);
        generator11.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator24.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        generator32.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator32.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy53);
        generator40.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator40.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader62 = null;
        generator59.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator58.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy66);
        generator32.setNamingPolicy(namingPolicy66);
        generator11.setNamingPolicy(namingPolicy66);
        generator0.setNamingPolicy(namingPolicy66);
        boolean boolean71 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test8619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8619");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        boolean boolean19 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test8620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8620");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean31 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test8621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8621");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        boolean boolean20 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator12.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        boolean boolean36 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy37);
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test8622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8622");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator0.setArrays(objArray59);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        generator66.setAttemptLoad(true);
        generator66.setUseCache(true);
        boolean boolean75 = strComparator63.equals((java.lang.Object) generator66);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        java.lang.ClassLoader classLoader79 = generator76.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator80.getStrategy();
        generator76.setStrategy(generatorStrategy83);
        generator66.setStrategy(generatorStrategy83);
        generator0.setStrategy(generatorStrategy83);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test8623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8623");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        boolean boolean20 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass21 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test8624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8624");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy21);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator8.getStrategy();
        java.lang.ClassLoader classLoader26 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader26);
        boolean boolean28 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test8625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8625");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test8626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8626");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        boolean boolean24 = strComparator19.equals((java.lang.Object) strComparator23);
        java.lang.Object[] objArray26 = new java.lang.Object[] { '4', strComparator16, strComparator19, 0.0d };
        generator11.setArrays(objArray26);
        java.lang.ClassLoader classLoader28 = null;
        generator11.setClassLoader(classLoader28);
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator36.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test8627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8627");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(true);
        generator10.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator23.getStrategy();
        java.lang.ClassLoader classLoader25 = generator23.getClassLoader();
        generator23.setUseCache(false);
        boolean boolean28 = generator23.getAttemptLoad();
        boolean boolean29 = generator23.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        boolean boolean38 = generator30.getAttemptLoad();
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator41.setArrays(objArray65);
        boolean boolean68 = generator41.getAttemptLoad();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator41 };
        generator30.setArrays(objArray69);
        generator23.setArrays(objArray69);
        generator10.setArrays(objArray69);
        generator0.setArrays(objArray69);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean77 = generator0.getUseCache();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter80 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test8628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8628");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator6.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        generator6.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        generator6.setNamingPolicy(namingPolicy47);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean51 = generator0.getUseCache();
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        boolean boolean53 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test8629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8629");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy16);
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        generator19.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = generator19.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator19.getNamingPolicy();
        generator19.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator19.getNamingPolicy();
        java.lang.ClassLoader classLoader37 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter41 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy40);
    }

    @Test
    public void test8630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8630");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        boolean boolean14 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator6.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = generator34.getClassLoader();
        generator0.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test8631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8631");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        boolean boolean34 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter38 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
    }

    @Test
    public void test8632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8632");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean34 = generator0.getUseCache();
        boolean boolean35 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test8633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8633");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        boolean boolean29 = strComparator24.equals((java.lang.Object) strComparator28);
        java.lang.Object[] objArray31 = new java.lang.Object[] { '4', strComparator21, strComparator24, 0.0d };
        generator16.setArrays(objArray31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        boolean boolean53 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = generator46.getClassLoader();
        generator0.setClassLoader(classLoader56);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test8634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8634");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator6.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        generator6.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        generator6.setNamingPolicy(namingPolicy47);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean51 = generator0.getUseCache();
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test8635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8635");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        generator14.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        generator14.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator32.getStrategy();
        java.lang.ClassLoader classLoader34 = generator32.getClassLoader();
        generator32.setUseCache(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator38.getStrategy();
        java.lang.ClassLoader classLoader40 = generator38.getClassLoader();
        generator38.setUseCache(false);
        boolean boolean43 = generator38.getUseCache();
        java.lang.ClassLoader classLoader44 = generator38.getClassLoader();
        generator32.setClassLoader(classLoader44);
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        boolean boolean52 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test8636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8636");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        boolean boolean19 = generator11.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        generator11.setArrays(objArray35);
        boolean boolean38 = generator11.getAttemptLoad();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator11 };
        generator0.setArrays(objArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader50 = null;
        generator47.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator57.setStrategy(generatorStrategy70);
        generator54.setStrategy(generatorStrategy70);
        generator46.setStrategy(generatorStrategy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        generator74.setArrays(objArray92);
        generator46.setArrays(objArray92);
        generator0.setArrays(objArray92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test6501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6501");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
    }

    @Test
    public void test6502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6502");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        boolean boolean24 = strComparator19.equals((java.lang.Object) strComparator23);
        java.lang.Object[] objArray26 = new java.lang.Object[] { '4', strComparator16, strComparator19, 0.0d };
        generator11.setArrays(objArray26);
        java.lang.ClassLoader classLoader28 = null;
        generator11.setClassLoader(classLoader28);
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader32);
        boolean boolean34 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator37.getStrategy();
        generator37.setUseCache(true);
        generator37.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator37.getStrategy();
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test6503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6503");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean10 = generator0.getUseCache();
        boolean boolean11 = generator0.getAttemptLoad();
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test6504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6504");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean10 = generator0.getAttemptLoad();
        boolean boolean11 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6505");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        java.lang.ClassLoader classLoader22 = generator19.getClassLoader();
        generator9.setClassLoader(classLoader22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator24.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator37.getNamingPolicy();
        generator37.setUseCache(false);
        boolean boolean48 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator37.getNamingPolicy();
        generator37.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator37.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy52);
        generator24.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        generator56.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = null;
        generator70.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator69.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator69.getNamingPolicy();
        generator69.setUseCache(false);
        boolean boolean80 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator69.getNamingPolicy();
        generator69.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator69.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy84);
        generator24.setNamingPolicy(namingPolicy84);
        generator9.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter90 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test6506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6506");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setUseCache(true);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader26 = generator17.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy28);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test6507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6507");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test6508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6508");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test6509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6509");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator0.setNamingPolicy(namingPolicy36);
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
    }

    @Test
    public void test6510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6510");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass10 = generator0.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test6511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6511");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        generator4.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator4.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator4.getStrategy();
        java.lang.ClassLoader classLoader27 = generator4.getClassLoader();
        generator0.setClassLoader(classLoader27);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean35 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test6512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6512");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        boolean boolean16 = generator13.getAttemptLoad();
        generator13.setUseCache(false);
        boolean boolean19 = generator13.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        generator20.setClassLoader(classLoader24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        boolean boolean47 = strComparator42.equals((java.lang.Object) strComparator46);
        java.lang.Object[] objArray49 = new java.lang.Object[] { '4', strComparator39, strComparator42, 0.0d };
        generator34.setArrays(objArray49);
        java.lang.ClassLoader classLoader51 = null;
        generator34.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        generator60.setStrategy(generatorStrategy66);
        generator34.setStrategy(generatorStrategy66);
        generator26.setStrategy(generatorStrategy66);
        generator20.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator20.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy72);
        boolean boolean74 = generator13.getAttemptLoad();
        boolean boolean75 = generator13.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        boolean boolean79 = generator76.getAttemptLoad();
        boolean boolean80 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator76.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator76.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator76.getStrategy();
        boolean boolean84 = generator76.getAttemptLoad();
        boolean boolean85 = generator76.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = generator76.getClassLoader();
        generator13.setClassLoader(classLoader86);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy88);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test6513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6513");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        java.lang.Object[] objArray7 = null;
        generator0.setArrays(objArray7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test6514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6514");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator50.getClassLoader();
        generator50.setUseCache(false);
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator50.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator68.getStrategy();
        generator61.setStrategy(generatorStrategy69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator71.setUseCache(true);
        java.lang.ClassLoader classLoader74 = generator71.getClassLoader();
        generator61.setClassLoader(classLoader74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator61.getStrategy();
        generator61.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        boolean boolean82 = generator79.getAttemptLoad();
        boolean boolean83 = generator79.getUseCache();
        generator79.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator86 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator86.getStrategy();
        generator79.setStrategy(generatorStrategy87);
        org.mockito.cglib.util.ParallelSorter.Generator generator89 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator89.setUseCache(true);
        java.lang.ClassLoader classLoader92 = generator89.getClassLoader();
        generator79.setClassLoader(classLoader92);
        boolean boolean94 = generator79.getAttemptLoad();
        java.lang.ClassLoader classLoader95 = generator79.getClassLoader();
        generator61.setClassLoader(classLoader95);
        generator0.setClassLoader(classLoader95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter98 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(classLoader95);
    }

    @Test
    public void test6515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6515");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.lang.ClassLoader classLoader7 = null;
        generator4.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator4.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        java.lang.ClassLoader classLoader21 = generator18.getClassLoader();
        generator3.setClassLoader(classLoader21);
        generator0.setClassLoader(classLoader21);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        boolean boolean34 = generator26.getAttemptLoad();
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy43);
        boolean boolean45 = generator37.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        generator37.setArrays(objArray61);
        boolean boolean64 = generator37.getAttemptLoad();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator37 };
        generator26.setArrays(objArray65);
        generator0.setArrays(objArray65);
        generator0.setAttemptLoad(false);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = strComparator70.reversed();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator73.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator75.setNamingPolicy(namingPolicy81);
        boolean boolean83 = strComparator73.equals((java.lang.Object) generator75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator75.getStrategy();
        generator0.setStrategy(generatorStrategy84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test6516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6516");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator30 = strComparator25.reversed();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = strComparator40.thenComparing(strComparator41);
        boolean boolean45 = strComparator37.equals((java.lang.Object) strComparator41);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        java.lang.ClassLoader classLoader63 = null;
        generator46.setClassLoader(classLoader63);
        boolean boolean65 = generator46.getAttemptLoad();
        boolean boolean66 = strComparator41.equals((java.lang.Object) generator46);
        boolean boolean67 = strComparator25.equals((java.lang.Object) generator46);
        java.lang.ClassLoader classLoader68 = generator46.getClassLoader();
        generator0.setClassLoader(classLoader68);
        generator0.setUseCache(true);
        boolean boolean72 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test6517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6517");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        java.lang.ClassLoader classLoader16 = generator13.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        generator3.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader23 = generator3.getClassLoader();
        generator3.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator3.generateClass(classVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test6518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6518");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test6519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6519");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        boolean boolean9 = generator0.getUseCache();
        boolean boolean10 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test6520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6520");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader9 = generator7.getClassLoader();
        generator7.setUseCache(false);
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test6521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6521");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6522");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        boolean boolean42 = generator34.getAttemptLoad();
        generator34.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator45.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        generator45.setArrays(objArray69);
        boolean boolean72 = generator45.getAttemptLoad();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator45 };
        generator34.setArrays(objArray73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator34.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        boolean boolean79 = generator76.getAttemptLoad();
        boolean boolean80 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator76.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator76.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator34.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        boolean boolean88 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        boolean boolean90 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test6523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6523");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator18.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator18.setStrategy(generatorStrategy31);
        generator18.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader50 = generator35.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator35.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator53.getStrategy();
        generator35.setStrategy(generatorStrategy60);
        generator18.setStrategy(generatorStrategy60);
        generator0.setStrategy(generatorStrategy60);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test6524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6524");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        boolean boolean52 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test6525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6525");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        java.lang.ClassLoader classLoader13 = generator3.getClassLoader();
        boolean boolean14 = generator3.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = generator15.getClassLoader();
        generator15.setUseCache(true);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator15.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = generator3.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = generator27.getAttemptLoad();
        generator27.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator27.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        boolean boolean62 = strComparator57.equals((java.lang.Object) strComparator61);
        java.lang.Object[] objArray64 = new java.lang.Object[] { '4', strComparator54, strComparator57, 0.0d };
        generator49.setArrays(objArray64);
        generator34.setArrays(objArray64);
        generator27.setArrays(objArray64);
        generator3.setArrays(objArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter69 = generator3.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6526");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator15.getStrategy();
        generator15.setUseCache(true);
        generator15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy21);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        generator25.setUseCache(true);
        generator25.setUseCache(false);
        boolean boolean36 = generator25.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        java.lang.ClassLoader classLoader58 = generator55.getClassLoader();
        generator40.setClassLoader(classLoader58);
        generator37.setClassLoader(classLoader58);
        generator25.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator25.getStrategy();
        generator3.setStrategy(generatorStrategy62);
        boolean boolean64 = generator3.getUseCache();
        java.lang.ClassLoader classLoader65 = generator3.getClassLoader();
        generator3.setAttemptLoad(false);
        boolean boolean68 = generator3.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter69 = generator3.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test6527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6527");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean12 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6528");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator15.getStrategy();
        generator15.setUseCache(true);
        generator15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy21);
        generator3.setAttemptLoad(false);
        generator3.setUseCache(false);
        java.lang.ClassLoader classLoader27 = generator3.getClassLoader();
        boolean boolean28 = generator3.getAttemptLoad();
        generator3.setUseCache(false);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test6529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6529");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy72);
        java.lang.ClassLoader classLoader74 = generator50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator50.getStrategy();
        generator0.setStrategy(generatorStrategy75);
        java.lang.ClassLoader classLoader77 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test6530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6530");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy57);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        boolean boolean70 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader73 = generator63.getClassLoader();
        generator0.setClassLoader(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test6531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6531");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator24.getClassLoader();
        generator24.setUseCache(false);
        generator24.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator24.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        boolean boolean34 = generator0.getUseCache();
        boolean boolean35 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test6532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6532");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
    }

    @Test
    public void test6533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6533");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator10.setStrategy(generatorStrategy16);
        boolean boolean18 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator10.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        generator20.setUseCache(true);
        generator20.setAttemptLoad(true);
        generator20.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator33.getStrategy();
        java.lang.ClassLoader classLoader35 = generator33.getClassLoader();
        generator33.setUseCache(false);
        boolean boolean38 = generator33.getAttemptLoad();
        boolean boolean39 = generator33.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        boolean boolean48 = generator40.getAttemptLoad();
        generator40.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = null;
        generator52.setClassLoader(classLoader55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy57);
        boolean boolean59 = generator51.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        boolean boolean73 = strComparator68.equals((java.lang.Object) strComparator72);
        java.lang.Object[] objArray75 = new java.lang.Object[] { '4', strComparator65, strComparator68, 0.0d };
        generator60.setArrays(objArray75);
        generator51.setArrays(objArray75);
        boolean boolean78 = generator51.getAttemptLoad();
        java.lang.Object[] objArray79 = new java.lang.Object[] { generator51 };
        generator40.setArrays(objArray79);
        generator33.setArrays(objArray79);
        generator20.setArrays(objArray79);
        generator10.setArrays(objArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator10.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy84);
        boolean boolean86 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test6534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6534");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        generator6.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        java.lang.ClassLoader classLoader45 = generator42.getClassLoader();
        generator27.setClassLoader(classLoader45);
        generator24.setClassLoader(classLoader45);
        generator24.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy56);
        boolean boolean58 = generator50.getAttemptLoad();
        generator50.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        boolean boolean69 = generator61.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        boolean boolean83 = strComparator78.equals((java.lang.Object) strComparator82);
        java.lang.Object[] objArray85 = new java.lang.Object[] { '4', strComparator75, strComparator78, 0.0d };
        generator70.setArrays(objArray85);
        generator61.setArrays(objArray85);
        boolean boolean88 = generator61.getAttemptLoad();
        java.lang.Object[] objArray89 = new java.lang.Object[] { generator61 };
        generator50.setArrays(objArray89);
        generator24.setArrays(objArray89);
        generator11.setArrays(objArray89);
        generator6.setArrays(objArray89);
        generator0.setArrays(objArray89);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test6535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6535");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = generator22.getClassLoader();
        generator0.setClassLoader(classLoader25);
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator28.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = generator28.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator28.getNamingPolicy();
        generator28.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator28.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test6536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6536");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator51.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader69 = null;
        generator65.setClassLoader(classLoader69);
        generator65.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator73.getStrategy();
        generator65.setStrategy(generatorStrategy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator65.getStrategy();
        generator0.setStrategy(generatorStrategy81);
        boolean boolean83 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test6537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6537");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        boolean boolean26 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        boolean boolean50 = strComparator45.equals((java.lang.Object) strComparator49);
        java.lang.Object[] objArray52 = new java.lang.Object[] { '4', strComparator42, strComparator45, 0.0d };
        generator37.setArrays(objArray52);
        java.lang.ClassLoader classLoader54 = null;
        generator37.setClassLoader(classLoader54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy61);
        boolean boolean63 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        generator37.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator37.getStrategy();
        generator0.setStrategy(generatorStrategy68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        boolean boolean71 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test6538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6538");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        generator6.setStrategy(generatorStrategy12);
        generator0.setStrategy(generatorStrategy12);
        generator0.setAttemptLoad(true);
        boolean boolean17 = generator0.getAttemptLoad();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader24);
    }

    @Test
    public void test6539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6539");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        boolean boolean15 = generator0.getAttemptLoad();
        boolean boolean16 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        boolean boolean24 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test6540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6540");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean6 = generator0.getUseCache();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader7);
    }

    @Test
    public void test6541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6541");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean21 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test6542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6542");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator13.setStrategy(generatorStrategy26);
        generator10.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = generator29.getClassLoader();
        generator10.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator33.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator40.setStrategy(generatorStrategy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        boolean boolean68 = strComparator63.equals((java.lang.Object) strComparator67);
        java.lang.Object[] objArray70 = new java.lang.Object[] { '4', strComparator60, strComparator63, 0.0d };
        generator55.setArrays(objArray70);
        generator40.setArrays(objArray70);
        generator33.setArrays(objArray70);
        generator10.setArrays(objArray70);
        generator0.setArrays(objArray70);
        boolean boolean76 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean79 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test6543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6543");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy40);
        generator27.setAttemptLoad(false);
        generator27.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator46.getStrategy();
        generator27.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator27.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator53.setStrategy(generatorStrategy59);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        generator53.setStrategy(generatorStrategy66);
        generator53.setAttemptLoad(false);
        boolean boolean70 = generator53.getUseCache();
        java.lang.ClassLoader classLoader71 = generator53.getClassLoader();
        boolean boolean72 = generator53.getUseCache();
        boolean boolean73 = generator53.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = generator53.getClassLoader();
        generator27.setClassLoader(classLoader74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy76);
        java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(namingPolicy79);
    }

    @Test
    public void test6544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6544");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = strComparator2.reversed();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = strComparator17.thenComparing(strComparator18);
        boolean boolean22 = strComparator14.equals((java.lang.Object) strComparator18);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        boolean boolean42 = generator23.getAttemptLoad();
        boolean boolean43 = strComparator18.equals((java.lang.Object) generator23);
        boolean boolean44 = strComparator2.equals((java.lang.Object) generator23);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        generator45.setUseCache(true);
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        generator56.setStrategy(generatorStrategy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator64.getStrategy();
        generator56.setStrategy(generatorStrategy69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator71.setUseCache(true);
        boolean boolean74 = generator71.getAttemptLoad();
        boolean boolean75 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator71.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator77.getStrategy();
        generator71.setStrategy(generatorStrategy82);
        generator56.setStrategy(generatorStrategy82);
        generator45.setStrategy(generatorStrategy82);
        generator23.setStrategy(generatorStrategy82);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator23.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test6545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6545");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.lang.ClassLoader classLoader7 = null;
        generator4.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator4.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        java.lang.ClassLoader classLoader21 = generator18.getClassLoader();
        generator3.setClassLoader(classLoader21);
        generator0.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
    }

    @Test
    public void test6546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6546");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator7.getStrategy();
        boolean boolean15 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test6547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6547");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test6548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6548");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy72);
        java.lang.ClassLoader classLoader74 = generator50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator50.getStrategy();
        generator0.setStrategy(generatorStrategy75);
        boolean boolean77 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean80 = generator0.getUseCache();
        boolean boolean81 = generator0.getUseCache();
        boolean boolean82 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test6549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6549");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        java.lang.ClassLoader classLoader17 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        boolean boolean22 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test6550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6550");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        boolean boolean24 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        java.lang.ClassLoader classLoader26 = generator21.getClassLoader();
        generator0.setClassLoader(classLoader26);
        boolean boolean28 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean34 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test6551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6551");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator19.setStrategy(generatorStrategy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator19.setStrategy(generatorStrategy32);
        generator16.setStrategy(generatorStrategy32);
        generator8.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        boolean boolean52 = strComparator47.equals((java.lang.Object) strComparator51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { '4', strComparator44, strComparator47, 0.0d };
        generator39.setArrays(objArray54);
        generator36.setArrays(objArray54);
        generator8.setArrays(objArray54);
        generator7.setArrays(objArray54);
        generator0.setArrays(objArray54);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy62);
    }

    @Test
    public void test6552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6552");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test6553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6553");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator22.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = generator22.getClassLoader();
        generator22.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator38.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = generator38.getClassLoader();
        generator22.setClassLoader(classLoader51);
        boolean boolean53 = generator22.getAttemptLoad();
        generator22.setUseCache(true);
        generator22.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        generator58.setUseCache(true);
        generator58.setUseCache(false);
        boolean boolean69 = generator58.getUseCache();
        java.lang.ClassLoader classLoader70 = generator58.getClassLoader();
        boolean boolean71 = generator58.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        boolean boolean88 = strComparator83.equals((java.lang.Object) strComparator87);
        java.lang.Object[] objArray90 = new java.lang.Object[] { '4', strComparator80, strComparator83, 0.0d };
        generator75.setArrays(objArray90);
        generator72.setArrays(objArray90);
        generator58.setArrays(objArray90);
        generator22.setArrays(objArray90);
        generator0.setArrays(objArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter96 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6554");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        java.lang.ClassLoader classLoader16 = generator13.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        generator3.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader23 = generator3.getClassLoader();
        generator3.setUseCache(false);
        generator3.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = generator3.getClassLoader();
        generator3.setUseCache(false);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader28);
    }

    @Test
    public void test6555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6555");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        java.lang.ClassLoader classLoader58 = null;
        generator54.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator54.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader63 = null;
        generator0.setClassLoader(classLoader63);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test6556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6556");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator21.getStrategy();
        generator14.setStrategy(generatorStrategy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        java.lang.ClassLoader classLoader27 = generator24.getClassLoader();
        generator14.setClassLoader(classLoader27);
        generator8.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader30 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader30);
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        boolean boolean34 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean37 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test6557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6557");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        java.lang.ClassLoader classLoader9 = generator7.getClassLoader();
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        boolean boolean15 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test6558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6558");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test6559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6559");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        int int3 = strComparator0.compare("", "");
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = strComparator4.reversed();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator7.reversed();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.reversed();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator0.thenComparing(strComparator7);
        int int13 = strComparator0.compare("", "");
        int int16 = strComparator0.compare("hi!", "");
        java.util.Comparator<java.lang.String> strComparator17 = strComparator0.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(strComparator17);
    }

    @Test
    public void test6560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6560");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        generator34.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator34.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator34.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        boolean boolean44 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test6561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6561");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.nullsFirst(strComparator0);
        int int4 = strComparator1.compare("hi!", "hi!");
        java.util.Comparator<java.lang.String> strComparator5 = strComparator1.reversed();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator5.reversed();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
    }

    @Test
    public void test6562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6562");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test6563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6563");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test6564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6564");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy14);
        boolean boolean16 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator8.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = generator8.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator32.getStrategy();
        generator25.setStrategy(generatorStrategy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator35.getClassLoader();
        generator25.setClassLoader(classLoader38);
        generator19.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator52.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator60.getStrategy();
        generator52.setStrategy(generatorStrategy65);
        generator49.setStrategy(generatorStrategy65);
        generator41.setStrategy(generatorStrategy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        boolean boolean85 = strComparator80.equals((java.lang.Object) strComparator84);
        java.lang.Object[] objArray87 = new java.lang.Object[] { '4', strComparator77, strComparator80, 0.0d };
        generator72.setArrays(objArray87);
        generator69.setArrays(objArray87);
        generator41.setArrays(objArray87);
        generator19.setArrays(objArray87);
        boolean boolean92 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader93 = generator19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator19.getStrategy();
        generator8.setStrategy(generatorStrategy94);
        generator0.setStrategy(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test6565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6565");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        java.lang.ClassLoader classLoader67 = null;
        generator50.setClassLoader(classLoader67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator77.getStrategy();
        generator76.setStrategy(generatorStrategy82);
        generator50.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = null;
        generator0.setStrategy(generatorStrategy87);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        boolean boolean90 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test6566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6566");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        boolean boolean49 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        generator42.setUseCache(true);
        generator42.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator56.getStrategy();
        java.lang.ClassLoader classLoader58 = generator56.getClassLoader();
        generator56.setUseCache(false);
        boolean boolean61 = generator56.getUseCache();
        java.lang.ClassLoader classLoader62 = generator56.getClassLoader();
        java.lang.ClassLoader classLoader63 = generator56.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator56.getNamingPolicy();
        boolean boolean65 = generator56.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        boolean boolean79 = strComparator74.equals((java.lang.Object) strComparator78);
        java.lang.Object[] objArray81 = new java.lang.Object[] { '4', strComparator71, strComparator74, 0.0d };
        generator66.setArrays(objArray81);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader84 = null;
        generator83.setClassLoader(classLoader84);
        java.lang.ClassLoader classLoader86 = null;
        generator83.setClassLoader(classLoader86);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator83.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy88);
        java.lang.ClassLoader classLoader90 = generator66.getClassLoader();
        generator56.setClassLoader(classLoader90);
        generator42.setClassLoader(classLoader90);
        generator0.setClassLoader(classLoader90);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test6567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6567");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.lang.ClassLoader classLoader7 = null;
        generator4.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator4.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        java.lang.ClassLoader classLoader21 = generator18.getClassLoader();
        generator3.setClassLoader(classLoader21);
        generator0.setClassLoader(classLoader21);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        boolean boolean34 = generator26.getAttemptLoad();
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy43);
        boolean boolean45 = generator37.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        generator37.setArrays(objArray61);
        boolean boolean64 = generator37.getAttemptLoad();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator37 };
        generator26.setArrays(objArray65);
        generator0.setArrays(objArray65);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(generatorStrategy70);
    }

    @Test
    public void test6568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6568");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator12.setStrategy(generatorStrategy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator25.getNamingPolicy();
        generator25.setUseCache(false);
        boolean boolean36 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator25.getNamingPolicy();
        generator25.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy40);
        generator7.setNamingPolicy(namingPolicy40);
        boolean boolean43 = generator7.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        generator44.setArrays(objArray62);
        generator7.setArrays(objArray62);
        generator0.setArrays(objArray62);
        boolean boolean67 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean70 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test6569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6569");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator8.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        generator26.setUseCache(true);
        generator26.setAttemptLoad(true);
        boolean boolean37 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator26.getNamingPolicy();
        generator26.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        boolean boolean54 = strComparator49.equals((java.lang.Object) strComparator53);
        java.lang.Object[] objArray56 = new java.lang.Object[] { '4', strComparator46, strComparator49, 0.0d };
        generator41.setArrays(objArray56);
        java.lang.ClassLoader classLoader58 = null;
        generator41.setClassLoader(classLoader58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        boolean boolean71 = generator68.getAttemptLoad();
        boolean boolean72 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator68.getStrategy();
        generator67.setStrategy(generatorStrategy73);
        generator41.setStrategy(generatorStrategy73);
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader78 = generator41.getClassLoader();
        generator26.setClassLoader(classLoader78);
        java.lang.ClassLoader classLoader80 = generator26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator26.getStrategy();
        java.lang.ClassLoader classLoader82 = generator26.getClassLoader();
        generator0.setClassLoader(classLoader82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        generator0.setUseCache(true);
        boolean boolean87 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test6570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6570");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy35);
        boolean boolean37 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        generator40.setUseCache(true);
        generator40.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        boolean boolean59 = generator51.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = null;
        generator68.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy73);
        generator51.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator51.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator51.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy77);
        generator22.setNamingPolicy(namingPolicy77);
        generator0.setNamingPolicy(namingPolicy77);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy83);
    }

    @Test
    public void test6571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6571");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        boolean boolean39 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator40.setArrays(objArray63);
        generator0.setArrays(objArray63);
        boolean boolean67 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
    }

    @Test
    public void test6572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6572");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        generator4.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator4.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        generator0.setUseCache(false);
        boolean boolean22 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean25 = generator0.getAttemptLoad();
        boolean boolean26 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test6573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6573");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        boolean boolean17 = generator0.getUseCache();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        java.lang.ClassLoader classLoader36 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter40 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test6574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6574");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator35.getStrategy();
        generator28.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        java.lang.ClassLoader classLoader41 = generator38.getClassLoader();
        generator28.setClassLoader(classLoader41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        boolean boolean56 = strComparator51.equals((java.lang.Object) strComparator55);
        java.lang.Object[] objArray58 = new java.lang.Object[] { '4', strComparator48, strComparator51, 0.0d };
        generator43.setArrays(objArray58);
        generator28.setArrays(objArray58);
        generator28.setAttemptLoad(false);
        java.lang.ClassLoader classLoader63 = generator28.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator28.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(namingPolicy64);
    }

    @Test
    public void test6575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6575");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        generator8.setUseCache(true);
        generator8.setAttemptLoad(true);
        generator8.setUseCache(false);
        boolean boolean21 = generator8.getUseCache();
        boolean boolean22 = generator8.getAttemptLoad();
        boolean boolean23 = generator8.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator24.getStrategy();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        generator29.setUseCache(true);
        generator29.setAttemptLoad(true);
        generator29.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator42.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy48);
        generator24.setNamingPolicy(namingPolicy48);
        generator8.setNamingPolicy(namingPolicy48);
        generator0.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test6576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6576");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        boolean boolean30 = strComparator25.equals((java.lang.Object) strComparator29);
        java.lang.Object[] objArray32 = new java.lang.Object[] { '4', strComparator22, strComparator25, 0.0d };
        generator17.setArrays(objArray32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator17.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator17.getStrategy();
        java.lang.ClassLoader classLoader38 = generator17.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator45.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        generator45.setArrays(objArray69);
        generator39.setArrays(objArray69);
        generator17.setArrays(objArray69);
        generator0.setArrays(objArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter75 = org.mockito.cglib.util.ParallelSorter.create(objArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6577");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        boolean boolean6 = generator0.getAttemptLoad();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = generator8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator8.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator34.getStrategy();
        java.lang.ClassLoader classLoader36 = generator34.getClassLoader();
        generator34.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator44.getStrategy();
        generator39.setStrategy(generatorStrategy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator53.setStrategy(generatorStrategy64);
        java.lang.ClassLoader classLoader66 = generator53.getClassLoader();
        generator53.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator69.setUseCache(true);
        boolean boolean72 = generator69.getAttemptLoad();
        boolean boolean73 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator69.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator75.setUseCache(true);
        boolean boolean78 = generator75.getAttemptLoad();
        boolean boolean79 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator75.getStrategy();
        generator69.setStrategy(generatorStrategy80);
        java.lang.ClassLoader classLoader82 = generator69.getClassLoader();
        generator53.setClassLoader(classLoader82);
        generator39.setClassLoader(classLoader82);
        generator34.setClassLoader(classLoader82);
        generator8.setClassLoader(classLoader82);
        generator0.setClassLoader(classLoader82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test6578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6578");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        boolean boolean39 = strComparator34.equals((java.lang.Object) strComparator38);
        java.lang.Object[] objArray41 = new java.lang.Object[] { '4', strComparator31, strComparator34, 0.0d };
        generator26.setArrays(objArray41);
        java.lang.ClassLoader classLoader43 = null;
        generator26.setClassLoader(classLoader43);
        generator26.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator26.getStrategy();
        generator0.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        generator49.setUseCache(true);
        generator49.setAttemptLoad(true);
        generator49.setUseCache(false);
        boolean boolean62 = generator49.getUseCache();
        boolean boolean63 = generator49.getAttemptLoad();
        generator49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator49.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test6579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6579");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        boolean boolean29 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        java.lang.ClassLoader classLoader38 = generator33.getClassLoader();
        generator33.setUseCache(false);
        boolean boolean41 = generator33.getUseCache();
        generator33.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        boolean boolean64 = strComparator59.equals((java.lang.Object) strComparator63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { '4', strComparator56, strComparator59, 0.0d };
        generator51.setArrays(objArray66);
        generator44.setArrays(objArray66);
        generator33.setArrays(objArray66);
        generator0.setArrays(objArray66);
        boolean boolean71 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test6580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6580");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        boolean boolean8 = strComparator3.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator9 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator3.reversed();
        int int13 = strComparator10.compare("hi!", "hi!");
        int int16 = strComparator10.compare("", "hi!");
        int int19 = strComparator10.compare("", "");
        java.util.Comparator<java.lang.String> strComparator20 = strComparator10.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator20.reversed();
        int int24 = strComparator20.compare("hi!", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test6581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6581");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        boolean boolean18 = generator0.getUseCache();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        boolean boolean20 = generator0.getUseCache();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = strComparator21.reversed();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator24.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        boolean boolean34 = strComparator24.equals((java.lang.Object) generator26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator26.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator26.getStrategy();
        boolean boolean37 = generator26.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        boolean boolean46 = generator38.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy60);
        generator38.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator38.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy63);
        generator0.setNamingPolicy(namingPolicy63);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test6582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6582");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator5.setStrategy(generatorStrategy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator5.setStrategy(generatorStrategy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator20.setStrategy(generatorStrategy31);
        generator5.setStrategy(generatorStrategy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        boolean boolean50 = strComparator45.equals((java.lang.Object) strComparator49);
        java.lang.Object[] objArray52 = new java.lang.Object[] { '4', strComparator42, strComparator45, 0.0d };
        generator37.setArrays(objArray52);
        generator34.setArrays(objArray52);
        generator5.setArrays(objArray52);
        generator0.setArrays(objArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter57 = org.mockito.cglib.util.ParallelSorter.create(objArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6583");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = null;
        generator9.setClassLoader(classLoader26);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy51);
        generator38.setAttemptLoad(false);
        generator38.setUseCache(false);
        generator38.setAttemptLoad(false);
        java.lang.ClassLoader classLoader59 = generator38.getClassLoader();
        generator0.setClassLoader(classLoader59);
        boolean boolean61 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test6584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6584");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy48);
        generator36.setStrategy(generatorStrategy48);
        generator0.setStrategy(generatorStrategy48);
        boolean boolean52 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        generator53.setUseCache(true);
        generator53.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        generator64.setClassLoader(classLoader67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = generator53.getClassLoader();
        java.lang.ClassLoader classLoader72 = generator53.getClassLoader();
        generator0.setClassLoader(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader72);
    }

    @Test
    public void test6585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6585");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = generator30.getClassLoader();
        generator0.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
    }

    @Test
    public void test6586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6586");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator22.getUseCache();
        boolean boolean31 = generator22.getUseCache();
        generator22.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator22.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test6587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6587");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        java.lang.ClassLoader classLoader22 = generator19.getClassLoader();
        generator9.setClassLoader(classLoader22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator24.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator37.getNamingPolicy();
        generator37.setUseCache(false);
        boolean boolean48 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator37.getNamingPolicy();
        generator37.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator37.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy52);
        generator24.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        generator56.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = null;
        generator70.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator69.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator69.getNamingPolicy();
        generator69.setUseCache(false);
        boolean boolean80 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator69.getNamingPolicy();
        generator69.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator69.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy84);
        generator24.setNamingPolicy(namingPolicy84);
        generator9.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test6588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6588");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test6589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6589");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy15);
        boolean boolean17 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy31);
        generator9.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator9.getNamingPolicy();
        boolean boolean35 = generator9.getUseCache();
        java.lang.ClassLoader classLoader36 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader36);
        boolean boolean38 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test6590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6590");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        boolean boolean33 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean36 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test6591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6591");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator20.setAttemptLoad(false);
        boolean boolean37 = generator20.getUseCache();
        java.lang.ClassLoader classLoader38 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator43.getStrategy();
        java.lang.ClassLoader classLoader45 = generator43.getClassLoader();
        generator43.setUseCache(false);
        boolean boolean48 = generator43.getUseCache();
        java.lang.ClassLoader classLoader49 = generator43.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator50.getStrategy();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        generator55.setUseCache(true);
        generator55.setAttemptLoad(true);
        generator55.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = null;
        generator68.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator68.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy74);
        generator50.setNamingPolicy(namingPolicy74);
        generator43.setNamingPolicy(namingPolicy74);
        generator0.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader80 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator81 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator82.setUseCache(true);
        boolean boolean85 = generator82.getAttemptLoad();
        boolean boolean86 = generator82.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator82.getStrategy();
        generator81.setStrategy(generatorStrategy87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator81.getStrategy();
        boolean boolean90 = generator81.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator81.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy91);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test6592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6592");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test6593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6593");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        boolean boolean29 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test6594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6594");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        boolean boolean14 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader15);
    }

    @Test
    public void test6595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6595");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        boolean boolean25 = generator17.getUseCache();
        boolean boolean26 = generator17.getUseCache();
        generator17.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        java.lang.ClassLoader classLoader32 = generator29.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        boolean boolean46 = strComparator41.equals((java.lang.Object) strComparator45);
        java.lang.Object[] objArray48 = new java.lang.Object[] { '4', strComparator38, strComparator41, 0.0d };
        generator33.setArrays(objArray48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator50.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy55);
        generator29.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator29.getStrategy();
        generator17.setStrategy(generatorStrategy59);
        generator10.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator10.setStrategy(generatorStrategy62);
        generator10.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        java.lang.ClassLoader classLoader69 = generator66.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader74 = null;
        generator73.setClassLoader(classLoader74);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = strComparator83.thenComparing(strComparator84);
        boolean boolean86 = strComparator81.equals((java.lang.Object) strComparator85);
        java.lang.Object[] objArray88 = new java.lang.Object[] { '4', strComparator78, strComparator81, 0.0d };
        generator73.setArrays(objArray88);
        generator70.setArrays(objArray88);
        generator66.setArrays(objArray88);
        generator10.setArrays(objArray88);
        generator0.setArrays(objArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter94 = org.mockito.cglib.util.ParallelSorter.create(objArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6596");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test6597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6597");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator36.setStrategy(generatorStrategy49);
        generator36.setAttemptLoad(false);
        boolean boolean53 = generator36.getUseCache();
        java.lang.ClassLoader classLoader54 = generator36.getClassLoader();
        boolean boolean55 = generator36.getUseCache();
        boolean boolean56 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = generator36.getClassLoader();
        generator0.setClassLoader(classLoader57);
        boolean boolean59 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test6598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6598");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy41);
        generator28.setAttemptLoad(false);
        generator28.setUseCache(false);
        generator28.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator28.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        boolean boolean51 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test6599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6599");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6600");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test6601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6601");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        boolean boolean24 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        java.lang.ClassLoader classLoader26 = generator21.getClassLoader();
        generator0.setClassLoader(classLoader26);
        boolean boolean28 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test6602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6602");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        generator20.setUseCache(true);
        generator20.setAttemptLoad(true);
        generator20.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator20.getStrategy();
        java.lang.ClassLoader classLoader34 = generator20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator38.getNamingPolicy();
        java.lang.ClassLoader classLoader47 = generator38.getClassLoader();
        generator0.setClassLoader(classLoader47);
        boolean boolean49 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        generator50.setStrategy(generatorStrategy61);
        boolean boolean63 = generator50.getAttemptLoad();
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator50.getStrategy();
        generator0.setStrategy(generatorStrategy67);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter69 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
    }

    @Test
    public void test6603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6603");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        int int3 = strComparator0.compare("", "hi!");
        int int6 = strComparator0.compare("hi!", "");
        int int9 = strComparator0.compare("hi!", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test6604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6604");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        generator23.setStrategy(generatorStrategy55);
        generator15.setStrategy(generatorStrategy55);
        generator9.setStrategy(generatorStrategy55);
        generator0.setStrategy(generatorStrategy55);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = generator63.getClassLoader();
        java.lang.ClassLoader classLoader66 = generator63.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        boolean boolean71 = generator68.getAttemptLoad();
        boolean boolean72 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator68.getStrategy();
        generator67.setStrategy(generatorStrategy73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator75.setUseCache(true);
        boolean boolean78 = generator75.getAttemptLoad();
        boolean boolean79 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator75.getStrategy();
        generator67.setStrategy(generatorStrategy80);
        generator63.setStrategy(generatorStrategy80);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator83.getStrategy();
        generator63.setStrategy(generatorStrategy84);
        generator0.setStrategy(generatorStrategy84);
        org.mockito.cglib.util.ParallelSorter.Generator generator87 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator87.getStrategy();
        generator87.setUseCache(true);
        generator87.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator87.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter95 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test6605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6605");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter41 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test6606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6606");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator0.setArrays(objArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        boolean boolean61 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test6607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6607");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test6608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6608");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        boolean boolean18 = generator15.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator15.getStrategy();
        java.lang.ClassLoader classLoader20 = generator15.getClassLoader();
        boolean boolean21 = generator15.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator34.setStrategy(generatorStrategy47);
        generator31.setStrategy(generatorStrategy47);
        generator23.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        generator51.setArrays(objArray69);
        generator23.setArrays(objArray69);
        generator22.setArrays(objArray69);
        generator15.setArrays(objArray69);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        boolean boolean79 = generator76.getAttemptLoad();
        boolean boolean80 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator76.getStrategy();
        generator75.setStrategy(generatorStrategy81);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator83.setUseCache(true);
        boolean boolean86 = generator83.getAttemptLoad();
        boolean boolean87 = generator83.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator83.getStrategy();
        generator75.setStrategy(generatorStrategy88);
        generator75.setAttemptLoad(false);
        boolean boolean92 = generator75.getUseCache();
        java.lang.ClassLoader classLoader93 = generator75.getClassLoader();
        generator15.setClassLoader(classLoader93);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator15.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy98);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(generatorStrategy97);
        org.junit.Assert.assertNotNull(namingPolicy98);
    }

    @Test
    public void test6609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6609");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        boolean boolean41 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
    }

    @Test
    public void test6610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6610");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator26.setStrategy(generatorStrategy39);
        generator26.setAttemptLoad(false);
        boolean boolean43 = generator26.getUseCache();
        java.lang.ClassLoader classLoader44 = generator26.getClassLoader();
        boolean boolean45 = generator26.getUseCache();
        boolean boolean46 = generator26.getAttemptLoad();
        java.lang.ClassLoader classLoader47 = generator26.getClassLoader();
        generator0.setClassLoader(classLoader47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        java.lang.ClassLoader classLoader70 = generator67.getClassLoader();
        generator52.setClassLoader(classLoader70);
        generator49.setClassLoader(classLoader70);
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = generator49.getClassLoader();
        generator0.setClassLoader(classLoader75);
        boolean boolean77 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test6611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6611");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator12.setStrategy(generatorStrategy25);
        generator12.setAttemptLoad(false);
        boolean boolean29 = generator12.getUseCache();
        java.lang.ClassLoader classLoader30 = generator12.getClassLoader();
        generator12.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator39.setArrays(objArray63);
        generator33.setArrays(objArray63);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = generator67.getClassLoader();
        generator33.setClassLoader(classLoader70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator33.getStrategy();
        generator12.setStrategy(generatorStrategy72);
        generator12.setAttemptLoad(false);
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader78 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader78);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test6612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6612");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        java.lang.ClassLoader classLoader37 = null;
        generator20.setClassLoader(classLoader37);
        boolean boolean39 = generator20.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        generator40.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        java.lang.ClassLoader classLoader63 = null;
        generator46.setClassLoader(classLoader63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        generator72.setStrategy(generatorStrategy78);
        generator46.setStrategy(generatorStrategy78);
        org.mockito.cglib.util.ParallelSorter.Generator generator81 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader83 = null;
        generator82.setClassLoader(classLoader83);
        java.lang.ClassLoader classLoader85 = null;
        generator82.setClassLoader(classLoader85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator82.getNamingPolicy();
        generator81.setNamingPolicy(namingPolicy87);
        generator46.setNamingPolicy(namingPolicy87);
        generator40.setNamingPolicy(namingPolicy87);
        generator20.setNamingPolicy(namingPolicy87);
        generator0.setNamingPolicy(namingPolicy87);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator0.getNamingPolicy();
        boolean boolean94 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test6613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6613");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator0.setStrategy(generatorStrategy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        generator22.setUseCache(false);
        boolean boolean30 = generator22.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        java.lang.ClassLoader classLoader48 = null;
        generator31.setClassLoader(classLoader48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator50.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        generator31.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy72);
        generator31.setNamingPolicy(namingPolicy72);
        generator22.setNamingPolicy(namingPolicy72);
        generator0.setNamingPolicy(namingPolicy72);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy79);
    }

    @Test
    public void test6614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6614");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy19);
        boolean boolean21 = generator13.getAttemptLoad();
        generator13.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        boolean boolean32 = generator24.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        boolean boolean46 = strComparator41.equals((java.lang.Object) strComparator45);
        java.lang.Object[] objArray48 = new java.lang.Object[] { '4', strComparator38, strComparator41, 0.0d };
        generator33.setArrays(objArray48);
        generator24.setArrays(objArray48);
        boolean boolean51 = generator24.getAttemptLoad();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator24 };
        generator13.setArrays(objArray52);
        generator0.setArrays(objArray52);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        boolean boolean69 = generator61.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        boolean boolean83 = strComparator78.equals((java.lang.Object) strComparator82);
        java.lang.Object[] objArray85 = new java.lang.Object[] { '4', strComparator75, strComparator78, 0.0d };
        generator70.setArrays(objArray85);
        generator61.setArrays(objArray85);
        generator55.setArrays(objArray85);
        org.mockito.cglib.util.ParallelSorter.Generator generator89 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader90 = null;
        generator89.setClassLoader(classLoader90);
        java.lang.ClassLoader classLoader92 = generator89.getClassLoader();
        generator55.setClassLoader(classLoader92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator55.getStrategy();
        generator0.setStrategy(generatorStrategy94);
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = null;
        generator0.setNamingPolicy(namingPolicy97);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter99 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test6615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6615");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        generator15.setUseCache(true);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator21.getStrategy();
        java.lang.ClassLoader classLoader23 = generator21.getClassLoader();
        generator21.setUseCache(false);
        boolean boolean26 = generator21.getAttemptLoad();
        boolean boolean27 = generator21.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy34);
        boolean boolean36 = generator28.getAttemptLoad();
        generator28.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator39.setArrays(objArray63);
        boolean boolean66 = generator39.getAttemptLoad();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator39 };
        generator28.setArrays(objArray67);
        generator21.setArrays(objArray67);
        generator15.setArrays(objArray67);
        generator0.setArrays(objArray67);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        java.lang.Object[] objArray75 = null;
        generator0.setArrays(objArray75);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test6616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6616");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setUseCache(true);
        boolean boolean23 = strComparator11.equals((java.lang.Object) generator14);
        generator14.setAttemptLoad(false);
        boolean boolean26 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test6617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6617");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator20.setAttemptLoad(false);
        boolean boolean37 = generator20.getUseCache();
        java.lang.ClassLoader classLoader38 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator40.getStrategy();
        java.lang.ClassLoader classLoader42 = generator40.getClassLoader();
        generator0.setClassLoader(classLoader42);
        boolean boolean44 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean47 = generator0.getUseCache();
        boolean boolean48 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test6618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6618");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = null;
        generator9.setClassLoader(classLoader26);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader50 = null;
        generator47.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy52);
        java.lang.ClassLoader classLoader54 = generator39.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator39.getStrategy();
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy59);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader63);
    }

    @Test
    public void test6619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6619");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        boolean boolean29 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test6620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6620");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test6621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6621");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        java.lang.ClassLoader classLoader37 = null;
        generator20.setClassLoader(classLoader37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        generator46.setStrategy(generatorStrategy52);
        generator20.setStrategy(generatorStrategy52);
        generator12.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader56 = generator12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator12.getStrategy();
        boolean boolean58 = generator12.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader59);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
    }

    @Test
    public void test6622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6622");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator0.setStrategy(generatorStrategy51);
        boolean boolean53 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test6623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6623");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        boolean boolean29 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        generator33.setUseCache(true);
        generator33.setAttemptLoad(true);
        boolean boolean44 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator33.getNamingPolicy();
        generator33.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        java.lang.ClassLoader classLoader65 = null;
        generator48.setClassLoader(classLoader65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator75.setUseCache(true);
        boolean boolean78 = generator75.getAttemptLoad();
        boolean boolean79 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator75.getStrategy();
        generator74.setStrategy(generatorStrategy80);
        generator48.setStrategy(generatorStrategy80);
        generator48.setAttemptLoad(true);
        java.lang.ClassLoader classLoader85 = generator48.getClassLoader();
        generator33.setClassLoader(classLoader85);
        java.lang.ClassLoader classLoader87 = generator33.getClassLoader();
        generator0.setClassLoader(classLoader87);
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass91 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test6624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6624");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader50 = generator6.getClassLoader();
        generator0.setClassLoader(classLoader50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator52.getNamingPolicy();
        java.lang.ClassLoader classLoader61 = generator52.getClassLoader();
        generator0.setClassLoader(classLoader61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator64.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        boolean boolean73 = generator70.getAttemptLoad();
        boolean boolean74 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator70.getStrategy();
        generator64.setStrategy(generatorStrategy75);
        java.lang.ClassLoader classLoader77 = generator64.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator64.getNamingPolicy();
        generator64.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator64.getStrategy();
        generator0.setStrategy(generatorStrategy81);
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test6625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6625");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator0.setNamingPolicy(namingPolicy34);
        boolean boolean36 = generator0.getUseCache();
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test6626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6626");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        boolean boolean16 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test6627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6627");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator60.getStrategy();
        generator53.setStrategy(generatorStrategy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        java.lang.ClassLoader classLoader66 = generator63.getClassLoader();
        generator53.setClassLoader(classLoader66);
        generator47.setClassLoader(classLoader66);
        generator0.setClassLoader(classLoader66);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        boolean boolean75 = generator72.getAttemptLoad();
        boolean boolean76 = generator72.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        generator77.setAttemptLoad(true);
        generator77.setUseCache(true);
        generator77.setAttemptLoad(true);
        generator77.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator77.getStrategy();
        java.lang.ClassLoader classLoader91 = generator77.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator77.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator77.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator77.getStrategy();
        generator72.setStrategy(generatorStrategy94);
        generator0.setStrategy(generatorStrategy94);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test6628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6628");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
    }

    @Test
    public void test6629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6629");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator14.getStrategy();
        java.lang.ClassLoader classLoader16 = generator14.getClassLoader();
        generator14.setUseCache(false);
        boolean boolean19 = generator14.getUseCache();
        java.lang.ClassLoader classLoader20 = generator14.getClassLoader();
        java.lang.ClassLoader classLoader21 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator14.getNamingPolicy();
        boolean boolean23 = generator14.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator27.setStrategy(generatorStrategy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator27.setStrategy(generatorStrategy40);
        generator24.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.ClassLoader classLoader45 = generator43.getClassLoader();
        generator24.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator47.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        generator54.setStrategy(generatorStrategy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        generator54.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator54.setArrays(objArray84);
        generator47.setArrays(objArray84);
        generator24.setArrays(objArray84);
        generator14.setArrays(objArray84);
        generator0.setArrays(objArray84);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy93);
    }

    @Test
    public void test6630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6630");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(true);
        generator10.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator23.getStrategy();
        java.lang.ClassLoader classLoader25 = generator23.getClassLoader();
        generator23.setUseCache(false);
        boolean boolean28 = generator23.getAttemptLoad();
        boolean boolean29 = generator23.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        boolean boolean38 = generator30.getAttemptLoad();
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator41.setArrays(objArray65);
        boolean boolean68 = generator41.getAttemptLoad();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator41 };
        generator30.setArrays(objArray69);
        generator23.setArrays(objArray69);
        generator10.setArrays(objArray69);
        generator0.setArrays(objArray69);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test6631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6631");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        boolean boolean21 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        boolean boolean37 = strComparator32.equals((java.lang.Object) strComparator36);
        java.lang.Object[] objArray39 = new java.lang.Object[] { '4', strComparator29, strComparator32, 0.0d };
        generator24.setArrays(objArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator24.setClassLoader(classLoader41);
        generator24.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = generator24.getClassLoader();
        boolean boolean53 = generator24.getUseCache();
        generator24.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator24.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test6632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6632");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(true);
        boolean boolean18 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator20.getStrategy();
        java.lang.ClassLoader classLoader22 = generator20.getClassLoader();
        generator20.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator9.setStrategy(generatorStrategy25);
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        boolean boolean43 = generator35.getUseCache();
        boolean boolean44 = generator35.getUseCache();
        generator35.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        java.lang.ClassLoader classLoader50 = generator47.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        boolean boolean64 = strComparator59.equals((java.lang.Object) strComparator63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { '4', strComparator56, strComparator59, 0.0d };
        generator51.setArrays(objArray66);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = null;
        generator68.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy73);
        generator47.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator47.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator47.getStrategy();
        generator35.setStrategy(generatorStrategy77);
        generator28.setStrategy(generatorStrategy77);
        generator0.setStrategy(generatorStrategy77);
        boolean boolean81 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test6633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6633");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
    }

    @Test
    public void test6634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6634");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        boolean boolean24 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        java.lang.ClassLoader classLoader26 = generator21.getClassLoader();
        boolean boolean27 = generator21.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator40.setStrategy(generatorStrategy53);
        generator37.setStrategy(generatorStrategy53);
        generator29.setStrategy(generatorStrategy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        boolean boolean73 = strComparator68.equals((java.lang.Object) strComparator72);
        java.lang.Object[] objArray75 = new java.lang.Object[] { '4', strComparator65, strComparator68, 0.0d };
        generator60.setArrays(objArray75);
        generator57.setArrays(objArray75);
        generator29.setArrays(objArray75);
        generator28.setArrays(objArray75);
        generator21.setArrays(objArray75);
        generator0.setArrays(objArray75);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        boolean boolean85 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test6635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6635");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        java.util.Comparator<java.lang.String> strComparator1 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator1.reversed();
        int int5 = strComparator2.compare("", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test6636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6636");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator15.setStrategy(generatorStrategy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        generator15.setStrategy(generatorStrategy28);
        generator12.setStrategy(generatorStrategy28);
        generator4.setStrategy(generatorStrategy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        boolean boolean48 = strComparator43.equals((java.lang.Object) strComparator47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { '4', strComparator40, strComparator43, 0.0d };
        generator35.setArrays(objArray50);
        generator32.setArrays(objArray50);
        generator4.setArrays(objArray50);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        generator54.setAttemptLoad(true);
        boolean boolean61 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator54.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator54.getStrategy();
        generator4.setStrategy(generatorStrategy63);
        generator0.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test6637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6637");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        generator34.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator34.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator34.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test6638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6638");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        boolean boolean17 = generator9.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        boolean boolean31 = strComparator26.equals((java.lang.Object) strComparator30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { '4', strComparator23, strComparator26, 0.0d };
        generator18.setArrays(objArray33);
        generator9.setArrays(objArray33);
        generator0.setArrays(objArray33);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test6639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6639");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.lang.ClassLoader classLoader7 = null;
        generator4.setClassLoader(classLoader7);
        generator4.setAttemptLoad(true);
        boolean boolean11 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator4.getStrategy();
        java.lang.ClassLoader classLoader14 = generator4.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        generator20.setUseCache(true);
        boolean boolean29 = strComparator17.equals((java.lang.Object) generator20);
        generator20.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator20.getNamingPolicy();
        boolean boolean33 = generator20.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        generator34.setUseCache(true);
        generator34.setAttemptLoad(true);
        generator34.setUseCache(false);
        boolean boolean47 = generator34.getUseCache();
        boolean boolean48 = generator34.getAttemptLoad();
        boolean boolean49 = generator34.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator50.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy56);
        java.lang.ClassLoader classLoader58 = generator34.getClassLoader();
        generator20.setClassLoader(classLoader58);
        boolean boolean60 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
    }

    @Test
    public void test6640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6640");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        boolean boolean40 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator41.getStrategy();
        generator41.setUseCache(true);
        generator41.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator47.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator47.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator41.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy68);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test6641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6641");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean33 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test6642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6642");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator14.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator14.getStrategy();
        java.lang.ClassLoader classLoader35 = generator14.getClassLoader();
        java.lang.ClassLoader classLoader36 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy37);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test6643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6643");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        boolean boolean16 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        java.util.Comparator<java.lang.String> strComparator20 = strComparator17.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator23.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        generator23.setStrategy(generatorStrategy30);
        boolean boolean32 = strComparator22.equals((java.lang.Object) generator23);
        java.lang.ClassLoader classLoader33 = generator23.getClassLoader();
        generator0.setClassLoader(classLoader33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        boolean boolean48 = strComparator43.equals((java.lang.Object) strComparator47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { '4', strComparator40, strComparator43, 0.0d };
        generator35.setArrays(objArray50);
        generator35.setUseCache(true);
        boolean boolean54 = generator35.getUseCache();
        java.lang.ClassLoader classLoader55 = generator35.getClassLoader();
        generator0.setClassLoader(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(classLoader55);
    }

    @Test
    public void test6644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6644");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        boolean boolean34 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test6645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6645");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        boolean boolean37 = generator0.getUseCache();
        boolean boolean38 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test6646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6646");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        boolean boolean45 = strComparator40.equals((java.lang.Object) strComparator44);
        java.lang.Object[] objArray47 = new java.lang.Object[] { '4', strComparator37, strComparator40, 0.0d };
        generator32.setArrays(objArray47);
        java.lang.ClassLoader classLoader49 = null;
        generator32.setClassLoader(classLoader49);
        boolean boolean51 = generator32.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = strComparator52.reversed();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator55.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader61 = null;
        generator58.setClassLoader(classLoader61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy63);
        boolean boolean65 = strComparator55.equals((java.lang.Object) generator57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator57.getStrategy();
        generator32.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator32.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy68);
        generator0.setUseCache(false);
        boolean boolean72 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test6647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6647");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy36);
        generator23.setAttemptLoad(false);
        generator23.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator42.getStrategy();
        generator23.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator23.getNamingPolicy();
        boolean boolean49 = generator23.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator53.setStrategy(generatorStrategy59);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator61.getStrategy();
        generator53.setStrategy(generatorStrategy66);
        generator50.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader69 = generator50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator50.getStrategy();
        generator23.setStrategy(generatorStrategy70);
        generator0.setStrategy(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
    }

    @Test
    public void test6648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6648");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader29 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader29);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test6649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6649");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6650");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        java.lang.ClassLoader classLoader48 = null;
        generator31.setClassLoader(classLoader48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator50.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        generator31.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy72);
        generator31.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator31.getStrategy();
        generator0.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        boolean boolean78 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test6651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6651");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
    }

    @Test
    public void test6652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6652");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        generator3.setAttemptLoad(false);
        boolean boolean15 = generator3.getUseCache();
        generator3.setUseCache(false);
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test6653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6653");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator20.setAttemptLoad(false);
        boolean boolean37 = generator20.getUseCache();
        java.lang.ClassLoader classLoader38 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator0.getNamingPolicy();
        boolean boolean41 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test6654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6654");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = generator30.getClassLoader();
        generator0.setClassLoader(classLoader33);
        generator0.setUseCache(false);
        boolean boolean37 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test6655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6655");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test6656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6656");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test6657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6657");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        int int3 = strComparator0.compare("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test6658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6658");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test6659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6659");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        boolean boolean16 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test6660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6660");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean31 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test6661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6661");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        boolean boolean34 = generator8.getUseCache();
        java.lang.ClassLoader classLoader35 = generator8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator8.getStrategy();
        java.lang.ClassLoader classLoader37 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter40 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy39);
    }

    @Test
    public void test6662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6662");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        java.lang.ClassLoader classLoader16 = generator13.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        generator3.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader23 = generator3.getClassLoader();
        generator3.setUseCache(false);
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        generator30.setUseCache(true);
        generator30.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        generator36.setUseCache(false);
        boolean boolean41 = generator36.getAttemptLoad();
        boolean boolean42 = generator36.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator43.setStrategy(generatorStrategy49);
        boolean boolean51 = generator43.getAttemptLoad();
        generator43.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator54.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        boolean boolean76 = strComparator71.equals((java.lang.Object) strComparator75);
        java.lang.Object[] objArray78 = new java.lang.Object[] { '4', strComparator68, strComparator71, 0.0d };
        generator63.setArrays(objArray78);
        generator54.setArrays(objArray78);
        boolean boolean81 = generator54.getAttemptLoad();
        java.lang.Object[] objArray82 = new java.lang.Object[] { generator54 };
        generator43.setArrays(objArray82);
        generator36.setArrays(objArray82);
        generator30.setArrays(objArray82);
        generator3.setArrays(objArray82);
        boolean boolean87 = generator3.getUseCache();
        generator3.setAttemptLoad(false);
        generator3.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator3.getStrategy();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test6663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6663");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator13.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        generator13.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test6664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6664");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        generator23.setStrategy(generatorStrategy55);
        generator15.setStrategy(generatorStrategy55);
        generator9.setStrategy(generatorStrategy55);
        generator0.setStrategy(generatorStrategy55);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = generator63.getClassLoader();
        java.lang.ClassLoader classLoader66 = generator63.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        boolean boolean71 = generator68.getAttemptLoad();
        boolean boolean72 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator68.getStrategy();
        generator67.setStrategy(generatorStrategy73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator75.setUseCache(true);
        boolean boolean78 = generator75.getAttemptLoad();
        boolean boolean79 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator75.getStrategy();
        generator67.setStrategy(generatorStrategy80);
        generator63.setStrategy(generatorStrategy80);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator83.getStrategy();
        generator63.setStrategy(generatorStrategy84);
        generator0.setStrategy(generatorStrategy84);
        org.mockito.cglib.util.ParallelSorter.Generator generator87 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator87.getStrategy();
        generator87.setUseCache(true);
        generator87.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator87.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test6665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6665");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter24 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
    }

    @Test
    public void test6666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6666");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        boolean boolean50 = strComparator45.equals((java.lang.Object) strComparator49);
        java.lang.Object[] objArray52 = new java.lang.Object[] { '4', strComparator42, strComparator45, 0.0d };
        generator37.setArrays(objArray52);
        java.lang.ClassLoader classLoader54 = null;
        generator37.setClassLoader(classLoader54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator64.getStrategy();
        generator63.setStrategy(generatorStrategy69);
        generator37.setStrategy(generatorStrategy69);
        generator29.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader73 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader73);
        generator0.setAttemptLoad(false);
        java.lang.Object[] objArray77 = null;
        generator0.setArrays(objArray77);
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        boolean boolean82 = generator79.getAttemptLoad();
        boolean boolean83 = generator79.getUseCache();
        generator79.setAttemptLoad(true);
        boolean boolean86 = generator79.getUseCache();
        generator79.setAttemptLoad(true);
        java.lang.ClassLoader classLoader89 = generator79.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator79.getNamingPolicy();
        java.lang.ClassLoader classLoader91 = generator79.getClassLoader();
        generator0.setClassLoader(classLoader91);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test6667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6667");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        java.lang.Object[] objArray9 = null;
        generator0.setArrays(objArray9);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test6668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6668");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator0.setArrays(objArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        boolean boolean61 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator62.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator62.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator62.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator62.getClassLoader();
        generator0.setClassLoader(classLoader73);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter75 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test6669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6669");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        java.lang.Class<?> wildcardClass29 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test6670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6670");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        generator4.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator4.setStrategy(generatorStrategy17);
        generator4.setAttemptLoad(false);
        boolean boolean21 = generator4.getUseCache();
        java.lang.ClassLoader classLoader22 = generator4.getClassLoader();
        boolean boolean23 = generator4.getUseCache();
        boolean boolean24 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator4.getStrategy();
        java.lang.ClassLoader classLoader26 = generator4.getClassLoader();
        generator0.setClassLoader(classLoader26);
        boolean boolean28 = generator0.getAttemptLoad();
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader34 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classLoader34);
    }

    @Test
    public void test6671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6671");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = generator5.getClassLoader();
        generator5.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator21.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = generator21.getClassLoader();
        generator5.setClassLoader(classLoader34);
        boolean boolean36 = generator5.getAttemptLoad();
        boolean boolean37 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator5.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = generator1.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = null;
        generator49.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy54);
        java.lang.ClassLoader classLoader56 = generator41.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator41.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader62 = null;
        generator59.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader67 = generator58.getClassLoader();
        generator41.setClassLoader(classLoader67);
        generator1.setClassLoader(classLoader67);
        generator1.setAttemptLoad(true);
        boolean boolean72 = generator1.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test6672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6672");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test6673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6673");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        boolean boolean37 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        generator39.setUseCache(true);
        generator39.setAttemptLoad(true);
        generator39.setUseCache(false);
        boolean boolean52 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = generator53.getClassLoader();
        java.lang.ClassLoader classLoader56 = generator53.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator57.setStrategy(generatorStrategy70);
        generator53.setStrategy(generatorStrategy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator73.getStrategy();
        generator53.setStrategy(generatorStrategy74);
        generator39.setStrategy(generatorStrategy74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy77);
        boolean boolean79 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator81 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader83 = null;
        generator82.setClassLoader(classLoader83);
        java.lang.ClassLoader classLoader85 = null;
        generator82.setClassLoader(classLoader85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator82.getNamingPolicy();
        generator81.setNamingPolicy(namingPolicy87);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator81.getNamingPolicy();
        java.lang.ClassLoader classLoader90 = generator81.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator81.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator81.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy92);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test6674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6674");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator15.getStrategy();
        generator8.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        java.lang.ClassLoader classLoader21 = generator18.getClassLoader();
        generator8.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator8.getStrategy();
        boolean boolean24 = generator8.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        boolean boolean28 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator25.getStrategy();
        java.lang.ClassLoader classLoader30 = generator25.getClassLoader();
        boolean boolean31 = generator25.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        generator44.setStrategy(generatorStrategy50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator44.setStrategy(generatorStrategy57);
        generator41.setStrategy(generatorStrategy57);
        generator33.setStrategy(generatorStrategy57);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        boolean boolean77 = strComparator72.equals((java.lang.Object) strComparator76);
        java.lang.Object[] objArray79 = new java.lang.Object[] { '4', strComparator69, strComparator72, 0.0d };
        generator64.setArrays(objArray79);
        generator61.setArrays(objArray79);
        generator33.setArrays(objArray79);
        generator32.setArrays(objArray79);
        generator25.setArrays(objArray79);
        generator8.setArrays(objArray79);
        generator0.setArrays(objArray79);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6675");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test6676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6676");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        generator11.setClassLoader(classLoader15);
        generator11.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader27);
    }

    @Test
    public void test6677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6677");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        generator18.setUseCache(true);
        generator18.setAttemptLoad(true);
        generator18.setUseCache(false);
        boolean boolean31 = generator18.getUseCache();
        boolean boolean32 = generator18.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        generator33.setUseCache(true);
        generator33.setUseCache(false);
        boolean boolean44 = generator33.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator33.getNamingPolicy();
        boolean boolean46 = generator33.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = generator47.getClassLoader();
        generator33.setClassLoader(classLoader62);
        generator33.setAttemptLoad(false);
        generator33.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy74);
        boolean boolean76 = generator68.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        generator68.setArrays(objArray92);
        generator33.setArrays(objArray92);
        generator18.setArrays(objArray92);
        generator0.setArrays(objArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter98 = org.mockito.cglib.util.ParallelSorter.create(objArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6678");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        boolean boolean20 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator12.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        generator30.setUseCache(true);
        generator30.setAttemptLoad(true);
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator43.getStrategy();
        java.lang.ClassLoader classLoader45 = generator43.getClassLoader();
        generator43.setUseCache(false);
        boolean boolean48 = generator43.getAttemptLoad();
        boolean boolean49 = generator43.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy56);
        boolean boolean58 = generator50.getAttemptLoad();
        generator50.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        boolean boolean69 = generator61.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        boolean boolean83 = strComparator78.equals((java.lang.Object) strComparator82);
        java.lang.Object[] objArray85 = new java.lang.Object[] { '4', strComparator75, strComparator78, 0.0d };
        generator70.setArrays(objArray85);
        generator61.setArrays(objArray85);
        boolean boolean88 = generator61.getAttemptLoad();
        java.lang.Object[] objArray89 = new java.lang.Object[] { generator61 };
        generator50.setArrays(objArray89);
        generator43.setArrays(objArray89);
        generator30.setArrays(objArray89);
        generator0.setArrays(objArray89);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
    }

    @Test
    public void test6679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6679");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        java.util.Comparator<java.lang.String> strComparator1 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.reversed();
        int int5 = strComparator0.compare("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test6680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6680");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test6681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6681");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test6682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6682");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        boolean boolean13 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test6683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6683");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader29 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader29);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test6684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6684");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        boolean boolean8 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test6685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6685");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        java.lang.ClassLoader classLoader9 = generator7.getClassLoader();
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        boolean boolean15 = generator0.getUseCache();
        boolean boolean16 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6686");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        boolean boolean19 = generator0.getUseCache();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass23 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test6687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6687");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy14);
        boolean boolean16 = generator8.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy30);
        generator8.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator45.setStrategy(generatorStrategy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator45.setStrategy(generatorStrategy58);
        generator42.setStrategy(generatorStrategy58);
        generator34.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        boolean boolean78 = strComparator73.equals((java.lang.Object) strComparator77);
        java.lang.Object[] objArray80 = new java.lang.Object[] { '4', strComparator70, strComparator73, 0.0d };
        generator65.setArrays(objArray80);
        generator62.setArrays(objArray80);
        generator34.setArrays(objArray80);
        generator33.setArrays(objArray80);
        generator8.setArrays(objArray80);
        generator0.setArrays(objArray80);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        boolean boolean88 = generator0.getUseCache();
        boolean boolean89 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter90 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test6688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6688");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
    }

    @Test
    public void test6689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6689");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy16);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter18 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test6690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6690");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        boolean boolean22 = generator17.getAttemptLoad();
        generator17.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator17.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        boolean boolean27 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test6691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6691");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        generator0.setUseCache(true);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator31.getStrategy();
        generator24.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        java.lang.ClassLoader classLoader37 = generator34.getClassLoader();
        generator24.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator24.getStrategy();
        generator24.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator24.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator24.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
    }

    @Test
    public void test6692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6692");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        boolean boolean14 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator6.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = generator34.getClassLoader();
        generator0.setClassLoader(classLoader37);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator44.getStrategy();
        boolean boolean52 = generator44.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        boolean boolean66 = strComparator61.equals((java.lang.Object) strComparator65);
        java.lang.Object[] objArray68 = new java.lang.Object[] { '4', strComparator58, strComparator61, 0.0d };
        generator53.setArrays(objArray68);
        java.lang.ClassLoader classLoader70 = null;
        generator53.setClassLoader(classLoader70);
        boolean boolean72 = generator53.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        generator53.setStrategy(generatorStrategy78);
        generator44.setStrategy(generatorStrategy78);
        generator41.setStrategy(generatorStrategy78);
        java.lang.ClassLoader classLoader82 = generator41.getClassLoader();
        generator0.setClassLoader(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test6693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6693");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        generator20.setClassLoader(classLoader24);
        generator20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator20.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        java.lang.ClassLoader classLoader46 = generator29.getClassLoader();
        generator20.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        boolean boolean55 = generator52.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        generator0.setStrategy(generatorStrategy56);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter66 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
    }

    @Test
    public void test6694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6694");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        boolean boolean18 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator22.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = generator22.getClassLoader();
        generator22.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator38.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = generator38.getClassLoader();
        generator22.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        boolean boolean60 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        generator53.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator65.getStrategy();
        generator53.setStrategy(generatorStrategy69);
        generator22.setStrategy(generatorStrategy69);
        generator0.setStrategy(generatorStrategy69);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test6695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6695");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        boolean boolean18 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getUseCache();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass25 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test6696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6696");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator0.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        boolean boolean45 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        boolean boolean64 = strComparator59.equals((java.lang.Object) strComparator63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { '4', strComparator56, strComparator59, 0.0d };
        generator51.setArrays(objArray66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator51.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator51.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator51.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        generator0.setUseCache(false);
        boolean boolean74 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test6697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6697");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        boolean boolean13 = strComparator3.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator26.setStrategy(generatorStrategy39);
        generator23.setStrategy(generatorStrategy39);
        generator15.setStrategy(generatorStrategy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        generator43.setArrays(objArray61);
        generator15.setArrays(objArray61);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        boolean boolean78 = strComparator73.equals((java.lang.Object) strComparator77);
        java.lang.Object[] objArray80 = new java.lang.Object[] { '4', strComparator70, strComparator73, 0.0d };
        generator65.setArrays(objArray80);
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader83 = null;
        generator82.setClassLoader(classLoader83);
        java.lang.ClassLoader classLoader85 = null;
        generator82.setClassLoader(classLoader85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator82.getNamingPolicy();
        generator65.setNamingPolicy(namingPolicy87);
        java.lang.ClassLoader classLoader89 = generator65.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator65.getStrategy();
        generator15.setStrategy(generatorStrategy90);
        generator5.setStrategy(generatorStrategy90);
        generator5.setUseCache(false);
        boolean boolean95 = generator5.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test6698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6698");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        generator16.setUseCache(true);
        generator16.setUseCache(false);
        boolean boolean27 = generator16.getUseCache();
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        generator32.setAttemptLoad(true);
        boolean boolean39 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator32.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator41.setArrays(objArray65);
        generator32.setArrays(objArray65);
        generator0.setArrays(objArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy70);
    }

    @Test
    public void test6699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6699");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        generator0.setUseCache(false);
        boolean boolean32 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator33.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = generator33.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator33.getNamingPolicy();
        generator33.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator33.getStrategy();
        generator0.setStrategy(generatorStrategy50);
        boolean boolean52 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test6700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6700");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter38 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test6701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6701");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator19.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator19.getStrategy();
        java.lang.ClassLoader classLoader40 = generator19.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generator47.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        boolean boolean69 = strComparator64.equals((java.lang.Object) strComparator68);
        java.lang.Object[] objArray71 = new java.lang.Object[] { '4', strComparator61, strComparator64, 0.0d };
        generator56.setArrays(objArray71);
        generator47.setArrays(objArray71);
        generator41.setArrays(objArray71);
        generator19.setArrays(objArray71);
        generator0.setArrays(objArray71);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6702");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator60.getStrategy();
        generator53.setStrategy(generatorStrategy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        java.lang.ClassLoader classLoader66 = generator63.getClassLoader();
        generator53.setClassLoader(classLoader66);
        generator47.setClassLoader(classLoader66);
        generator0.setClassLoader(classLoader66);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter75 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test6703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6703");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test6704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6704");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.Object[] objArray16 = null;
        generator0.setArrays(objArray16);
        boolean boolean18 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6705");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader24);
    }

    @Test
    public void test6706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6706");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.thenComparing(strComparator6);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = strComparator7.thenComparing(strComparator8);
        boolean boolean13 = strComparator8.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator14 = strComparator8.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = strComparator16.reversed();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator19.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator15.thenComparing(strComparator20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator25.setStrategy(generatorStrategy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator25.setStrategy(generatorStrategy38);
        generator22.setStrategy(generatorStrategy38);
        boolean boolean41 = generator22.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator42.setStrategy(generatorStrategy55);
        generator42.setAttemptLoad(false);
        boolean boolean59 = generator42.getUseCache();
        java.lang.ClassLoader classLoader60 = generator42.getClassLoader();
        generator22.setClassLoader(classLoader60);
        boolean boolean62 = strComparator15.equals((java.lang.Object) generator22);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        generator63.setUseCache(true);
        generator63.setUseCache(false);
        generator63.setUseCache(false);
        boolean boolean76 = generator63.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        generator77.setAttemptLoad(true);
        generator77.setUseCache(true);
        generator77.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator77.getStrategy();
        generator63.setStrategy(generatorStrategy88);
        generator22.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator22.getStrategy();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test6707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6707");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        java.lang.Object[] objArray13 = null;
        generator0.setArrays(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test6708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6708");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
    }

    @Test
    public void test6709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6709");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = strComparator9.thenComparing(strComparator10);
        boolean boolean14 = strComparator6.equals((java.lang.Object) strComparator10);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        java.lang.ClassLoader classLoader32 = null;
        generator15.setClassLoader(classLoader32);
        boolean boolean34 = generator15.getAttemptLoad();
        boolean boolean35 = strComparator10.equals((java.lang.Object) generator15);
        boolean boolean36 = generator15.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        generator37.setUseCache(true);
        generator37.setUseCache(false);
        boolean boolean48 = generator37.getUseCache();
        java.lang.ClassLoader classLoader49 = generator37.getClassLoader();
        boolean boolean50 = generator37.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        generator51.setArrays(objArray69);
        generator37.setArrays(objArray69);
        generator15.setArrays(objArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter74 = org.mockito.cglib.util.ParallelSorter.create(objArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6710");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = null;
        generator60.setClassLoader(classLoader64);
        generator60.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator60.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator53.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        boolean boolean72 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.lang.ClassLoader classLoader77 = null;
        generator74.setClassLoader(classLoader77);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator74.getNamingPolicy();
        generator73.setNamingPolicy(namingPolicy79);
        boolean boolean81 = generator73.getUseCache();
        boolean boolean82 = generator73.getUseCache();
        generator73.setAttemptLoad(false);
        java.lang.ClassLoader classLoader85 = generator73.getClassLoader();
        generator0.setClassLoader(classLoader85);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader87);
    }

    @Test
    public void test6711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6711");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        boolean boolean45 = generator0.getAttemptLoad();
        boolean boolean46 = generator0.getUseCache();
        boolean boolean47 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator48.setStrategy(generatorStrategy59);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        generator61.setUseCache(true);
        generator61.setAttemptLoad(true);
        generator61.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.lang.ClassLoader classLoader77 = null;
        generator74.setClassLoader(classLoader77);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator74.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator74.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy80);
        generator48.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator48.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator84 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator84.getStrategy();
        generator84.setUseCache(true);
        generator84.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator90 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator90.setUseCache(true);
        java.lang.ClassLoader classLoader93 = generator90.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator90.getNamingPolicy();
        generator84.setNamingPolicy(namingPolicy94);
        generator48.setNamingPolicy(namingPolicy94);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator48.getStrategy();
        generator0.setStrategy(generatorStrategy97);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter99 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test6712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6712");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator14.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = generator14.getClassLoader();
        generator14.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        generator30.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = generator30.getClassLoader();
        generator14.setClassLoader(classLoader43);
        generator0.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader46 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass48 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test6713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6713");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator1.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(false);
        generator1.setUseCache(false);
        generator1.setUseCache(true);
        boolean boolean23 = generator1.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        boolean boolean37 = strComparator32.equals((java.lang.Object) strComparator36);
        java.lang.Object[] objArray39 = new java.lang.Object[] { '4', strComparator29, strComparator32, 0.0d };
        generator24.setArrays(objArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator24.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator24.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator50.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        java.lang.ClassLoader classLoader67 = generator64.getClassLoader();
        generator49.setClassLoader(classLoader67);
        generator46.setClassLoader(classLoader67);
        java.lang.ClassLoader classLoader70 = generator46.getClassLoader();
        generator24.setClassLoader(classLoader70);
        generator1.setClassLoader(classLoader70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator1.getStrategy();
        generator1.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator1.getStrategy();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(generatorStrategy76);
    }

    @Test
    public void test6714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6714");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        boolean boolean29 = strComparator24.equals((java.lang.Object) strComparator28);
        java.lang.Object[] objArray31 = new java.lang.Object[] { '4', strComparator21, strComparator24, 0.0d };
        generator16.setArrays(objArray31);
        java.lang.ClassLoader classLoader33 = null;
        generator16.setClassLoader(classLoader33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy48);
        generator16.setStrategy(generatorStrategy48);
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = generator16.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator57.setStrategy(generatorStrategy70);
        generator54.setStrategy(generatorStrategy70);
        boolean boolean73 = generator54.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator75.setUseCache(true);
        boolean boolean78 = generator75.getAttemptLoad();
        boolean boolean79 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator75.getStrategy();
        generator74.setStrategy(generatorStrategy80);
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator82.setUseCache(true);
        boolean boolean85 = generator82.getAttemptLoad();
        boolean boolean86 = generator82.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator82.getStrategy();
        generator74.setStrategy(generatorStrategy87);
        generator74.setAttemptLoad(false);
        boolean boolean91 = generator74.getUseCache();
        java.lang.ClassLoader classLoader92 = generator74.getClassLoader();
        generator54.setClassLoader(classLoader92);
        generator16.setClassLoader(classLoader92);
        generator0.setClassLoader(classLoader92);
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test6715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6715");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        java.lang.ClassLoader classLoader44 = generator41.getClassLoader();
        generator26.setClassLoader(classLoader44);
        generator26.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = generator48.getClassLoader();
        generator26.setClassLoader(classLoader51);
        generator0.setClassLoader(classLoader51);
        java.lang.Class<?> wildcardClass54 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test6716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6716");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        generator12.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        generator12.setNamingPolicy(namingPolicy53);
        generator5.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader58 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test6717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6717");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator0.setNamingPolicy(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test6718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6718");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        boolean boolean12 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test6719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6719");
        java.util.Comparator<java.lang.String> strComparator0 = null;
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.nullsFirst(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
    }

    @Test
    public void test6720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6720");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass11 = generator0.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test6721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6721");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test6722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6722");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator38.setStrategy(generatorStrategy44);
        generator12.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        generator12.setNamingPolicy(namingPolicy53);
        generator5.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader58 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader58);
    }

    @Test
    public void test6723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6723");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        boolean boolean35 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        generator36.setUseCache(true);
        generator36.setAttemptLoad(true);
        generator36.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator36.getStrategy();
        java.lang.ClassLoader classLoader50 = generator36.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        boolean boolean64 = strComparator59.equals((java.lang.Object) strComparator63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { '4', strComparator56, strComparator59, 0.0d };
        generator51.setArrays(objArray66);
        generator36.setArrays(objArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator36.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator71.setUseCache(true);
        boolean boolean74 = generator71.getAttemptLoad();
        boolean boolean75 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator71.getStrategy();
        generator70.setStrategy(generatorStrategy76);
        generator70.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator70.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy80);
        java.lang.ClassLoader classLoader82 = generator36.getClassLoader();
        java.lang.ClassLoader classLoader83 = generator36.getClassLoader();
        generator0.setClassLoader(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test6724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6724");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy31);
        generator7.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        boolean boolean35 = generator0.getUseCache();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test6725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6725");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        generator17.setAttemptLoad(true);
        boolean boolean24 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        generator0.setUseCache(false);
        boolean boolean30 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test6726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6726");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator13.setStrategy(generatorStrategy26);
        generator10.setStrategy(generatorStrategy26);
        boolean boolean29 = generator10.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator30.setStrategy(generatorStrategy43);
        generator30.setAttemptLoad(false);
        boolean boolean47 = generator30.getUseCache();
        java.lang.ClassLoader classLoader48 = generator30.getClassLoader();
        generator10.setClassLoader(classLoader48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator50.getStrategy();
        java.lang.ClassLoader classLoader52 = generator50.getClassLoader();
        generator10.setClassLoader(classLoader52);
        boolean boolean54 = generator10.getUseCache();
        generator10.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader61 = null;
        generator58.setClassLoader(classLoader61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator57.getNamingPolicy();
        boolean boolean66 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator57.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = generator57.getClassLoader();
        generator10.setClassLoader(classLoader69);
        generator0.setClassLoader(classLoader69);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        boolean boolean75 = generator72.getAttemptLoad();
        boolean boolean76 = generator72.getUseCache();
        generator72.setAttemptLoad(true);
        boolean boolean79 = generator72.getUseCache();
        generator72.setAttemptLoad(true);
        generator72.setUseCache(true);
        generator72.setAttemptLoad(false);
        boolean boolean86 = generator72.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator72.getStrategy();
        generator0.setStrategy(generatorStrategy87);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test6727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6727");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
    }

    @Test
    public void test6728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6728");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test6729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6729");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        boolean boolean17 = generator9.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        boolean boolean31 = strComparator26.equals((java.lang.Object) strComparator30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { '4', strComparator23, strComparator26, 0.0d };
        generator18.setArrays(objArray33);
        generator9.setArrays(objArray33);
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        boolean boolean51 = strComparator46.equals((java.lang.Object) strComparator50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { '4', strComparator43, strComparator46, 0.0d };
        generator38.setArrays(objArray53);
        java.lang.ClassLoader classLoader55 = null;
        generator38.setClassLoader(classLoader55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy62);
        boolean boolean64 = generator38.getUseCache();
        java.lang.ClassLoader classLoader65 = generator38.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator38.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator80.getStrategy();
        generator73.setStrategy(generatorStrategy81);
        org.mockito.cglib.util.ParallelSorter.Generator generator83 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator83.setUseCache(true);
        java.lang.ClassLoader classLoader86 = generator83.getClassLoader();
        generator73.setClassLoader(classLoader86);
        generator67.setClassLoader(classLoader86);
        java.lang.ClassLoader classLoader89 = generator67.getClassLoader();
        generator38.setClassLoader(classLoader89);
        java.lang.ClassLoader classLoader91 = generator38.getClassLoader();
        generator9.setClassLoader(classLoader91);
        boolean boolean93 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader94 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader94);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test6730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6730");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator2 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader3 = null;
        generator2.setClassLoader(classLoader3);
        java.lang.ClassLoader classLoader5 = null;
        generator2.setClassLoader(classLoader5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator12.setStrategy(generatorStrategy25);
        generator9.setStrategy(generatorStrategy25);
        generator1.setStrategy(generatorStrategy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        boolean boolean45 = strComparator40.equals((java.lang.Object) strComparator44);
        java.lang.Object[] objArray47 = new java.lang.Object[] { '4', strComparator37, strComparator40, 0.0d };
        generator32.setArrays(objArray47);
        generator29.setArrays(objArray47);
        generator1.setArrays(objArray47);
        generator0.setArrays(objArray47);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy67);
        java.lang.ClassLoader classLoader69 = generator54.getClassLoader();
        generator0.setClassLoader(classLoader69);
        boolean boolean71 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test6731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6731");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test6732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6732");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator22.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        java.lang.ClassLoader classLoader43 = generator40.getClassLoader();
        generator25.setClassLoader(classLoader43);
        generator22.setClassLoader(classLoader43);
        generator22.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator48.setStrategy(generatorStrategy54);
        boolean boolean56 = generator48.getAttemptLoad();
        generator48.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy65);
        boolean boolean67 = generator59.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        boolean boolean81 = strComparator76.equals((java.lang.Object) strComparator80);
        java.lang.Object[] objArray83 = new java.lang.Object[] { '4', strComparator73, strComparator76, 0.0d };
        generator68.setArrays(objArray83);
        generator59.setArrays(objArray83);
        boolean boolean86 = generator59.getAttemptLoad();
        java.lang.Object[] objArray87 = new java.lang.Object[] { generator59 };
        generator48.setArrays(objArray87);
        generator22.setArrays(objArray87);
        generator0.setArrays(objArray87);
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        boolean boolean92 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test6733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6733");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator0.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator0.setStrategy(generatorStrategy44);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test6734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6734");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
    }

    @Test
    public void test6735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6735");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean9 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test6736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6736");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        generator4.setUseCache(true);
        generator4.setAttemptLoad(true);
        generator4.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator4.getStrategy();
        java.lang.ClassLoader classLoader18 = generator4.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test6737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6737");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator9.getNamingPolicy();
        boolean boolean18 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator9.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader21);
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator25.getNamingPolicy();
        boolean boolean34 = generator25.getUseCache();
        boolean boolean35 = generator25.getAttemptLoad();
        boolean boolean36 = generator25.getAttemptLoad();
        generator25.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator39.getNamingPolicy();
        java.lang.ClassLoader classLoader48 = generator39.getClassLoader();
        generator25.setClassLoader(classLoader48);
        generator0.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy51);
    }

    @Test
    public void test6738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6738");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean33 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test6739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6739");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        boolean boolean49 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        boolean boolean65 = strComparator60.equals((java.lang.Object) strComparator64);
        java.lang.Object[] objArray67 = new java.lang.Object[] { '4', strComparator57, strComparator60, 0.0d };
        generator52.setArrays(objArray67);
        java.lang.ClassLoader classLoader69 = null;
        generator52.setClassLoader(classLoader69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        boolean boolean82 = generator79.getAttemptLoad();
        boolean boolean83 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator79.getStrategy();
        generator78.setStrategy(generatorStrategy84);
        generator52.setStrategy(generatorStrategy84);
        org.mockito.cglib.util.ParallelSorter.Generator generator87 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator88 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader89 = null;
        generator88.setClassLoader(classLoader89);
        java.lang.ClassLoader classLoader91 = null;
        generator88.setClassLoader(classLoader91);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator88.getNamingPolicy();
        generator87.setNamingPolicy(namingPolicy93);
        generator52.setNamingPolicy(namingPolicy93);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator52.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator52.getNamingPolicy();
        java.lang.ClassLoader classLoader98 = generator52.getClassLoader();
        generator0.setClassLoader(classLoader98);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertNotNull(namingPolicy97);
        org.junit.Assert.assertNotNull(classLoader98);
    }

    @Test
    public void test6740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6740");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        java.lang.ClassLoader classLoader13 = generator3.getClassLoader();
        boolean boolean14 = generator3.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = generator15.getClassLoader();
        generator15.setUseCache(true);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator15.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = generator3.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = generator27.getAttemptLoad();
        generator27.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator27.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        boolean boolean62 = strComparator57.equals((java.lang.Object) strComparator61);
        java.lang.Object[] objArray64 = new java.lang.Object[] { '4', strComparator54, strComparator57, 0.0d };
        generator49.setArrays(objArray64);
        generator34.setArrays(objArray64);
        generator27.setArrays(objArray64);
        generator3.setArrays(objArray64);
        java.lang.ClassLoader classLoader69 = generator3.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test6741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6741");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        boolean boolean6 = strComparator4.equals((java.lang.Object) (short) 1);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        boolean boolean19 = strComparator7.equals((java.lang.Object) generator10);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        java.lang.ClassLoader classLoader23 = generator20.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator24.getStrategy();
        generator20.setStrategy(generatorStrategy27);
        generator10.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader30 = generator10.getClassLoader();
        generator10.setUseCache(false);
        boolean boolean33 = strComparator4.equals((java.lang.Object) generator10);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator55.getStrategy();
        generator49.setStrategy(generatorStrategy60);
        generator34.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator34.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = generator34.getClassLoader();
        boolean boolean66 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        generator34.setClassLoader(classLoader67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator69.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        generator72.setStrategy(generatorStrategy78);
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        boolean boolean83 = generator80.getAttemptLoad();
        boolean boolean84 = generator80.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator80.getStrategy();
        generator72.setStrategy(generatorStrategy85);
        generator69.setStrategy(generatorStrategy85);
        boolean boolean88 = generator69.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = null;
        generator69.setStrategy(generatorStrategy89);
        java.lang.ClassLoader classLoader91 = generator69.getClassLoader();
        generator34.setClassLoader(classLoader91);
        generator10.setClassLoader(classLoader91);
        java.lang.ClassLoader classLoader94 = generator10.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test6742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6742");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy17);
        boolean boolean19 = generator11.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        generator11.setArrays(objArray35);
        boolean boolean38 = generator11.getAttemptLoad();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator11 };
        generator0.setArrays(objArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator42.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        boolean boolean52 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test6743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6743");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        boolean boolean8 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test6744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6744");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        boolean boolean10 = generator0.getAttemptLoad();
        boolean boolean11 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test6745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6745");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        boolean boolean17 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator14.getStrategy();
        java.lang.ClassLoader classLoader19 = generator14.getClassLoader();
        generator14.setUseCache(false);
        boolean boolean22 = generator14.getUseCache();
        generator14.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = null;
        generator25.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        boolean boolean45 = strComparator40.equals((java.lang.Object) strComparator44);
        java.lang.Object[] objArray47 = new java.lang.Object[] { '4', strComparator37, strComparator40, 0.0d };
        generator32.setArrays(objArray47);
        generator25.setArrays(objArray47);
        generator14.setArrays(objArray47);
        generator0.setArrays(objArray47);
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test6746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6746");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test6747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6747");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator2 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean3 = generator2.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator2.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        java.lang.ClassLoader classLoader23 = generator20.getClassLoader();
        generator5.setClassLoader(classLoader23);
        generator2.setClassLoader(classLoader23);
        generator2.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy34);
        boolean boolean36 = generator28.getAttemptLoad();
        generator28.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator39.setArrays(objArray63);
        boolean boolean66 = generator39.getAttemptLoad();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator39 };
        generator28.setArrays(objArray67);
        generator2.setArrays(objArray67);
        generator0.setArrays(objArray67);
        generator0.setAttemptLoad(true);
        boolean boolean73 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        java.lang.ClassLoader classLoader75 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test6748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6748");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test6749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6749");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        java.lang.ClassLoader classLoader36 = null;
        generator19.setClassLoader(classLoader36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator45.setStrategy(generatorStrategy51);
        generator19.setStrategy(generatorStrategy51);
        generator0.setStrategy(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
    }

    @Test
    public void test6750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6750");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        boolean boolean14 = generator0.getUseCache();
        boolean boolean15 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test6751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6751");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        boolean boolean14 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator6.setArrays(objArray30);
        generator0.setArrays(objArray30);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean38 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test6752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6752");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test6753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6753");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator0.setNamingPolicy(namingPolicy22);
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test6754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6754");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(true);
        generator10.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator10.getStrategy();
        java.lang.ClassLoader classLoader24 = generator10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator10.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy34);
        boolean boolean36 = generator28.getAttemptLoad();
        generator28.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator39.setArrays(objArray63);
        boolean boolean66 = generator39.getAttemptLoad();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator39 };
        generator28.setArrays(objArray67);
        generator10.setArrays(objArray67);
        generator0.setArrays(objArray67);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter71 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.util.ParallelSorter$Generator is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
    }

    @Test
    public void test6755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6755");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        generator10.setAttemptLoad(true);
        generator10.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator23.getStrategy();
        java.lang.ClassLoader classLoader25 = generator23.getClassLoader();
        generator23.setUseCache(false);
        boolean boolean28 = generator23.getAttemptLoad();
        boolean boolean29 = generator23.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        boolean boolean38 = generator30.getAttemptLoad();
        generator30.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator41.setArrays(objArray65);
        boolean boolean68 = generator41.getAttemptLoad();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator41 };
        generator30.setArrays(objArray69);
        generator23.setArrays(objArray69);
        generator10.setArrays(objArray69);
        generator0.setArrays(objArray69);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test6756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6756");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        boolean boolean31 = strComparator26.equals((java.lang.Object) strComparator30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { '4', strComparator23, strComparator26, 0.0d };
        generator18.setArrays(objArray33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy40);
        java.lang.ClassLoader classLoader42 = generator18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator18.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy58);
        generator45.setAttemptLoad(false);
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator64.getStrategy();
        generator45.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator45.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator72.setUseCache(true);
        boolean boolean75 = generator72.getAttemptLoad();
        boolean boolean76 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator72.getStrategy();
        generator71.setStrategy(generatorStrategy77);
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        boolean boolean82 = generator79.getAttemptLoad();
        boolean boolean83 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator79.getStrategy();
        generator71.setStrategy(generatorStrategy84);
        generator71.setAttemptLoad(false);
        boolean boolean88 = generator71.getUseCache();
        java.lang.ClassLoader classLoader89 = generator71.getClassLoader();
        boolean boolean90 = generator71.getUseCache();
        boolean boolean91 = generator71.getAttemptLoad();
        java.lang.ClassLoader classLoader92 = generator71.getClassLoader();
        generator45.setClassLoader(classLoader92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator45.getStrategy();
        generator18.setStrategy(generatorStrategy94);
        java.lang.ClassLoader classLoader96 = generator18.getClassLoader();
        java.lang.ClassLoader classLoader97 = generator18.getClassLoader();
        generator0.setClassLoader(classLoader97);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test6757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6757");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator21.setStrategy(generatorStrategy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator21.setStrategy(generatorStrategy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        boolean boolean49 = strComparator44.equals((java.lang.Object) strComparator48);
        java.lang.Object[] objArray51 = new java.lang.Object[] { '4', strComparator41, strComparator44, 0.0d };
        generator36.setArrays(objArray51);
        generator21.setArrays(objArray51);
        generator14.setArrays(objArray51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy55);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test6758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6758");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test6759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6759");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = generator5.getClassLoader();
        generator5.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator21.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = generator21.getClassLoader();
        generator5.setClassLoader(classLoader34);
        boolean boolean36 = generator5.getAttemptLoad();
        boolean boolean37 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator5.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator1.getStrategy();
        generator1.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator1.getNamingPolicy();
        boolean boolean44 = generator1.getUseCache();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test6760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6760");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        generator9.setStrategy(generatorStrategy22);
        generator6.setStrategy(generatorStrategy22);
        boolean boolean25 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator6.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy28);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter30 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
    }

    @Test
    public void test6761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6761");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        generator0.setUseCache(true);
        boolean boolean33 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator37.getStrategy();
        java.lang.ClassLoader classLoader39 = generator37.getClassLoader();
        generator37.setUseCache(false);
        generator37.setUseCache(true);
        java.lang.ClassLoader classLoader44 = generator37.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        java.lang.ClassLoader classLoader62 = null;
        generator45.setClassLoader(classLoader62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        generator64.setClassLoader(classLoader67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy69);
        boolean boolean71 = generator45.getUseCache();
        java.lang.ClassLoader classLoader72 = generator45.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator45.getStrategy();
        java.lang.ClassLoader classLoader74 = generator45.getClassLoader();
        generator37.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test6762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6762");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        java.lang.ClassLoader classLoader16 = generator13.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        generator3.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader23 = generator3.getClassLoader();
        generator3.setUseCache(false);
        generator3.setAttemptLoad(true);
        boolean boolean28 = generator3.getUseCache();
        java.lang.Object[] objArray29 = null;
        generator3.setArrays(objArray29);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test6763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6763");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
    }

    @Test
    public void test6764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6764");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator41.setStrategy(generatorStrategy54);
        generator38.setStrategy(generatorStrategy54);
        boolean boolean57 = generator38.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        generator58.setStrategy(generatorStrategy71);
        generator58.setAttemptLoad(false);
        boolean boolean75 = generator58.getUseCache();
        java.lang.ClassLoader classLoader76 = generator58.getClassLoader();
        generator38.setClassLoader(classLoader76);
        generator0.setClassLoader(classLoader76);
        java.lang.Object[] objArray79 = null;
        generator0.setArrays(objArray79);
        generator0.setUseCache(false);
        boolean boolean83 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test6765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6765");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        boolean boolean40 = generator33.getUseCache();
        generator33.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator33.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        boolean boolean45 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test6766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6766");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        boolean boolean15 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        generator17.setUseCache(true);
        generator17.setAttemptLoad(true);
        generator17.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator17.getStrategy();
        java.lang.ClassLoader classLoader31 = generator17.getClassLoader();
        boolean boolean32 = generator17.getUseCache();
        boolean boolean33 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        boolean boolean36 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test6767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6767");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        boolean boolean6 = strComparator1.equals((java.lang.Object) strComparator5);
        boolean boolean8 = strComparator5.equals((java.lang.Object) 'a');
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator12.setStrategy(generatorStrategy25);
        generator9.setStrategy(generatorStrategy25);
        boolean boolean28 = generator9.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        generator29.setUseCache(true);
        generator29.setAttemptLoad(true);
        generator29.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator29.getStrategy();
        java.lang.ClassLoader classLoader43 = generator29.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = generator9.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator47.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = generator47.getClassLoader();
        generator9.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = generator9.getClassLoader();
        boolean boolean59 = strComparator5.equals((java.lang.Object) generator9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator9.setStrategy(generatorStrategy60);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test6768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6768");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test6769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6769");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        boolean boolean40 = generator33.getUseCache();
        generator33.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator33.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        boolean boolean45 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test6770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6770");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator1.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.lang.ClassLoader classLoader7 = null;
        generator4.setClassLoader(classLoader7);
        generator4.setAttemptLoad(true);
        boolean boolean11 = generator4.getAttemptLoad();
        java.lang.ClassLoader classLoader12 = generator4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator4.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator4.getStrategy();
        boolean boolean16 = strComparator3.equals((java.lang.Object) generator4);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6771");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        generator0.setUseCache(true);
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        generator0.setUseCache(false);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator43.getStrategy();
        generator38.setStrategy(generatorStrategy50);
        boolean boolean52 = strComparator37.equals((java.lang.Object) generator38);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator38.getNamingPolicy();
        generator38.setAttemptLoad(false);
        generator38.setUseCache(false);
        generator38.setUseCache(true);
        java.lang.ClassLoader classLoader60 = generator38.getClassLoader();
        generator38.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator38.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test6772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6772");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader24 = generator17.getClassLoader();
        generator0.setClassLoader(classLoader24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        java.lang.ClassLoader classLoader33 = generator26.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator41.getUseCache();
        boolean boolean50 = generator41.getUseCache();
        generator41.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        java.lang.ClassLoader classLoader56 = generator53.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        boolean boolean70 = strComparator65.equals((java.lang.Object) strComparator69);
        java.lang.Object[] objArray72 = new java.lang.Object[] { '4', strComparator62, strComparator65, 0.0d };
        generator57.setArrays(objArray72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.lang.ClassLoader classLoader77 = null;
        generator74.setClassLoader(classLoader77);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator74.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy79);
        generator53.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator53.getStrategy();
        generator41.setStrategy(generatorStrategy83);
        generator34.setStrategy(generatorStrategy83);
        generator26.setStrategy(generatorStrategy83);
        generator0.setStrategy(generatorStrategy83);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test6773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6773");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test6774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6774");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        generator13.setUseCache(true);
        boolean boolean22 = strComparator10.equals((java.lang.Object) generator13);
        generator13.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator25.getStrategy();
        generator25.setUseCache(true);
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy31);
        generator13.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator13.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        generator36.setUseCache(true);
        generator36.setAttemptLoad(true);
        boolean boolean47 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator36.getNamingPolicy();
        generator36.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        boolean boolean64 = strComparator59.equals((java.lang.Object) strComparator63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { '4', strComparator56, strComparator59, 0.0d };
        generator51.setArrays(objArray66);
        java.lang.ClassLoader classLoader68 = null;
        generator51.setClassLoader(classLoader68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = null;
        generator70.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator78.setUseCache(true);
        boolean boolean81 = generator78.getAttemptLoad();
        boolean boolean82 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator78.getStrategy();
        generator77.setStrategy(generatorStrategy83);
        generator51.setStrategy(generatorStrategy83);
        generator51.setAttemptLoad(true);
        java.lang.ClassLoader classLoader88 = generator51.getClassLoader();
        generator36.setClassLoader(classLoader88);
        java.lang.ClassLoader classLoader90 = generator36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy91);
        generator0.setStrategy(generatorStrategy91);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test6775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6775");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        boolean boolean35 = strComparator30.equals((java.lang.Object) strComparator34);
        java.lang.Object[] objArray37 = new java.lang.Object[] { '4', strComparator27, strComparator30, 0.0d };
        generator22.setArrays(objArray37);
        generator7.setArrays(objArray37);
        generator0.setArrays(objArray37);
        boolean boolean41 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = strComparator44.equals((java.lang.Object) generator45);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = strComparator49.reversed();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator52.reversed();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.reversed();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator54.reversed();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.nullsFirst(strComparator54);
        java.util.Comparator<java.lang.String> strComparator57 = strComparator44.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = strComparator44.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator62.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        boolean boolean73 = generator70.getAttemptLoad();
        boolean boolean74 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator70.getStrategy();
        generator62.setStrategy(generatorStrategy75);
        generator59.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator59.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator59.getStrategy();
        boolean boolean81 = strComparator58.equals((java.lang.Object) generator59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test6776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6776");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        java.lang.ClassLoader classLoader9 = generator6.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        generator6.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator5.equals((java.lang.Object) generator6);
        java.lang.ClassLoader classLoader16 = generator6.getClassLoader();
        boolean boolean17 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator6.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        boolean boolean32 = strComparator27.equals((java.lang.Object) strComparator31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { '4', strComparator24, strComparator27, 0.0d };
        generator19.setArrays(objArray34);
        generator19.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        boolean boolean51 = strComparator46.equals((java.lang.Object) strComparator50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { '4', strComparator43, strComparator46, 0.0d };
        generator38.setArrays(objArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator38.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator38.setStrategy(generatorStrategy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator38.getStrategy();
        java.lang.ClassLoader classLoader59 = generator38.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator60.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader70 = null;
        generator67.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy72);
        boolean boolean74 = generator66.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        boolean boolean88 = strComparator83.equals((java.lang.Object) strComparator87);
        java.lang.Object[] objArray90 = new java.lang.Object[] { '4', strComparator80, strComparator83, 0.0d };
        generator75.setArrays(objArray90);
        generator66.setArrays(objArray90);
        generator60.setArrays(objArray90);
        generator38.setArrays(objArray90);
        generator19.setArrays(objArray90);
        generator6.setArrays(objArray90);
        boolean boolean97 = generator6.getUseCache();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test6777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6777");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator10.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator10.setStrategy(generatorStrategy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        boolean boolean38 = strComparator33.equals((java.lang.Object) strComparator37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { '4', strComparator30, strComparator33, 0.0d };
        generator25.setArrays(objArray40);
        generator10.setArrays(objArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator10.getStrategy();
        boolean boolean44 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator10.getStrategy();
        generator10.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator10.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator50.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator50.getStrategy();
        boolean boolean58 = generator50.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        java.lang.ClassLoader classLoader76 = null;
        generator59.setClassLoader(classLoader76);
        boolean boolean78 = generator59.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        boolean boolean82 = generator79.getAttemptLoad();
        boolean boolean83 = generator79.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator79.getStrategy();
        generator59.setStrategy(generatorStrategy84);
        generator50.setStrategy(generatorStrategy84);
        boolean boolean87 = generator50.getAttemptLoad();
        boolean boolean88 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator50.getStrategy();
        generator10.setStrategy(generatorStrategy89);
        generator0.setStrategy(generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test6778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6778");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator12.getStrategy();
        java.lang.ClassLoader classLoader14 = generator12.getClassLoader();
        generator12.setUseCache(false);
        boolean boolean17 = generator12.getUseCache();
        java.lang.ClassLoader classLoader18 = generator12.getClassLoader();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = strComparator19.reversed();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator22.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        boolean boolean32 = strComparator22.equals((java.lang.Object) generator24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator24.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator24.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy48);
        generator36.setStrategy(generatorStrategy48);
        generator36.setAttemptLoad(true);
        boolean boolean53 = generator36.getAttemptLoad();
        boolean boolean54 = generator36.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator36.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy55);
        generator12.setUseCache(false);
        java.lang.ClassLoader classLoader59 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
    }

    @Test
    public void test6779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6779");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator36.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator36.setStrategy(generatorStrategy49);
        generator33.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader52 = generator33.getClassLoader();
        generator0.setClassLoader(classLoader52);
        boolean boolean54 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test6780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6780");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        java.lang.ClassLoader classLoader37 = null;
        generator20.setClassLoader(classLoader37);
        boolean boolean39 = generator20.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        generator40.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        java.lang.ClassLoader classLoader63 = null;
        generator46.setClassLoader(classLoader63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        boolean boolean76 = generator73.getAttemptLoad();
        boolean boolean77 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator73.getStrategy();
        generator72.setStrategy(generatorStrategy78);
        generator46.setStrategy(generatorStrategy78);
        org.mockito.cglib.util.ParallelSorter.Generator generator81 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator82 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader83 = null;
        generator82.setClassLoader(classLoader83);
        java.lang.ClassLoader classLoader85 = null;
        generator82.setClassLoader(classLoader85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator82.getNamingPolicy();
        generator81.setNamingPolicy(namingPolicy87);
        generator46.setNamingPolicy(namingPolicy87);
        generator40.setNamingPolicy(namingPolicy87);
        generator20.setNamingPolicy(namingPolicy87);
        generator0.setNamingPolicy(namingPolicy87);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator0.getNamingPolicy();
        boolean boolean94 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass95 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test6781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6781");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator30.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        generator30.setArrays(objArray60);
        generator23.setArrays(objArray60);
        generator0.setArrays(objArray60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        java.lang.ClassLoader classLoader66 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator0.getStrategy();
        java.lang.ClassLoader classLoader68 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator0.getStrategy();
        boolean boolean70 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test6782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6782");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        boolean boolean38 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test6783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6783");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        boolean boolean30 = strComparator25.equals((java.lang.Object) strComparator29);
        java.lang.Object[] objArray32 = new java.lang.Object[] { '4', strComparator22, strComparator25, 0.0d };
        generator17.setArrays(objArray32);
        generator14.setArrays(objArray32);
        generator0.setArrays(objArray32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test6784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6784");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator11.getStrategy();
        java.lang.ClassLoader classLoader13 = generator11.getClassLoader();
        generator11.setUseCache(false);
        generator11.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator11.getNamingPolicy();
        generator11.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator21.getUseCache();
        boolean boolean30 = generator21.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        generator31.setUseCache(true);
        generator31.setAttemptLoad(true);
        boolean boolean42 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator31.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        generator44.setStrategy(generatorStrategy50);
        boolean boolean52 = generator44.getAttemptLoad();
        generator44.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy61);
        boolean boolean63 = generator55.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        boolean boolean77 = strComparator72.equals((java.lang.Object) strComparator76);
        java.lang.Object[] objArray79 = new java.lang.Object[] { '4', strComparator69, strComparator72, 0.0d };
        generator64.setArrays(objArray79);
        generator55.setArrays(objArray79);
        boolean boolean82 = generator55.getAttemptLoad();
        java.lang.Object[] objArray83 = new java.lang.Object[] { generator55 };
        generator44.setArrays(objArray83);
        generator31.setArrays(objArray83);
        generator21.setArrays(objArray83);
        generator11.setArrays(objArray83);
        generator0.setArrays(objArray83);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
    }

    @Test
    public void test6785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6785");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator31.getClassLoader();
        generator16.setClassLoader(classLoader34);
        generator13.setClassLoader(classLoader34);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator39.setStrategy(generatorStrategy45);
        boolean boolean47 = generator39.getAttemptLoad();
        generator39.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy56);
        boolean boolean58 = generator50.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        generator50.setArrays(objArray74);
        boolean boolean77 = generator50.getAttemptLoad();
        java.lang.Object[] objArray78 = new java.lang.Object[] { generator50 };
        generator39.setArrays(objArray78);
        generator13.setArrays(objArray78);
        generator0.setArrays(objArray78);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test6786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6786");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        java.lang.ClassLoader classLoader67 = null;
        generator50.setClassLoader(classLoader67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator77.getStrategy();
        generator76.setStrategy(generatorStrategy82);
        generator50.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test6787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6787");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter9 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test6788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6788");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        int int6 = strComparator3.compare("", "");
        java.util.Comparator<java.lang.String> strComparator7 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator8 = strComparator0.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator9 = strComparator8.reversed();
        int int12 = strComparator9.compare("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test6789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6789");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        boolean boolean14 = generator6.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator6.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        generator34.setUseCache(true);
        generator34.setAttemptLoad(true);
        generator34.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator34.getStrategy();
        java.lang.ClassLoader classLoader48 = generator34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator51.setUseCache(true);
        boolean boolean54 = generator51.getAttemptLoad();
        boolean boolean55 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        generator50.setStrategy(generatorStrategy56);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator50.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator71.setUseCache(true);
        boolean boolean74 = generator71.getAttemptLoad();
        boolean boolean75 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator71.getStrategy();
        generator65.setStrategy(generatorStrategy76);
        generator50.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        generator50.setNamingPolicy(namingPolicy79);
        java.lang.ClassLoader classLoader81 = generator50.getClassLoader();
        generator34.setClassLoader(classLoader81);
        generator0.setClassLoader(classLoader81);
        boolean boolean84 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test6790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6790");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean31 = generator0.getUseCache();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(classLoader34);
    }

    @Test
    public void test6791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6791");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        boolean boolean10 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test6792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6792");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        boolean boolean30 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        generator32.setUseCache(true);
        generator32.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator38.getStrategy();
        java.lang.ClassLoader classLoader40 = generator38.getClassLoader();
        generator38.setUseCache(false);
        boolean boolean43 = generator38.getAttemptLoad();
        boolean boolean44 = generator38.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator45.setStrategy(generatorStrategy51);
        boolean boolean53 = generator45.getAttemptLoad();
        generator45.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy62);
        boolean boolean64 = generator56.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        boolean boolean78 = strComparator73.equals((java.lang.Object) strComparator77);
        java.lang.Object[] objArray80 = new java.lang.Object[] { '4', strComparator70, strComparator73, 0.0d };
        generator65.setArrays(objArray80);
        generator56.setArrays(objArray80);
        boolean boolean83 = generator56.getAttemptLoad();
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator56 };
        generator45.setArrays(objArray84);
        generator38.setArrays(objArray84);
        generator32.setArrays(objArray84);
        generator0.setArrays(objArray84);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray84);
    }

    @Test
    public void test6793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6793");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator1.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(false);
        java.lang.ClassLoader classLoader19 = generator1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator1.getNamingPolicy();
        boolean boolean21 = generator1.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator1.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test6794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6794");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator0.setArrays(objArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test6795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6795");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = generator33.getClassLoader();
        java.lang.ClassLoader classLoader36 = generator33.getClassLoader();
        boolean boolean37 = generator33.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = generator33.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator33.getNamingPolicy();
        boolean boolean40 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator33.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator42.setStrategy(generatorStrategy48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator42.setStrategy(generatorStrategy55);
        generator42.setAttemptLoad(false);
        boolean boolean59 = generator42.getUseCache();
        java.lang.ClassLoader classLoader60 = generator42.getClassLoader();
        boolean boolean61 = generator42.getUseCache();
        boolean boolean62 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = generator42.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        boolean boolean67 = generator64.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator64.getStrategy();
        java.lang.ClassLoader classLoader69 = generator64.getClassLoader();
        generator64.setUseCache(false);
        boolean boolean72 = generator64.getUseCache();
        generator64.setUseCache(false);
        boolean boolean75 = generator64.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        boolean boolean79 = generator76.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        generator76.setClassLoader(classLoader80);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator76.getNamingPolicy();
        boolean boolean83 = generator76.getUseCache();
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        generator76.setArrays(objArray84);
        generator64.setArrays(objArray84);
        generator42.setArrays(objArray84);
        generator33.setArrays(objArray84);
        generator0.setArrays(objArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter90 = org.mockito.cglib.util.ParallelSorter.create(objArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No arrays specified to sort");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
    }

    @Test
    public void test6796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6796");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass13 = namingPolicy12.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test6797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6797");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        generator5.setAttemptLoad(true);
        boolean boolean12 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator5.getNamingPolicy();
        java.lang.ClassLoader classLoader14 = generator5.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        boolean boolean31 = strComparator26.equals((java.lang.Object) strComparator30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { '4', strComparator23, strComparator26, 0.0d };
        generator18.setArrays(objArray33);
        generator15.setArrays(objArray33);
        generator5.setArrays(objArray33);
        generator0.setArrays(objArray33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6798");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy49);
        java.lang.ClassLoader classLoader51 = generator36.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        generator52.setUseCache(true);
        generator52.setUseCache(false);
        boolean boolean63 = generator52.getUseCache();
        java.lang.ClassLoader classLoader64 = generator52.getClassLoader();
        generator36.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator0.getStrategy();
        generator0.setUseCache(false);
        boolean boolean71 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test6799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6799");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        generator11.setUseCache(false);
        generator11.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        boolean boolean26 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test6800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6800");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter18 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test6801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6801");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        boolean boolean28 = generator0.getUseCache();
        boolean boolean29 = generator0.getUseCache();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator37 = strComparator32.reversed();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = strComparator47.thenComparing(strComparator48);
        boolean boolean52 = strComparator44.equals((java.lang.Object) strComparator48);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        boolean boolean66 = strComparator61.equals((java.lang.Object) strComparator65);
        java.lang.Object[] objArray68 = new java.lang.Object[] { '4', strComparator58, strComparator61, 0.0d };
        generator53.setArrays(objArray68);
        java.lang.ClassLoader classLoader70 = null;
        generator53.setClassLoader(classLoader70);
        boolean boolean72 = generator53.getAttemptLoad();
        boolean boolean73 = strComparator48.equals((java.lang.Object) generator53);
        boolean boolean74 = strComparator32.equals((java.lang.Object) generator53);
        java.lang.ClassLoader classLoader75 = generator53.getClassLoader();
        generator0.setClassLoader(classLoader75);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test6802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6802");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        boolean boolean35 = strComparator30.equals((java.lang.Object) strComparator34);
        java.lang.Object[] objArray37 = new java.lang.Object[] { '4', strComparator27, strComparator30, 0.0d };
        generator22.setArrays(objArray37);
        generator7.setArrays(objArray37);
        generator0.setArrays(objArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass44 = namingPolicy43.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test6803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6803");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator9.getNamingPolicy();
        boolean boolean18 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator9.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator39.getStrategy();
        generator32.setStrategy(generatorStrategy40);
        generator23.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader43 = generator23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test6804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6804");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator41.getStrategy();
        generator34.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        java.lang.ClassLoader classLoader47 = generator44.getClassLoader();
        generator34.setClassLoader(classLoader47);
        generator34.setAttemptLoad(false);
        boolean boolean51 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator34.getClassLoader();
        generator0.setClassLoader(classLoader52);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter54 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test6805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6805");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        java.lang.ClassLoader classLoader9 = generator7.getClassLoader();
        generator7.setUseCache(false);
        boolean boolean12 = generator7.getUseCache();
        java.lang.ClassLoader classLoader13 = generator7.getClassLoader();
        java.lang.ClassLoader classLoader14 = generator7.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator7.getNamingPolicy();
        boolean boolean16 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator7.getStrategy();
        boolean boolean18 = generator7.getAttemptLoad();
        boolean boolean19 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader20 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        boolean boolean28 = generator22.getUseCache();
        boolean boolean29 = generator22.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator33.setStrategy(generatorStrategy46);
        generator30.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator49.getClassLoader();
        generator30.setClassLoader(classLoader51);
        generator22.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = strComparator61.thenComparing(strComparator62);
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = strComparator64.thenComparing(strComparator65);
        boolean boolean67 = strComparator62.equals((java.lang.Object) strComparator66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { '4', strComparator59, strComparator62, 0.0d };
        generator54.setArrays(objArray69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy76);
        generator22.setNamingPolicy(namingPolicy76);
        generator0.setNamingPolicy(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test6806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6806");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        generator23.setUseCache(true);
        generator23.setUseCache(false);
        boolean boolean34 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator23.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator36.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        java.lang.ClassLoader classLoader52 = generator49.getClassLoader();
        generator36.setClassLoader(classLoader52);
        generator23.setClassLoader(classLoader52);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test6807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6807");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
    }

    @Test
    public void test6808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6808");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator13.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        generator13.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        generator33.setAttemptLoad(true);
        boolean boolean40 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator33.getNamingPolicy();
        boolean boolean42 = generator33.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        generator43.setArrays(objArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator43.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy68);
        generator0.setNamingPolicy(namingPolicy68);
        java.lang.Class<?> wildcardClass71 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test6809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6809");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator32.setStrategy(generatorStrategy45);
        generator29.setStrategy(generatorStrategy45);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = generator48.getClassLoader();
        generator29.setClassLoader(classLoader50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator60.setUseCache(true);
        boolean boolean63 = generator60.getAttemptLoad();
        boolean boolean64 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator60.getStrategy();
        generator59.setStrategy(generatorStrategy65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        generator59.setStrategy(generatorStrategy72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        boolean boolean87 = strComparator82.equals((java.lang.Object) strComparator86);
        java.lang.Object[] objArray89 = new java.lang.Object[] { '4', strComparator79, strComparator82, 0.0d };
        generator74.setArrays(objArray89);
        generator59.setArrays(objArray89);
        generator52.setArrays(objArray89);
        generator29.setArrays(objArray89);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator29.getStrategy();
        generator0.setStrategy(generatorStrategy94);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator0.getStrategy();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test6810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6810");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator10.getStrategy();
        java.lang.ClassLoader classLoader12 = generator10.getClassLoader();
        generator10.setUseCache(false);
        boolean boolean15 = generator10.getUseCache();
        boolean boolean16 = generator10.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator28.setStrategy(generatorStrategy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        generator28.setStrategy(generatorStrategy41);
        generator25.setStrategy(generatorStrategy41);
        generator17.setStrategy(generatorStrategy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator58.thenComparing(strComparator59);
        boolean boolean61 = strComparator56.equals((java.lang.Object) strComparator60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { '4', strComparator53, strComparator56, 0.0d };
        generator48.setArrays(objArray63);
        generator45.setArrays(objArray63);
        generator17.setArrays(objArray63);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        boolean boolean80 = strComparator75.equals((java.lang.Object) strComparator79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { '4', strComparator72, strComparator75, 0.0d };
        generator67.setArrays(objArray82);
        org.mockito.cglib.util.ParallelSorter.Generator generator84 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader85 = null;
        generator84.setClassLoader(classLoader85);
        java.lang.ClassLoader classLoader87 = null;
        generator84.setClassLoader(classLoader87);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator84.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy89);
        java.lang.ClassLoader classLoader91 = generator67.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator67.getStrategy();
        generator17.setStrategy(generatorStrategy92);
        generator10.setStrategy(generatorStrategy92);
        generator0.setStrategy(generatorStrategy92);
        boolean boolean96 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test6811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6811");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test6812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6812");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test6813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6813");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator9.getStrategy();
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader17 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test6814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6814");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = null;
        generator44.setClassLoader(classLoader47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy49);
        boolean boolean51 = generator43.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        boolean boolean65 = strComparator60.equals((java.lang.Object) strComparator64);
        java.lang.Object[] objArray67 = new java.lang.Object[] { '4', strComparator57, strComparator60, 0.0d };
        generator52.setArrays(objArray67);
        generator43.setArrays(objArray67);
        generator37.setArrays(objArray67);
        generator0.setArrays(objArray67);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator74.setUseCache(true);
        boolean boolean77 = generator74.getAttemptLoad();
        boolean boolean78 = generator74.getUseCache();
        generator74.setAttemptLoad(true);
        generator74.setUseCache(true);
        generator74.setAttemptLoad(true);
        generator74.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator87 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader88 = null;
        generator87.setClassLoader(classLoader88);
        java.lang.ClassLoader classLoader90 = null;
        generator87.setClassLoader(classLoader90);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator87.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator87.getNamingPolicy();
        generator74.setNamingPolicy(namingPolicy93);
        generator0.setNamingPolicy(namingPolicy93);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test6815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6815");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        boolean boolean16 = generator11.getAttemptLoad();
        boolean boolean17 = generator11.getUseCache();
        java.lang.ClassLoader classLoader18 = generator11.getClassLoader();
        generator11.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        generator23.setAttemptLoad(true);
        boolean boolean30 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator23.getNamingPolicy();
        boolean boolean32 = generator23.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        boolean boolean52 = strComparator47.equals((java.lang.Object) strComparator51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { '4', strComparator44, strComparator47, 0.0d };
        generator39.setArrays(objArray54);
        java.lang.ClassLoader classLoader56 = generator39.getClassLoader();
        generator33.setClassLoader(classLoader56);
        generator23.setClassLoader(classLoader56);
        generator0.setClassLoader(classLoader56);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter60 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test6816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6816");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader24);
    }

    @Test
    public void test6817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6817");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        boolean boolean34 = strComparator29.equals((java.lang.Object) strComparator33);
        java.lang.Object[] objArray36 = new java.lang.Object[] { '4', strComparator26, strComparator29, 0.0d };
        generator21.setArrays(objArray36);
        java.lang.ClassLoader classLoader38 = null;
        generator21.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator47.setStrategy(generatorStrategy53);
        generator21.setStrategy(generatorStrategy53);
        generator13.setStrategy(generatorStrategy53);
        generator7.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy59);
        boolean boolean61 = generator0.getAttemptLoad();
        boolean boolean62 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass64 = classLoader63.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test6818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6818");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator5.getStrategy();
        java.lang.ClassLoader classLoader7 = generator5.getClassLoader();
        generator5.setUseCache(false);
        boolean boolean10 = generator5.getUseCache();
        java.lang.ClassLoader classLoader11 = generator5.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator12.getStrategy();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        generator17.setUseCache(true);
        generator17.setAttemptLoad(true);
        generator17.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator30.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy36);
        generator12.setNamingPolicy(namingPolicy36);
        generator5.setNamingPolicy(namingPolicy36);
        generator0.setNamingPolicy(namingPolicy36);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter41 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test6819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6819");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test6820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6820");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        boolean boolean6 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test6821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6821");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test6822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6822");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.thenComparing(strComparator6);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = strComparator7.thenComparing(strComparator8);
        boolean boolean13 = strComparator8.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator14 = strComparator8.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = strComparator16.reversed();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator19.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator15.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator22.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.reversed();
        int int27 = strComparator22.compare("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test6823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6823");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        java.lang.ClassLoader classLoader16 = generator13.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        generator3.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader23 = generator3.getClassLoader();
        generator3.setUseCache(true);
        generator3.setUseCache(false);
        boolean boolean28 = generator3.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator3.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator3.setNamingPolicy(namingPolicy30);
        generator3.setUseCache(true);
        java.lang.Class<?> wildcardClass34 = generator3.getClass();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test6824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6824");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        java.lang.ClassLoader classLoader32 = null;
        generator15.setClassLoader(classLoader32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        generator15.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy56);
        generator15.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator15.getStrategy();
        boolean boolean60 = generator15.getUseCache();
        generator15.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator63.getStrategy();
        boolean boolean71 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator63.getStrategy();
        generator15.setStrategy(generatorStrategy73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator15.getStrategy();
        boolean boolean77 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test6825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6825");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        boolean boolean24 = strComparator19.equals((java.lang.Object) strComparator23);
        java.lang.Object[] objArray26 = new java.lang.Object[] { '4', strComparator16, strComparator19, 0.0d };
        generator11.setArrays(objArray26);
        java.lang.ClassLoader classLoader28 = null;
        generator11.setClassLoader(classLoader28);
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test6826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6826");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.thenComparing(strComparator6);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = strComparator7.thenComparing(strComparator8);
        boolean boolean13 = strComparator8.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator14 = strComparator8.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = strComparator16.reversed();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator19.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator15.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = strComparator21.reversed();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.nullsFirst(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
    }

    @Test
    public void test6827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6827");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator34.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator34.getStrategy();
        generator29.setStrategy(generatorStrategy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator43.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = generator43.getClassLoader();
        generator43.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator59.setStrategy(generatorStrategy70);
        java.lang.ClassLoader classLoader72 = generator59.getClassLoader();
        generator43.setClassLoader(classLoader72);
        generator29.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        boolean boolean79 = generator76.getAttemptLoad();
        boolean boolean80 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator76.getStrategy();
        generator76.setUseCache(false);
        java.lang.ClassLoader classLoader84 = generator76.getClassLoader();
        generator29.setClassLoader(classLoader84);
        boolean boolean86 = generator29.getUseCache();
        boolean boolean87 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy88);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test6828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6828");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        generator3.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator3.setNamingPolicy(namingPolicy19);
        generator3.setUseCache(true);
        generator3.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator3.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        java.lang.ClassLoader classLoader30 = generator27.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator31.setStrategy(generatorStrategy37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator39.getStrategy();
        generator31.setStrategy(generatorStrategy44);
        generator31.setAttemptLoad(false);
        boolean boolean48 = generator31.getUseCache();
        java.lang.ClassLoader classLoader49 = generator31.getClassLoader();
        boolean boolean50 = generator31.getUseCache();
        boolean boolean51 = generator31.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator31.getStrategy();
        java.lang.ClassLoader classLoader53 = generator31.getClassLoader();
        generator27.setClassLoader(classLoader53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator55.setUseCache(true);
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = generator55.getUseCache();
        generator55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator55.getNamingPolicy();
        boolean boolean63 = generator55.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        java.lang.ClassLoader classLoader75 = null;
        generator72.setClassLoader(classLoader75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator72.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy77);
        java.lang.ClassLoader classLoader79 = generator64.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        boolean boolean83 = generator80.getAttemptLoad();
        boolean boolean84 = generator80.getUseCache();
        generator80.setAttemptLoad(true);
        generator80.setUseCache(true);
        generator80.setUseCache(false);
        boolean boolean91 = generator80.getUseCache();
        java.lang.ClassLoader classLoader92 = generator80.getClassLoader();
        generator64.setClassLoader(classLoader92);
        boolean boolean94 = generator64.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator64.getStrategy();
        generator55.setStrategy(generatorStrategy95);
        generator27.setStrategy(generatorStrategy95);
        generator0.setStrategy(generatorStrategy95);
        java.lang.ClassLoader classLoader99 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test6829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6829");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator5.reversed();
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.nullsFirst(strComparator5);
        boolean boolean9 = strComparator7.equals((java.lang.Object) (-1.0f));
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.nullsFirst(strComparator7);
        int int13 = strComparator7.compare("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test6830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6830");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean9 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test6831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6831");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        java.lang.ClassLoader classLoader48 = generator45.getClassLoader();
        generator35.setClassLoader(classLoader48);
        generator29.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader51 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = null;
        generator55.setClassLoader(classLoader58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        boolean boolean62 = generator55.getAttemptLoad();
        generator55.setUseCache(false);
        java.lang.ClassLoader classLoader65 = generator55.getClassLoader();
        generator55.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator55.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy68);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(namingPolicy68);
    }

    @Test
    public void test6832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6832");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator26.setStrategy(generatorStrategy39);
        generator26.setAttemptLoad(false);
        boolean boolean43 = generator26.getUseCache();
        java.lang.ClassLoader classLoader44 = generator26.getClassLoader();
        boolean boolean45 = generator26.getUseCache();
        boolean boolean46 = generator26.getAttemptLoad();
        java.lang.ClassLoader classLoader47 = generator26.getClassLoader();
        generator0.setClassLoader(classLoader47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator49.getClassLoader();
        generator49.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator60.setNamingPolicy(namingPolicy66);
        boolean boolean68 = generator60.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        boolean boolean82 = strComparator77.equals((java.lang.Object) strComparator81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { '4', strComparator74, strComparator77, 0.0d };
        generator69.setArrays(objArray84);
        generator60.setArrays(objArray84);
        generator54.setArrays(objArray84);
        generator49.setArrays(objArray84);
        generator49.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator49.getStrategy();
        generator0.setStrategy(generatorStrategy91);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test6833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6833");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator0.setNamingPolicy(namingPolicy31);
        generator0.setUseCache(false);
        boolean boolean35 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test6834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6834");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy16);
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader19 = null;
        generator0.setClassLoader(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader18);
    }

    @Test
    public void test6835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6835");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
    }

    @Test
    public void test6836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6836");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        boolean boolean8 = strComparator3.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator9 = strComparator3.reversed();
        int int12 = strComparator3.compare("hi!", "hi!");
        java.lang.Object obj13 = null;
        boolean boolean14 = strComparator3.equals(obj13);
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.reversed();
        int int18 = strComparator15.compare("hi!", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test6837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6837");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator60.thenComparing(strComparator61);
        boolean boolean63 = strComparator58.equals((java.lang.Object) strComparator62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { '4', strComparator55, strComparator58, 0.0d };
        generator50.setArrays(objArray65);
        java.lang.ClassLoader classLoader67 = null;
        generator50.setClassLoader(classLoader67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        boolean boolean80 = generator77.getAttemptLoad();
        boolean boolean81 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator77.getStrategy();
        generator76.setStrategy(generatorStrategy82);
        generator50.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader92 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator0.getNamingPolicy();
        boolean boolean94 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test6838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6838");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        boolean boolean20 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator12.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy40);
        generator27.setAttemptLoad(false);
        generator27.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
    }

    @Test
    public void test6839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6839");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        java.lang.ClassLoader classLoader9 = generator7.getClassLoader();
        generator7.setUseCache(false);
        generator7.setUseCache(true);
        boolean boolean14 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator7.getStrategy();
        boolean boolean16 = generator7.getAttemptLoad();
        boolean boolean17 = generator7.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator18.getStrategy();
        java.lang.ClassLoader classLoader20 = generator18.getClassLoader();
        generator18.setUseCache(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        generator25.setUseCache(true);
        generator25.setUseCache(false);
        boolean boolean36 = generator25.getUseCache();
        java.lang.ClassLoader classLoader37 = generator25.getClassLoader();
        boolean boolean38 = generator25.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        boolean boolean55 = strComparator50.equals((java.lang.Object) strComparator54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { '4', strComparator47, strComparator50, 0.0d };
        generator42.setArrays(objArray57);
        generator39.setArrays(objArray57);
        generator25.setArrays(objArray57);
        generator18.setArrays(objArray57);
        generator7.setArrays(objArray57);
        generator0.setArrays(objArray57);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6840");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean27 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator31.setStrategy(generatorStrategy37);
        boolean boolean39 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator31.getNamingPolicy();
        boolean boolean41 = generator31.getAttemptLoad();
        generator31.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        generator44.setStrategy(generatorStrategy50);
        generator31.setStrategy(generatorStrategy50);
        generator0.setStrategy(generatorStrategy50);
        boolean boolean54 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader55);
    }

    @Test
    public void test6841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6841");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        boolean boolean34 = strComparator29.equals((java.lang.Object) strComparator33);
        java.lang.Object[] objArray36 = new java.lang.Object[] { '4', strComparator26, strComparator29, 0.0d };
        generator21.setArrays(objArray36);
        java.lang.ClassLoader classLoader38 = null;
        generator21.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator47.setStrategy(generatorStrategy53);
        generator21.setStrategy(generatorStrategy53);
        generator13.setStrategy(generatorStrategy53);
        generator7.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test6842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6842");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        boolean boolean6 = strComparator4.equals((java.lang.Object) (short) 1);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        boolean boolean19 = strComparator7.equals((java.lang.Object) generator10);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        java.lang.ClassLoader classLoader23 = generator20.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator24.getStrategy();
        generator20.setStrategy(generatorStrategy27);
        generator10.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader30 = generator10.getClassLoader();
        generator10.setUseCache(false);
        boolean boolean33 = strComparator4.equals((java.lang.Object) generator10);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator10.getNamingPolicy();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test6843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6843");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        boolean boolean24 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        java.lang.ClassLoader classLoader26 = generator21.getClassLoader();
        generator0.setClassLoader(classLoader26);
        boolean boolean28 = generator0.getAttemptLoad();
        boolean boolean29 = generator0.getAttemptLoad();
        boolean boolean30 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test6844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6844");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        boolean boolean24 = strComparator19.equals((java.lang.Object) strComparator23);
        java.lang.Object[] objArray26 = new java.lang.Object[] { '4', strComparator16, strComparator19, 0.0d };
        generator11.setArrays(objArray26);
        java.lang.ClassLoader classLoader28 = null;
        generator11.setClassLoader(classLoader28);
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader32);
        boolean boolean34 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator37.getStrategy();
        generator37.setUseCache(true);
        generator37.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator37.getStrategy();
        generator0.setStrategy(generatorStrategy43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter45 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test6845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6845");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator13.getNamingPolicy();
        boolean boolean27 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        boolean boolean32 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator29.getStrategy();
        java.lang.ClassLoader classLoader34 = generator29.getClassLoader();
        generator29.setUseCache(false);
        boolean boolean37 = generator29.getUseCache();
        generator29.setUseCache(false);
        boolean boolean40 = generator29.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader45 = null;
        generator41.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator41.getNamingPolicy();
        boolean boolean48 = generator41.getUseCache();
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        generator41.setArrays(objArray49);
        generator29.setArrays(objArray49);
        generator13.setArrays(objArray49);
        generator3.setArrays(objArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter54 = org.mockito.cglib.util.ParallelSorter.create(objArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No arrays specified to sort");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
    }

    @Test
    public void test6846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6846");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator3.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator3.getStrategy();
        boolean boolean11 = generator3.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        boolean boolean25 = strComparator20.equals((java.lang.Object) strComparator24);
        java.lang.Object[] objArray27 = new java.lang.Object[] { '4', strComparator17, strComparator20, 0.0d };
        generator12.setArrays(objArray27);
        java.lang.ClassLoader classLoader29 = null;
        generator12.setClassLoader(classLoader29);
        boolean boolean31 = generator12.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        generator3.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator41.setStrategy(generatorStrategy54);
        generator41.setAttemptLoad(false);
        boolean boolean58 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator41.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator41.getStrategy();
        generator0.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator66.getStrategy();
        generator0.setStrategy(generatorStrategy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator72.getStrategy();
        java.lang.ClassLoader classLoader74 = generator72.getClassLoader();
        generator72.setUseCache(false);
        boolean boolean77 = generator72.getUseCache();
        java.lang.ClassLoader classLoader78 = generator72.getClassLoader();
        boolean boolean79 = generator72.getUseCache();
        java.lang.ClassLoader classLoader80 = generator72.getClassLoader();
        generator0.setClassLoader(classLoader80);
        boolean boolean82 = generator0.getUseCache();
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test6847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6847");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator16.getStrategy();
        generator9.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator22.getNamingPolicy();
        boolean boolean31 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator22.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        boolean boolean42 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator34.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = generator34.getClassLoader();
        generator22.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator22.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator55 = strComparator50.reversed();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = strComparator58.thenComparing(strComparator59);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = strComparator65.thenComparing(strComparator66);
        boolean boolean70 = strComparator62.equals((java.lang.Object) strComparator66);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        java.lang.ClassLoader classLoader88 = null;
        generator71.setClassLoader(classLoader88);
        boolean boolean90 = generator71.getAttemptLoad();
        boolean boolean91 = strComparator66.equals((java.lang.Object) generator71);
        boolean boolean92 = strComparator50.equals((java.lang.Object) generator71);
        org.mockito.cglib.util.ParallelSorter.Generator generator93 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean94 = generator93.getAttemptLoad();
        java.lang.ClassLoader classLoader95 = generator93.getClassLoader();
        java.lang.ClassLoader classLoader96 = generator93.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator93.getNamingPolicy();
        generator71.setNamingPolicy(namingPolicy97);
        generator0.setNamingPolicy(namingPolicy97);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test6848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6848");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator20.getStrategy();
        generator20.setUseCache(true);
        generator20.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        java.lang.ClassLoader classLoader46 = generator43.getClassLoader();
        generator28.setClassLoader(classLoader46);
        generator28.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = generator50.getClassLoader();
        generator28.setClassLoader(classLoader53);
        boolean boolean55 = generator28.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        generator56.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = generator56.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator56.getNamingPolicy();
        generator56.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator56.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy73);
        generator28.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator28.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy77);
    }

    @Test
    public void test6849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6849");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator9.getNamingPolicy();
        boolean boolean18 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator9.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator39.getStrategy();
        generator32.setStrategy(generatorStrategy40);
        generator23.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader43 = generator23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter47 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy46);
    }

    @Test
    public void test6850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6850");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator34.getStrategy();
        java.lang.ClassLoader classLoader36 = generator34.getClassLoader();
        generator34.setUseCache(false);
        boolean boolean39 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator34.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        generator41.setUseCache(true);
        generator41.setUseCache(false);
        boolean boolean52 = generator41.getUseCache();
        java.lang.ClassLoader classLoader53 = generator41.getClassLoader();
        boolean boolean54 = generator41.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        boolean boolean71 = strComparator66.equals((java.lang.Object) strComparator70);
        java.lang.Object[] objArray73 = new java.lang.Object[] { '4', strComparator63, strComparator66, 0.0d };
        generator58.setArrays(objArray73);
        generator55.setArrays(objArray73);
        generator41.setArrays(objArray73);
        generator34.setArrays(objArray73);
        generator0.setArrays(objArray73);
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6851");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader18);
    }

    @Test
    public void test6852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6852");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass15 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test6853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6853");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator12.getStrategy();
        generator12.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator16.getNamingPolicy();
        boolean boolean24 = generator16.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = strComparator29.thenComparing(strComparator30);
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = strComparator32.thenComparing(strComparator33);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        boolean boolean38 = strComparator33.equals((java.lang.Object) strComparator37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { '4', strComparator30, strComparator33, 0.0d };
        generator25.setArrays(objArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator25.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy43);
        generator12.setNamingPolicy(namingPolicy43);
        java.lang.ClassLoader classLoader46 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
    }

    @Test
    public void test6854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6854");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        generator0.setClassLoader(classLoader27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator32.setStrategy(generatorStrategy45);
        generator29.setStrategy(generatorStrategy45);
        boolean boolean48 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator29.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader55);
    }

    @Test
    public void test6855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6855");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy13);
        boolean boolean15 = generator7.getUseCache();
        boolean boolean16 = generator7.getUseCache();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        java.lang.ClassLoader classLoader22 = generator19.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy45);
        generator19.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator19.getStrategy();
        generator7.setStrategy(generatorStrategy49);
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator0.setStrategy(generatorStrategy52);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        java.lang.ClassLoader classLoader59 = generator56.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = strComparator67.thenComparing(strComparator68);
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = strComparator70.thenComparing(strComparator71);
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = strComparator73.thenComparing(strComparator74);
        boolean boolean76 = strComparator71.equals((java.lang.Object) strComparator75);
        java.lang.Object[] objArray78 = new java.lang.Object[] { '4', strComparator68, strComparator71, 0.0d };
        generator63.setArrays(objArray78);
        generator60.setArrays(objArray78);
        generator56.setArrays(objArray78);
        generator0.setArrays(objArray78);
        boolean boolean83 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test6856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6856");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        boolean boolean6 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test6857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6857");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        boolean boolean23 = strComparator18.equals((java.lang.Object) strComparator22);
        java.lang.Object[] objArray25 = new java.lang.Object[] { '4', strComparator15, strComparator18, 0.0d };
        generator10.setArrays(objArray25);
        java.lang.ClassLoader classLoader27 = null;
        generator10.setClassLoader(classLoader27);
        boolean boolean29 = generator10.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator10.setStrategy(generatorStrategy35);
        boolean boolean37 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator10.getNamingPolicy();
        boolean boolean39 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
    }

    @Test
    public void test6858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6858");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader20);
    }

    @Test
    public void test6859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6859");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator10.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        generator19.setStrategy(generatorStrategy27);
        generator10.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader30 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator31.getNamingPolicy();
        generator31.setUseCache(false);
        boolean boolean42 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator31.getNamingPolicy();
        generator31.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator31.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy46);
        generator0.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader49 = generator0.getClassLoader();
        boolean boolean50 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test6860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6860");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test6861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6861");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(false);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(true);
        boolean boolean22 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader23 = generator13.getClassLoader();
        java.lang.ClassLoader classLoader24 = generator13.getClassLoader();
        boolean boolean25 = generator13.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        generator33.setAttemptLoad(true);
        boolean boolean40 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator33.getNamingPolicy();
        java.lang.ClassLoader classLoader42 = generator33.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        boolean boolean59 = strComparator54.equals((java.lang.Object) strComparator58);
        java.lang.Object[] objArray61 = new java.lang.Object[] { '4', strComparator51, strComparator54, 0.0d };
        generator46.setArrays(objArray61);
        generator43.setArrays(objArray61);
        generator33.setArrays(objArray61);
        generator26.setArrays(objArray61);
        generator13.setArrays(objArray61);
        generator0.setArrays(objArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator69.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator69.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator73.setUseCache(true);
        java.lang.ClassLoader classLoader76 = generator73.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator77.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator77.getStrategy();
        generator73.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator73.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator73.getNamingPolicy();
        generator69.setNamingPolicy(namingPolicy83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator69.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test6862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6862");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        boolean boolean24 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        java.lang.ClassLoader classLoader26 = generator21.getClassLoader();
        generator0.setClassLoader(classLoader26);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator30.setStrategy(generatorStrategy36);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator30.setStrategy(generatorStrategy43);
        generator30.setAttemptLoad(false);
        boolean boolean47 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        boolean boolean50 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test6863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6863");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy38);
        generator0.setNamingPolicy(namingPolicy38);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader45 = generator0.getClassLoader();
        boolean boolean46 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass47 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test6864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6864");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy21);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator8.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator26.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy34);
        generator0.setNamingPolicy(namingPolicy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy51);
        generator38.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator56.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator38.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        boolean boolean68 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test6865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6865");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator26.thenComparing(strComparator27);
        boolean boolean29 = strComparator24.equals((java.lang.Object) strComparator28);
        java.lang.Object[] objArray31 = new java.lang.Object[] { '4', strComparator21, strComparator24, 0.0d };
        generator16.setArrays(objArray31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader40);
        java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test6866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6866");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        boolean boolean45 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass46 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test6867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6867");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        java.lang.ClassLoader classLoader11 = generator8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator8.getStrategy();
        java.lang.ClassLoader classLoader13 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader13);
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        boolean boolean24 = generator16.getUseCache();
        boolean boolean25 = generator16.getUseCache();
        generator16.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator16.getStrategy();
        generator0.setStrategy(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test6868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6868");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator11.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator21.getStrategy();
        generator21.setAttemptLoad(false);
        generator21.setUseCache(false);
        generator21.setUseCache(false);
        generator21.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        boolean boolean52 = strComparator47.equals((java.lang.Object) strComparator51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { '4', strComparator44, strComparator47, 0.0d };
        generator39.setArrays(objArray54);
        generator31.setArrays(objArray54);
        generator21.setArrays(objArray54);
        generator11.setArrays(objArray54);
        generator0.setArrays(objArray54);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6869");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test6870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6870");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        boolean boolean23 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator12.getNamingPolicy();
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        java.lang.ClassLoader classLoader44 = null;
        generator27.setClassLoader(classLoader44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator53.setStrategy(generatorStrategy59);
        generator27.setStrategy(generatorStrategy59);
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = generator27.getClassLoader();
        generator12.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        boolean boolean68 = generator0.getUseCache();
        boolean boolean69 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean74 = generator0.getUseCache();
        boolean boolean75 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test6871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6871");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy29);
        generator16.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator16.getStrategy();
        generator12.setStrategy(generatorStrategy33);
        boolean boolean35 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test6872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6872");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        boolean boolean20 = strComparator15.equals((java.lang.Object) strComparator19);
        java.lang.Object[] objArray22 = new java.lang.Object[] { '4', strComparator12, strComparator15, 0.0d };
        generator7.setArrays(objArray22);
        java.lang.ClassLoader classLoader24 = null;
        generator7.setClassLoader(classLoader24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        generator33.setStrategy(generatorStrategy39);
        generator7.setStrategy(generatorStrategy39);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy48);
        generator7.setNamingPolicy(namingPolicy48);
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy48);
    }

    @Test
    public void test6873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6873");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test6874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6874");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        generator20.setUseCache(true);
        generator20.setAttemptLoad(true);
        generator20.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator20.getStrategy();
        java.lang.ClassLoader classLoader34 = generator20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        java.lang.ClassLoader classLoader57 = null;
        generator40.setClassLoader(classLoader57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader62 = null;
        generator59.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy64);
        boolean boolean66 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator40.getStrategy();
        generator40.setUseCache(false);
        java.lang.ClassLoader classLoader72 = generator40.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator40.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator75.setUseCache(true);
        boolean boolean78 = generator75.getAttemptLoad();
        boolean boolean79 = generator75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator75.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator75.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator75.getStrategy();
        boolean boolean83 = generator75.getAttemptLoad();
        boolean boolean84 = generator75.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = generator75.getClassLoader();
        generator75.setUseCache(true);
        java.lang.ClassLoader classLoader88 = generator75.getClassLoader();
        generator0.setClassLoader(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test6875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6875");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.thenComparing(strComparator6);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = strComparator7.thenComparing(strComparator8);
        boolean boolean13 = strComparator8.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator14 = strComparator8.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = strComparator16.reversed();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator19.reversed();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator15.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        int int26 = strComparator23.compare("", "");
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.reverseOrder();
        java.util.Comparator<java.lang.String> strComparator28 = strComparator23.thenComparing(strComparator27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        java.lang.ClassLoader classLoader46 = null;
        generator29.setClassLoader(classLoader46);
        generator29.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator29.getNamingPolicy();
        boolean boolean58 = generator29.getUseCache();
        boolean boolean59 = strComparator23.equals((java.lang.Object) generator29);
        java.util.Comparator<java.lang.String> strComparator60 = strComparator23.reversed();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strComparator60);
    }

    @Test
    public void test6876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6876");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        generator19.setUseCache(true);
        boolean boolean28 = strComparator16.equals((java.lang.Object) generator19);
        generator19.setAttemptLoad(false);
        boolean boolean31 = generator19.getUseCache();
        generator19.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        generator34.setUseCache(true);
        generator34.setAttemptLoad(true);
        boolean boolean45 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator34.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator47.setStrategy(generatorStrategy53);
        boolean boolean55 = generator47.getAttemptLoad();
        generator47.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader62 = null;
        generator59.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy64);
        boolean boolean66 = generator58.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        boolean boolean80 = strComparator75.equals((java.lang.Object) strComparator79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { '4', strComparator72, strComparator75, 0.0d };
        generator67.setArrays(objArray82);
        generator58.setArrays(objArray82);
        boolean boolean85 = generator58.getAttemptLoad();
        java.lang.Object[] objArray86 = new java.lang.Object[] { generator58 };
        generator47.setArrays(objArray86);
        generator34.setArrays(objArray86);
        generator19.setArrays(objArray86);
        generator0.setArrays(objArray86);
        boolean boolean91 = generator0.getAttemptLoad();
        boolean boolean92 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass93 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test6877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6877");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        generator32.setStrategy(generatorStrategy43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator45.getNamingPolicy();
        generator45.setUseCache(false);
        boolean boolean56 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator45.getNamingPolicy();
        generator45.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator45.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy60);
        generator0.setNamingPolicy(namingPolicy60);
        boolean boolean63 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter64 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test6878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6878");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        generator0.setArrays(objArray24);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = strComparator36.thenComparing(strComparator37);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        boolean boolean42 = strComparator37.equals((java.lang.Object) strComparator41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { '4', strComparator34, strComparator37, 0.0d };
        generator29.setArrays(objArray44);
        java.lang.ClassLoader classLoader46 = null;
        generator29.setClassLoader(classLoader46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generator29.getUseCache();
        java.lang.ClassLoader classLoader56 = generator29.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator29.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = generator64.getUseCache();
        generator64.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator71.getStrategy();
        generator64.setStrategy(generatorStrategy72);
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator74.setUseCache(true);
        java.lang.ClassLoader classLoader77 = generator74.getClassLoader();
        generator64.setClassLoader(classLoader77);
        generator58.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader80 = generator58.getClassLoader();
        generator29.setClassLoader(classLoader80);
        java.lang.ClassLoader classLoader82 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader82);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = null;
        generator0.setNamingPolicy(namingPolicy86);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test6879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6879");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        boolean boolean32 = generator0.getAttemptLoad();
        boolean boolean33 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator34.setStrategy(generatorStrategy47);
        generator34.setAttemptLoad(false);
        boolean boolean51 = generator34.getUseCache();
        java.lang.ClassLoader classLoader52 = generator34.getClassLoader();
        boolean boolean53 = generator34.getUseCache();
        boolean boolean54 = generator34.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator34.getStrategy();
        boolean boolean56 = generator34.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator57.setStrategy(generatorStrategy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator72 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader73 = null;
        generator72.setClassLoader(classLoader73);
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = strComparator76.thenComparing(strComparator77);
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = strComparator79.thenComparing(strComparator80);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        boolean boolean85 = strComparator80.equals((java.lang.Object) strComparator84);
        java.lang.Object[] objArray87 = new java.lang.Object[] { '4', strComparator77, strComparator80, 0.0d };
        generator72.setArrays(objArray87);
        generator57.setArrays(objArray87);
        generator34.setArrays(objArray87);
        generator0.setArrays(objArray87);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6880");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        generator4.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator4.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy36);
        boolean boolean38 = generator30.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        boolean boolean52 = strComparator47.equals((java.lang.Object) strComparator51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { '4', strComparator44, strComparator47, 0.0d };
        generator39.setArrays(objArray54);
        generator30.setArrays(objArray54);
        generator24.setArrays(objArray54);
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader61 = generator58.getClassLoader();
        generator24.setClassLoader(classLoader61);
        generator0.setClassLoader(classLoader61);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test6881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6881");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test6882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6882");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.lang.ClassLoader classLoader23 = null;
        generator20.setClassLoader(classLoader23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator20.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = generator19.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator19.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator36.getNamingPolicy();
        java.lang.ClassLoader classLoader45 = generator36.getClassLoader();
        generator19.setClassLoader(classLoader45);
        java.lang.ClassLoader classLoader47 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test6883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6883");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test6884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6884");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        boolean boolean6 = generator0.getAttemptLoad();
        boolean boolean7 = generator0.getUseCache();
        boolean boolean8 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6885");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader6);
    }

    @Test
    public void test6886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6886");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator26.getStrategy();
        generator19.setStrategy(generatorStrategy27);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        java.lang.ClassLoader classLoader32 = generator29.getClassLoader();
        generator19.setClassLoader(classLoader32);
        generator13.setClassLoader(classLoader32);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        boolean boolean43 = generator35.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator35.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator45.setUseCache(true);
        boolean boolean48 = generator45.getAttemptLoad();
        boolean boolean49 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator45.getStrategy();
        generator35.setStrategy(generatorStrategy50);
        generator13.setStrategy(generatorStrategy50);
        boolean boolean53 = generator13.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator54.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator62.setUseCache(true);
        boolean boolean65 = generator62.getAttemptLoad();
        boolean boolean66 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator62.getStrategy();
        generator61.setStrategy(generatorStrategy67);
        org.mockito.cglib.util.ParallelSorter.Generator generator69 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator69.setUseCache(true);
        boolean boolean72 = generator69.getAttemptLoad();
        boolean boolean73 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator69.getStrategy();
        generator61.setStrategy(generatorStrategy74);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.util.Comparator<java.lang.String> strComparator80 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = strComparator80.thenComparing(strComparator81);
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = strComparator83.thenComparing(strComparator84);
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = strComparator86.thenComparing(strComparator87);
        boolean boolean89 = strComparator84.equals((java.lang.Object) strComparator88);
        java.lang.Object[] objArray91 = new java.lang.Object[] { '4', strComparator81, strComparator84, 0.0d };
        generator76.setArrays(objArray91);
        generator61.setArrays(objArray91);
        generator54.setArrays(objArray91);
        generator13.setArrays(objArray91);
        generator0.setArrays(objArray91);
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass98 = classLoader97.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test6887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6887");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean34 = generator0.getUseCache();
        boolean boolean35 = generator0.getUseCache();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test6888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6888");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator8.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator24.getStrategy();
        generator17.setStrategy(generatorStrategy25);
        generator8.setStrategy(generatorStrategy25);
        boolean boolean28 = generator8.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        generator29.setUseCache(true);
        generator29.setUseCache(false);
        boolean boolean40 = generator29.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        generator45.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = null;
        generator52.setClassLoader(classLoader55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        java.lang.ClassLoader classLoader62 = generator59.getClassLoader();
        generator44.setClassLoader(classLoader62);
        generator41.setClassLoader(classLoader62);
        generator29.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader68 = generator29.getClassLoader();
        generator8.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test6889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6889");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        boolean boolean20 = strComparator15.equals((java.lang.Object) strComparator19);
        java.lang.Object[] objArray22 = new java.lang.Object[] { '4', strComparator12, strComparator15, 0.0d };
        generator7.setArrays(objArray22);
        generator0.setArrays(objArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator27.setUseCache(false);
        generator27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator27.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator35.getStrategy();
        java.lang.ClassLoader classLoader37 = generator35.getClassLoader();
        generator35.setUseCache(false);
        boolean boolean40 = generator35.getUseCache();
        java.lang.ClassLoader classLoader41 = generator35.getClassLoader();
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator27.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter45 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy43);
    }

    @Test
    public void test6890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6890");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        generator12.setStrategy(generatorStrategy18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator12.setStrategy(generatorStrategy25);
        generator9.setStrategy(generatorStrategy25);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        generator29.setAttemptLoad(false);
        boolean boolean46 = generator29.getUseCache();
        java.lang.ClassLoader classLoader47 = generator29.getClassLoader();
        generator9.setClassLoader(classLoader47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator49.getStrategy();
        java.lang.ClassLoader classLoader51 = generator49.getClassLoader();
        generator9.setClassLoader(classLoader51);
        generator0.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test6891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6891");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator13.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        generator13.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test6892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6892");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        generator29.setAttemptLoad(true);
        boolean boolean36 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader38 = generator29.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        boolean boolean55 = strComparator50.equals((java.lang.Object) strComparator54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { '4', strComparator47, strComparator50, 0.0d };
        generator42.setArrays(objArray57);
        generator39.setArrays(objArray57);
        generator29.setArrays(objArray57);
        generator0.setArrays(objArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator63.getNamingPolicy();
        generator63.setAttemptLoad(false);
        java.lang.ClassLoader classLoader69 = generator63.getClassLoader();
        generator0.setClassLoader(classLoader69);
        generator0.setAttemptLoad(true);
        boolean boolean73 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean76 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test6893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6893");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6894");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        generator15.setUseCache(true);
        generator15.setAttemptLoad(true);
        generator15.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator28.getStrategy();
        java.lang.ClassLoader classLoader30 = generator28.getClassLoader();
        generator28.setUseCache(false);
        boolean boolean33 = generator28.getAttemptLoad();
        boolean boolean34 = generator28.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator36.getStrategy();
        generator35.setStrategy(generatorStrategy41);
        boolean boolean43 = generator35.getAttemptLoad();
        generator35.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader50 = null;
        generator47.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy52);
        boolean boolean54 = generator46.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        boolean boolean68 = strComparator63.equals((java.lang.Object) strComparator67);
        java.lang.Object[] objArray70 = new java.lang.Object[] { '4', strComparator60, strComparator63, 0.0d };
        generator55.setArrays(objArray70);
        generator46.setArrays(objArray70);
        boolean boolean73 = generator46.getAttemptLoad();
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator46 };
        generator35.setArrays(objArray74);
        generator28.setArrays(objArray74);
        generator15.setArrays(objArray74);
        generator0.setArrays(objArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        boolean boolean80 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test6895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6895");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test6896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6896");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test6897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6897");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator26.setStrategy(generatorStrategy32);
        generator0.setStrategy(generatorStrategy32);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator49.setUseCache(true);
        boolean boolean52 = generator49.getAttemptLoad();
        boolean boolean53 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator49.getStrategy();
        generator41.setStrategy(generatorStrategy54);
        generator38.setStrategy(generatorStrategy54);
        boolean boolean57 = generator38.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        generator58.setStrategy(generatorStrategy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        generator58.setStrategy(generatorStrategy71);
        generator58.setAttemptLoad(false);
        boolean boolean75 = generator58.getUseCache();
        java.lang.ClassLoader classLoader76 = generator58.getClassLoader();
        generator38.setClassLoader(classLoader76);
        generator0.setClassLoader(classLoader76);
        boolean boolean79 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test6898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6898");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean34 = generator0.getUseCache();
        boolean boolean35 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        boolean boolean52 = strComparator47.equals((java.lang.Object) strComparator51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { '4', strComparator44, strComparator47, 0.0d };
        generator39.setArrays(objArray54);
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        generator64.setClassLoader(classLoader67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator63.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator63.setNamingPolicy(namingPolicy76);
        java.lang.ClassLoader classLoader78 = generator63.getClassLoader();
        generator39.setClassLoader(classLoader78);
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator81 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader82 = null;
        generator81.setClassLoader(classLoader82);
        java.lang.ClassLoader classLoader84 = null;
        generator81.setClassLoader(classLoader84);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator81.getNamingPolicy();
        generator80.setNamingPolicy(namingPolicy86);
        org.mockito.cglib.util.ParallelSorter.Generator generator88 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader89 = null;
        generator88.setClassLoader(classLoader89);
        java.lang.ClassLoader classLoader91 = null;
        generator88.setClassLoader(classLoader91);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator88.getNamingPolicy();
        generator80.setNamingPolicy(namingPolicy93);
        java.lang.ClassLoader classLoader95 = generator80.getClassLoader();
        generator39.setClassLoader(classLoader95);
        generator0.setClassLoader(classLoader95);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(classLoader95);
    }

    @Test
    public void test6899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6899");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setAttemptLoad(true);
        boolean boolean23 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator12.getNamingPolicy();
        generator12.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        java.lang.ClassLoader classLoader44 = null;
        generator27.setClassLoader(classLoader44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator53.setStrategy(generatorStrategy59);
        generator27.setStrategy(generatorStrategy59);
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = generator27.getClassLoader();
        generator12.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        boolean boolean68 = generator0.getUseCache();
        boolean boolean69 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test6900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6900");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator3.setUseCache(true);
        boolean boolean6 = generator3.getAttemptLoad();
        boolean boolean7 = generator3.getUseCache();
        generator3.setAttemptLoad(true);
        generator3.setUseCache(true);
        boolean boolean12 = strComparator0.equals((java.lang.Object) generator3);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator13.setUseCache(true);
        java.lang.ClassLoader classLoader16 = generator13.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        generator13.setStrategy(generatorStrategy20);
        generator3.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader23 = generator3.getClassLoader();
        generator3.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = generator3.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
    }

    @Test
    public void test6901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6901");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test6902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6902");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator1.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator0.equals((java.lang.Object) generator1);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(false);
        generator1.setUseCache(false);
        generator1.setUseCache(true);
        boolean boolean23 = generator1.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        boolean boolean37 = strComparator32.equals((java.lang.Object) strComparator36);
        java.lang.Object[] objArray39 = new java.lang.Object[] { '4', strComparator29, strComparator32, 0.0d };
        generator24.setArrays(objArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator24.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator24.setStrategy(generatorStrategy44);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator50.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader58 = null;
        generator57.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader60 = null;
        generator57.setClassLoader(classLoader60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator64.setUseCache(true);
        java.lang.ClassLoader classLoader67 = generator64.getClassLoader();
        generator49.setClassLoader(classLoader67);
        generator46.setClassLoader(classLoader67);
        java.lang.ClassLoader classLoader70 = generator46.getClassLoader();
        generator24.setClassLoader(classLoader70);
        generator1.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader73 = generator1.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test6903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6903");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.thenComparing(strComparator4);
        java.util.Comparator<java.lang.String> strComparator6 = strComparator2.thenComparing(strComparator3);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = strComparator9.thenComparing(strComparator10);
        boolean boolean14 = strComparator6.equals((java.lang.Object) strComparator10);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        java.lang.ClassLoader classLoader32 = null;
        generator15.setClassLoader(classLoader32);
        boolean boolean34 = generator15.getAttemptLoad();
        boolean boolean35 = strComparator10.equals((java.lang.Object) generator15);
        java.util.Comparator<java.lang.String> strComparator36 = strComparator10.reversed();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator36.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        generator38.setUseCache(true);
        generator38.setUseCache(false);
        boolean boolean49 = generator38.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader64 = null;
        generator61.setClassLoader(classLoader64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        java.lang.ClassLoader classLoader71 = generator68.getClassLoader();
        generator53.setClassLoader(classLoader71);
        generator50.setClassLoader(classLoader71);
        generator38.setClassLoader(classLoader71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator38.getStrategy();
        boolean boolean76 = strComparator36.equals((java.lang.Object) generator38);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator38.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter78 = generator38.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
    }

    @Test
    public void test6904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6904");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        java.lang.ClassLoader classLoader48 = null;
        generator31.setClassLoader(classLoader48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        java.lang.ClassLoader classLoader53 = null;
        generator50.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        generator31.setStrategy(generatorStrategy63);
        generator23.setStrategy(generatorStrategy63);
        generator17.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.lang.ClassLoader classLoader74 = null;
        generator71.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator71.getNamingPolicy();
        generator70.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader79 = null;
        generator78.setClassLoader(classLoader79);
        java.lang.ClassLoader classLoader81 = null;
        generator78.setClassLoader(classLoader81);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator78.getNamingPolicy();
        generator70.setNamingPolicy(namingPolicy83);
        java.lang.ClassLoader classLoader85 = generator70.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator70.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator70.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator88 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator88.setUseCache(true);
        boolean boolean91 = generator88.getAttemptLoad();
        boolean boolean92 = generator88.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator88.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator88.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator88.getStrategy();
        generator70.setStrategy(generatorStrategy95);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator70.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy97);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter99 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test6905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6905");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        boolean boolean32 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        boolean boolean34 = generator0.getAttemptLoad();
        boolean boolean35 = generator0.getUseCache();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test6906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6906");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        boolean boolean31 = strComparator26.equals((java.lang.Object) strComparator30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { '4', strComparator23, strComparator26, 0.0d };
        generator18.setArrays(objArray33);
        generator10.setArrays(objArray33);
        generator0.setArrays(objArray33);
        boolean boolean37 = generator0.getUseCache();
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test6907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6907");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test6908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6908");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator30.setUseCache(true);
        boolean boolean33 = generator30.getAttemptLoad();
        boolean boolean34 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator30.getStrategy();
        generator29.setStrategy(generatorStrategy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = strComparator48.thenComparing(strComparator49);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        boolean boolean57 = strComparator52.equals((java.lang.Object) strComparator56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { '4', strComparator49, strComparator52, 0.0d };
        generator44.setArrays(objArray59);
        generator29.setArrays(objArray59);
        generator0.setArrays(objArray59);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator66.setUseCache(true);
        boolean boolean69 = generator66.getAttemptLoad();
        boolean boolean70 = generator66.getUseCache();
        generator66.setAttemptLoad(true);
        generator66.setUseCache(true);
        boolean boolean75 = strComparator63.equals((java.lang.Object) generator66);
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        java.lang.ClassLoader classLoader79 = generator76.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator80 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator80.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator80.getStrategy();
        generator76.setStrategy(generatorStrategy83);
        generator66.setStrategy(generatorStrategy83);
        generator0.setStrategy(generatorStrategy83);
        boolean boolean87 = generator0.getUseCache();
        java.lang.Object[] objArray88 = null;
        generator0.setArrays(objArray88);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test6909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6909");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        boolean boolean23 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test6910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6910");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator18.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy33);
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean36 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator0.setArrays(objArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        boolean boolean61 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator62.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator62.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator62.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator62.getClassLoader();
        generator0.setClassLoader(classLoader73);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test6911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6911");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test6912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6912");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator10.getStrategy();
        generator9.setStrategy(generatorStrategy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        boolean boolean21 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        generator9.setStrategy(generatorStrategy22);
        generator9.setAttemptLoad(false);
        java.lang.ClassLoader classLoader26 = generator9.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        java.lang.ClassLoader classLoader44 = generator27.getClassLoader();
        generator9.setClassLoader(classLoader44);
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = strComparator51.thenComparing(strComparator52);
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = strComparator54.thenComparing(strComparator55);
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator59 = strComparator57.thenComparing(strComparator58);
        boolean boolean60 = strComparator55.equals((java.lang.Object) strComparator59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { '4', strComparator52, strComparator55, 0.0d };
        generator47.setArrays(objArray62);
        java.lang.ClassLoader classLoader64 = null;
        generator47.setClassLoader(classLoader64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.lang.ClassLoader classLoader69 = null;
        generator66.setClassLoader(classLoader69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator66.getNamingPolicy();
        generator47.setNamingPolicy(namingPolicy71);
        boolean boolean73 = generator47.getUseCache();
        java.lang.ClassLoader classLoader74 = generator47.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator47.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator47.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.lang.ClassLoader classLoader80 = generator77.getClassLoader();
        generator47.setClassLoader(classLoader80);
        generator47.setUseCache(false);
        java.lang.ClassLoader classLoader84 = generator47.getClassLoader();
        generator0.setClassLoader(classLoader84);
        java.lang.Class<?> wildcardClass86 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test6913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6913");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy38);
        generator0.setNamingPolicy(namingPolicy38);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader45 = generator0.getClassLoader();
        boolean boolean46 = generator0.getUseCache();
        java.lang.ClassLoader classLoader47 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test6914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6914");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator7 = strComparator5.thenComparing(strComparator6);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = strComparator7.thenComparing(strComparator8);
        boolean boolean13 = strComparator8.equals((java.lang.Object) "");
        java.util.Comparator<java.lang.String> strComparator14 = strComparator8.reversed();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator3.thenComparing(strComparator14);
        int int18 = strComparator3.compare("hi!", "hi!");
        int int21 = strComparator3.compare("", "hi!");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
    }

    @Test
    public void test6915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6915");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        int int3 = strComparator0.compare("", "");
        java.util.Comparator<java.lang.String> strComparator4 = strComparator0.reversed();
        int int7 = strComparator4.compare("", "");
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test6916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6916");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator0.setNamingPolicy(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy11);
    }

    @Test
    public void test6917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6917");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        boolean boolean32 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator0.setClassLoader(classLoader33);
        boolean boolean35 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean39 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test6918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6918");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        boolean boolean18 = generator0.getUseCache();
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator22.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = generator22.getClassLoader();
        generator22.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator38.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator44 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator44.setUseCache(true);
        boolean boolean47 = generator44.getAttemptLoad();
        boolean boolean48 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator44.getStrategy();
        generator38.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = generator38.getClassLoader();
        generator22.setClassLoader(classLoader51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        boolean boolean60 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        generator53.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator65.getStrategy();
        generator53.setStrategy(generatorStrategy69);
        generator22.setStrategy(generatorStrategy69);
        generator0.setStrategy(generatorStrategy69);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        boolean boolean75 = generator0.getUseCache();
        boolean boolean76 = generator0.getUseCache();
        boolean boolean77 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter78 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test6919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6919");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
    }

    @Test
    public void test6920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6920");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator17.getStrategy();
        java.lang.ClassLoader classLoader19 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean22 = generator17.getUseCache();
        java.lang.ClassLoader classLoader23 = generator17.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator24.getStrategy();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        generator29.setUseCache(true);
        generator29.setAttemptLoad(true);
        generator29.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator42.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy48);
        generator24.setNamingPolicy(namingPolicy48);
        generator17.setNamingPolicy(namingPolicy48);
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
    }

    @Test
    public void test6921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6921");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator12.getStrategy();
        java.lang.ClassLoader classLoader14 = generator12.getClassLoader();
        generator12.setUseCache(false);
        boolean boolean17 = generator12.getAttemptLoad();
        boolean boolean18 = generator12.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = generator12.getClassLoader();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        generator23.setUseCache(true);
        boolean boolean32 = strComparator20.equals((java.lang.Object) generator23);
        generator23.setAttemptLoad(false);
        boolean boolean35 = generator23.getUseCache();
        generator23.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator38 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator38.setUseCache(true);
        boolean boolean41 = generator38.getAttemptLoad();
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        generator38.setUseCache(true);
        generator38.setAttemptLoad(true);
        boolean boolean49 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator38.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator51.setStrategy(generatorStrategy57);
        boolean boolean59 = generator51.getAttemptLoad();
        generator51.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = null;
        generator63.setClassLoader(classLoader66);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator62.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator71 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        boolean boolean84 = strComparator79.equals((java.lang.Object) strComparator83);
        java.lang.Object[] objArray86 = new java.lang.Object[] { '4', strComparator76, strComparator79, 0.0d };
        generator71.setArrays(objArray86);
        generator62.setArrays(objArray86);
        boolean boolean89 = generator62.getAttemptLoad();
        java.lang.Object[] objArray90 = new java.lang.Object[] { generator62 };
        generator51.setArrays(objArray90);
        generator38.setArrays(objArray90);
        generator23.setArrays(objArray90);
        generator12.setArrays(objArray90);
        generator0.setArrays(objArray90);
        boolean boolean96 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test6922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6922");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator5.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = generator5.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator5.getNamingPolicy();
        boolean boolean20 = strComparator3.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator5.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy35);
        java.lang.ClassLoader classLoader37 = generator22.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator22.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator22.getStrategy();
        boolean boolean40 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator22.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        generator43.setAttemptLoad(true);
        boolean boolean50 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator43.getNamingPolicy();
        boolean boolean52 = generator43.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        generator53.setNamingPolicy(namingPolicy59);
        boolean boolean61 = generator53.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        boolean boolean75 = strComparator70.equals((java.lang.Object) strComparator74);
        java.lang.Object[] objArray77 = new java.lang.Object[] { '4', strComparator67, strComparator70, 0.0d };
        generator62.setArrays(objArray77);
        generator53.setArrays(objArray77);
        generator43.setArrays(objArray77);
        generator22.setArrays(objArray77);
        generator5.setArrays(objArray77);
        generator5.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6923");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = strComparator21.thenComparing(strComparator22);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        boolean boolean27 = strComparator22.equals((java.lang.Object) strComparator26);
        java.lang.Object[] objArray29 = new java.lang.Object[] { '4', strComparator19, strComparator22, 0.0d };
        generator14.setArrays(objArray29);
        java.lang.ClassLoader classLoader31 = null;
        generator14.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        generator14.setStrategy(generatorStrategy46);
        generator6.setStrategy(generatorStrategy46);
        generator0.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        boolean boolean52 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test6924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6924");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test6925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6925");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        boolean boolean7 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test6926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6926");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        boolean boolean13 = generator10.getAttemptLoad();
        boolean boolean14 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator23.getStrategy();
        generator16.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        java.lang.ClassLoader classLoader29 = generator26.getClassLoader();
        generator16.setClassLoader(classLoader29);
        generator10.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader32 = generator10.getClassLoader();
        java.lang.ClassLoader classLoader33 = generator10.getClassLoader();
        generator10.setUseCache(false);
        java.lang.ClassLoader classLoader36 = generator10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator10.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
    }

    @Test
    public void test6927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6927");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        generator43.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        generator52.setUseCache(true);
        generator52.setAttemptLoad(true);
        generator52.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator52.getStrategy();
        java.lang.ClassLoader classLoader66 = generator52.getClassLoader();
        generator43.setClassLoader(classLoader66);
        generator0.setClassLoader(classLoader66);
        java.lang.Class<?> wildcardClass69 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test6928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6928");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator13.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader19 = generator16.getClassLoader();
        generator6.setClassLoader(classLoader19);
        generator0.setClassLoader(classLoader19);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator22.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        generator22.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        boolean boolean55 = strComparator50.equals((java.lang.Object) strComparator54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { '4', strComparator47, strComparator50, 0.0d };
        generator42.setArrays(objArray57);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator59.setUseCache(true);
        boolean boolean62 = generator59.getAttemptLoad();
        boolean boolean63 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator59.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = generator59.getClassLoader();
        generator42.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = generator42.getClassLoader();
        generator0.setClassLoader(classLoader68);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader72 = generator0.getClassLoader();
        boolean boolean73 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test6929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6929");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        boolean boolean23 = generator15.getUseCache();
        boolean boolean24 = generator15.getUseCache();
        generator15.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        java.lang.ClassLoader classLoader30 = generator27.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader49 = null;
        generator48.setClassLoader(classLoader49);
        java.lang.ClassLoader classLoader51 = null;
        generator48.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy53);
        generator27.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator27.getStrategy();
        generator15.setStrategy(generatorStrategy57);
        generator8.setStrategy(generatorStrategy57);
        generator0.setStrategy(generatorStrategy57);
        boolean boolean61 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test6930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6930");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator0.getStrategy();
        java.lang.Object[] objArray50 = null;
        generator0.setArrays(objArray50);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator52.getNamingPolicy();
        boolean boolean61 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator52.setStrategy(generatorStrategy62);
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator64.setStrategy(generatorStrategy70);
        boolean boolean72 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator64.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator64.getClassLoader();
        generator52.setClassLoader(classLoader74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator52.getStrategy();
        generator0.setStrategy(generatorStrategy76);
        java.lang.Class<?> wildcardClass78 = generatorStrategy76.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test6931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6931");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator2 = strComparator0.thenComparing(strComparator1);
        java.util.Comparator<java.lang.String> strComparator3 = strComparator0.reversed();
        java.util.Comparator<java.lang.String> strComparator4 = strComparator3.reversed();
        java.util.Comparator<java.lang.String> strComparator5 = strComparator3.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        java.lang.ClassLoader classLoader9 = generator6.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        generator6.setStrategy(generatorStrategy13);
        boolean boolean15 = strComparator5.equals((java.lang.Object) generator6);
        java.lang.ClassLoader classLoader16 = generator6.getClassLoader();
        boolean boolean17 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator6.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator19.getStrategy();
        java.lang.ClassLoader classLoader21 = generator19.getClassLoader();
        generator19.setUseCache(false);
        boolean boolean24 = generator19.getUseCache();
        java.lang.ClassLoader classLoader25 = generator19.getClassLoader();
        java.lang.ClassLoader classLoader26 = generator19.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator19.getNamingPolicy();
        boolean boolean28 = generator19.getUseCache();
        generator19.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator19.getStrategy();
        generator6.setStrategy(generatorStrategy31);
        org.mockito.asm.ClassVisitor classVisitor33 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator6.generateClass(classVisitor33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(strComparator3);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test6932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6932");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator15.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator25.getStrategy();
        generator25.setAttemptLoad(false);
        generator25.setUseCache(false);
        generator25.setUseCache(false);
        generator25.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.lang.ClassLoader classLoader39 = null;
        generator36.setClassLoader(classLoader39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator55 = strComparator53.thenComparing(strComparator54);
        boolean boolean56 = strComparator51.equals((java.lang.Object) strComparator55);
        java.lang.Object[] objArray58 = new java.lang.Object[] { '4', strComparator48, strComparator51, 0.0d };
        generator43.setArrays(objArray58);
        generator35.setArrays(objArray58);
        generator25.setArrays(objArray58);
        generator15.setArrays(objArray58);
        generator0.setArrays(objArray58);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6933");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        generator5.setUseCache(true);
        generator5.setAttemptLoad(true);
        generator5.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator5.getStrategy();
        java.lang.ClassLoader classLoader19 = generator5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        boolean boolean24 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        boolean boolean26 = generator0.getAttemptLoad();
        boolean boolean27 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test6934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6934");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator35.getStrategy();
        generator0.setStrategy(generatorStrategy38);
        boolean boolean40 = generator0.getUseCache();
        java.lang.ClassLoader classLoader41 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(classLoader41);
    }

    @Test
    public void test6935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6935");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator8.getStrategy();
        java.lang.ClassLoader classLoader10 = generator8.getClassLoader();
        generator8.setUseCache(false);
        boolean boolean13 = generator8.getUseCache();
        java.lang.ClassLoader classLoader14 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test6936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6936");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        java.lang.ClassLoader classLoader36 = generator33.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        generator33.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator33.getNamingPolicy();
        generator33.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator33.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        boolean boolean52 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator46.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        generator54.setClassLoader(classLoader57);
        generator54.setAttemptLoad(true);
        boolean boolean61 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator54.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = generator54.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader68 = null;
        generator67.setClassLoader(classLoader68);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        java.util.Comparator<java.lang.String> strComparator74 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = strComparator74.thenComparing(strComparator75);
        java.util.Comparator<java.lang.String> strComparator77 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = strComparator77.thenComparing(strComparator78);
        boolean boolean80 = strComparator75.equals((java.lang.Object) strComparator79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { '4', strComparator72, strComparator75, 0.0d };
        generator67.setArrays(objArray82);
        generator64.setArrays(objArray82);
        generator54.setArrays(objArray82);
        generator46.setArrays(objArray82);
        generator33.setArrays(objArray82);
        generator0.setArrays(objArray82);
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6937");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        boolean boolean20 = strComparator15.equals((java.lang.Object) strComparator19);
        java.lang.Object[] objArray22 = new java.lang.Object[] { '4', strComparator12, strComparator15, 0.0d };
        generator7.setArrays(objArray22);
        generator4.setArrays(objArray22);
        generator0.setArrays(objArray22);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator27.setUseCache(true);
        boolean boolean30 = generator27.getAttemptLoad();
        boolean boolean31 = generator27.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        boolean boolean35 = generator32.getAttemptLoad();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator32.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator32.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator32.getStrategy();
        generator27.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = generator27.getClassLoader();
        java.lang.ClassLoader classLoader42 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean47 = generator0.getAttemptLoad();
        boolean boolean48 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter49 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test6938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6938");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        boolean boolean18 = generator15.getAttemptLoad();
        boolean boolean19 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator15.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy26);
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test6939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6939");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy17);
        generator4.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        boolean boolean26 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test6940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6940");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader12 = null;
        generator8.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator8.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        boolean boolean28 = strComparator23.equals((java.lang.Object) strComparator27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { '4', strComparator20, strComparator23, 0.0d };
        generator15.setArrays(objArray30);
        generator8.setArrays(objArray30);
        generator0.setArrays(objArray30);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        boolean boolean47 = strComparator42.equals((java.lang.Object) strComparator46);
        java.lang.Object[] objArray49 = new java.lang.Object[] { '4', strComparator39, strComparator42, 0.0d };
        generator34.setArrays(objArray49);
        java.lang.ClassLoader classLoader51 = null;
        generator34.setClassLoader(classLoader51);
        boolean boolean53 = generator34.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator54.setUseCache(true);
        boolean boolean57 = generator54.getAttemptLoad();
        boolean boolean58 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator54.getStrategy();
        generator34.setStrategy(generatorStrategy59);
        boolean boolean61 = generator34.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator34.getNamingPolicy();
        boolean boolean63 = generator34.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator64 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        java.lang.ClassLoader classLoader67 = generator64.getClassLoader();
        java.lang.ClassLoader classLoader68 = generator64.getClassLoader();
        generator34.setClassLoader(classLoader68);
        generator0.setClassLoader(classLoader68);
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test6941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6941");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy40);
        generator27.setAttemptLoad(false);
        generator27.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator46.getStrategy();
        generator27.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator27.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.util.ParallelSorter.Generator generator54 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        boolean boolean56 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator54.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader62 = null;
        generator59.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.lang.ClassLoader classLoader69 = null;
        generator66.setClassLoader(classLoader69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator66.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy71);
        java.lang.ClassLoader classLoader73 = generator58.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator58.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator76 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator76.setUseCache(true);
        boolean boolean79 = generator76.getAttemptLoad();
        boolean boolean80 = generator76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator76.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator76.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator76.getStrategy();
        generator58.setStrategy(generatorStrategy83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator58.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy85);
        java.lang.ClassLoader classLoader87 = generator54.getClassLoader();
        generator0.setClassLoader(classLoader87);
        generator0.setUseCache(false);
        boolean boolean91 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test6942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6942");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader44 = generator29.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator29.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator47.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator47.getStrategy();
        generator29.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        generator0.setAttemptLoad(false);
        boolean boolean59 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass60 = generator0.getClass();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test6943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6943");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy17);
        generator4.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        generator0.setAttemptLoad(false);
        boolean boolean25 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        boolean boolean29 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test6944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6944");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        boolean boolean34 = generator8.getUseCache();
        java.lang.ClassLoader classLoader35 = generator8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator8.getStrategy();
        java.lang.ClassLoader classLoader37 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader37);
        boolean boolean39 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test6945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6945");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        boolean boolean37 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator39.setUseCache(true);
        boolean boolean42 = generator39.getAttemptLoad();
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        generator39.setUseCache(true);
        generator39.setAttemptLoad(true);
        generator39.setUseCache(false);
        boolean boolean52 = generator39.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = generator53.getClassLoader();
        java.lang.ClassLoader classLoader56 = generator53.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator58 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator58.setUseCache(true);
        boolean boolean61 = generator58.getAttemptLoad();
        boolean boolean62 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator58.getStrategy();
        generator57.setStrategy(generatorStrategy63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        generator57.setStrategy(generatorStrategy70);
        generator53.setStrategy(generatorStrategy70);
        org.mockito.cglib.util.ParallelSorter.Generator generator73 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator73.getStrategy();
        generator53.setStrategy(generatorStrategy74);
        generator39.setStrategy(generatorStrategy74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy77);
        boolean boolean79 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        boolean boolean82 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter83 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test6946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6946");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        java.lang.ClassLoader classLoader10 = null;
        generator7.setClassLoader(classLoader10);
        generator7.setAttemptLoad(true);
        boolean boolean14 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader16 = generator7.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = strComparator24.thenComparing(strComparator25);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        boolean boolean33 = strComparator28.equals((java.lang.Object) strComparator32);
        java.lang.Object[] objArray35 = new java.lang.Object[] { '4', strComparator25, strComparator28, 0.0d };
        generator20.setArrays(objArray35);
        generator17.setArrays(objArray35);
        generator7.setArrays(objArray35);
        generator0.setArrays(objArray35);
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6947");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        boolean boolean23 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test6948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6948");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        boolean boolean19 = strComparator14.equals((java.lang.Object) strComparator18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { '4', strComparator11, strComparator14, 0.0d };
        generator6.setArrays(objArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator6.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator32.setStrategy(generatorStrategy38);
        generator6.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy47);
        generator6.setNamingPolicy(namingPolicy47);
        generator0.setNamingPolicy(namingPolicy47);
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.reverseOrder();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = strComparator51.equals((java.lang.Object) generator52);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = strComparator56.reversed();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator59.reversed();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.reversed();
        java.util.Comparator<java.lang.String> strComparator62 = strComparator61.reversed();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.nullsFirst(strComparator61);
        java.util.Comparator<java.lang.String> strComparator64 = strComparator51.thenComparing(strComparator63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator65.setUseCache(true);
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator65.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator65.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator65.getStrategy();
        boolean boolean73 = strComparator51.equals((java.lang.Object) generatorStrategy72);
        generator0.setStrategy(generatorStrategy72);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader77 = generator0.getClassLoader();
        boolean boolean78 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator79 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator79.setUseCache(true);
        java.lang.ClassLoader classLoader82 = generator79.getClassLoader();
        generator79.setUseCache(false);
        boolean boolean85 = generator79.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = generator79.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator79.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter89 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test6949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6949");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator1.setUseCache(true);
        boolean boolean4 = generator1.getAttemptLoad();
        boolean boolean5 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator1.getStrategy();
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy13);
        generator0.setAttemptLoad(false);
        boolean boolean17 = generator0.getUseCache();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader31 = null;
        generator28.setClassLoader(classLoader31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy33);
        boolean boolean35 = generator27.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = strComparator40.thenComparing(strComparator41);
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = strComparator43.thenComparing(strComparator44);
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = strComparator46.thenComparing(strComparator47);
        boolean boolean49 = strComparator44.equals((java.lang.Object) strComparator48);
        java.lang.Object[] objArray51 = new java.lang.Object[] { '4', strComparator41, strComparator44, 0.0d };
        generator36.setArrays(objArray51);
        generator27.setArrays(objArray51);
        generator21.setArrays(objArray51);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = generator55.getClassLoader();
        generator21.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator21.getStrategy();
        generator0.setStrategy(generatorStrategy60);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator63 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator63.setUseCache(true);
        boolean boolean66 = generator63.getAttemptLoad();
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator62.setStrategy(generatorStrategy68);
        org.mockito.cglib.util.ParallelSorter.Generator generator70 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator70.setUseCache(true);
        boolean boolean73 = generator70.getAttemptLoad();
        boolean boolean74 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator70.getStrategy();
        generator62.setStrategy(generatorStrategy75);
        org.mockito.cglib.util.ParallelSorter.Generator generator77 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader78 = null;
        generator77.setClassLoader(classLoader78);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        java.util.Comparator<java.lang.String> strComparator87 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = strComparator87.thenComparing(strComparator88);
        boolean boolean90 = strComparator85.equals((java.lang.Object) strComparator89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { '4', strComparator82, strComparator85, 0.0d };
        generator77.setArrays(objArray92);
        generator62.setArrays(objArray92);
        generator0.setArrays(objArray92);
        boolean boolean96 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test6950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6950");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy38);
        generator0.setNamingPolicy(namingPolicy38);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        boolean boolean46 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test6951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6951");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        boolean boolean20 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        java.lang.ClassLoader classLoader22 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean25 = generator17.getUseCache();
        generator17.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        boolean boolean48 = strComparator43.equals((java.lang.Object) strComparator47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { '4', strComparator40, strComparator43, 0.0d };
        generator35.setArrays(objArray50);
        generator28.setArrays(objArray50);
        generator17.setArrays(objArray50);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = strComparator56.reversed();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator59.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        boolean boolean69 = strComparator59.equals((java.lang.Object) generator61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator61.getStrategy();
        java.lang.ClassLoader classLoader71 = generator61.getClassLoader();
        generator0.setClassLoader(classLoader71);
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test6952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6952");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator7.setUseCache(true);
        boolean boolean10 = generator7.getAttemptLoad();
        boolean boolean11 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader15);
    }

    @Test
    public void test6953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6953");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        boolean boolean20 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        java.lang.ClassLoader classLoader22 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean25 = generator17.getUseCache();
        generator17.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator41 = strComparator39.thenComparing(strComparator40);
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator44 = strComparator42.thenComparing(strComparator43);
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator47 = strComparator45.thenComparing(strComparator46);
        boolean boolean48 = strComparator43.equals((java.lang.Object) strComparator47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { '4', strComparator40, strComparator43, 0.0d };
        generator35.setArrays(objArray50);
        generator28.setArrays(objArray50);
        generator17.setArrays(objArray50);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator58 = strComparator56.thenComparing(strComparator57);
        java.util.Comparator<java.lang.String> strComparator59 = strComparator56.reversed();
        java.util.Comparator<java.lang.String> strComparator60 = strComparator59.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy67);
        boolean boolean69 = strComparator59.equals((java.lang.Object) generator61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator61.getStrategy();
        java.lang.ClassLoader classLoader71 = generator61.getClassLoader();
        generator0.setClassLoader(classLoader71);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertNotNull(strComparator58);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test6954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6954");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        boolean boolean11 = generator8.getAttemptLoad();
        boolean boolean12 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator8.getStrategy();
        generator7.setStrategy(generatorStrategy13);
        boolean boolean15 = generator7.getAttemptLoad();
        generator7.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator33 = strComparator31.thenComparing(strComparator32);
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = strComparator34.thenComparing(strComparator35);
        java.util.Comparator<java.lang.String> strComparator37 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = strComparator37.thenComparing(strComparator38);
        boolean boolean40 = strComparator35.equals((java.lang.Object) strComparator39);
        java.lang.Object[] objArray42 = new java.lang.Object[] { '4', strComparator32, strComparator35, 0.0d };
        generator27.setArrays(objArray42);
        generator18.setArrays(objArray42);
        boolean boolean45 = generator18.getAttemptLoad();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator18 };
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        boolean boolean49 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        boolean boolean51 = generator0.getAttemptLoad();
        boolean boolean52 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test6955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6955");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(true);
        boolean boolean16 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test6956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6956");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader12 = null;
        generator11.setClassLoader(classLoader12);
        java.lang.ClassLoader classLoader14 = null;
        generator11.setClassLoader(classLoader14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.util.Comparator<java.lang.String> strComparator22 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator22.thenComparing(strComparator23);
        java.util.Comparator<java.lang.String> strComparator25 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator26 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator27 = strComparator25.thenComparing(strComparator26);
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator30 = strComparator28.thenComparing(strComparator29);
        boolean boolean31 = strComparator26.equals((java.lang.Object) strComparator30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { '4', strComparator23, strComparator26, 0.0d };
        generator18.setArrays(objArray33);
        generator10.setArrays(objArray33);
        generator0.setArrays(objArray33);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertNotNull(strComparator26);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6957");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        generator36.setUseCache(true);
        generator36.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
    }

    @Test
    public void test6958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6958");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader11);
    }

    @Test
    public void test6959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6959");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test6960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6960");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator15.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader18);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator25.setStrategy(generatorStrategy31);
        boolean boolean33 = generator25.getAttemptLoad();
        generator25.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader40 = null;
        generator37.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy42);
        boolean boolean44 = generator36.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        generator36.setArrays(objArray60);
        boolean boolean63 = generator36.getAttemptLoad();
        java.lang.Object[] objArray64 = new java.lang.Object[] { generator36 };
        generator25.setArrays(objArray64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator25.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator67 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator67.setUseCache(true);
        boolean boolean70 = generator67.getAttemptLoad();
        boolean boolean71 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter79 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test6961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6961");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator10.getNamingPolicy();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader22 = generator10.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator23.setUseCache(true);
        boolean boolean26 = generator23.getAttemptLoad();
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        generator23.setUseCache(true);
        generator23.setAttemptLoad(true);
        generator23.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator23.getStrategy();
        java.lang.ClassLoader classLoader37 = generator23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator23.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        boolean boolean45 = generator42.getAttemptLoad();
        boolean boolean46 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator42.getStrategy();
        generator41.setStrategy(generatorStrategy47);
        boolean boolean49 = generator41.getAttemptLoad();
        generator41.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        boolean boolean60 = generator52.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        java.util.Comparator<java.lang.String> strComparator68 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = strComparator68.thenComparing(strComparator69);
        java.util.Comparator<java.lang.String> strComparator71 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = strComparator71.thenComparing(strComparator72);
        boolean boolean74 = strComparator69.equals((java.lang.Object) strComparator73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { '4', strComparator66, strComparator69, 0.0d };
        generator61.setArrays(objArray76);
        generator52.setArrays(objArray76);
        boolean boolean79 = generator52.getAttemptLoad();
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator52 };
        generator41.setArrays(objArray80);
        generator23.setArrays(objArray80);
        generator10.setArrays(objArray80);
        generator0.setArrays(objArray80);
        boolean boolean85 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(namingPolicy86);
    }

    @Test
    public void test6962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6962");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        java.lang.ClassLoader classLoader13 = generator10.getClassLoader();
        generator0.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator31.getClassLoader();
        generator16.setClassLoader(classLoader34);
        generator16.setAttemptLoad(false);
        generator16.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy40);
        boolean boolean42 = generator0.getUseCache();
        boolean boolean43 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter44 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test6963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6963");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        generator18.setUseCache(true);
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        generator31.setUseCache(true);
        generator31.setUseCache(false);
        boolean boolean42 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator31.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test6964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6964");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean15 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test6965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6965");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor33 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test6966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6966");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator4.getStrategy();
        generator3.setStrategy(generatorStrategy9);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator11.setUseCache(true);
        boolean boolean14 = generator11.getAttemptLoad();
        boolean boolean15 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator11.getStrategy();
        generator3.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        generator20.setUseCache(true);
        generator20.setAttemptLoad(true);
        generator20.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator20.getStrategy();
        java.lang.ClassLoader classLoader34 = generator20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator40.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator40.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator40.getNamingPolicy();
        boolean boolean51 = generator40.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator52.setUseCache(true);
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator57 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator57.setUseCache(true);
        boolean boolean60 = generator57.getAttemptLoad();
        boolean boolean61 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator57.getStrategy();
        generator52.setStrategy(generatorStrategy64);
        java.lang.ClassLoader classLoader66 = generator52.getClassLoader();
        generator40.setClassLoader(classLoader66);
        generator0.setClassLoader(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test6967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6967");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.lang.ClassLoader classLoader11 = null;
        generator8.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        boolean boolean20 = generator17.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        generator17.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        boolean boolean29 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass30 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test6968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6968");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = null;
        generator9.setClassLoader(classLoader26);
        boolean boolean28 = generator9.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator29.setUseCache(true);
        boolean boolean32 = generator29.getAttemptLoad();
        boolean boolean33 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator29.getStrategy();
        generator9.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test6969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6969");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        boolean boolean26 = strComparator21.equals((java.lang.Object) strComparator25);
        java.lang.Object[] objArray28 = new java.lang.Object[] { '4', strComparator18, strComparator21, 0.0d };
        generator13.setArrays(objArray28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy35);
        java.lang.ClassLoader classLoader37 = generator13.getClassLoader();
        generator13.setUseCache(false);
        generator13.setUseCache(false);
        boolean boolean42 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator13.getNamingPolicy();
        generator13.setAttemptLoad(false);
        java.lang.ClassLoader classLoader46 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
    }

    @Test
    public void test6970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6970");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = strComparator16.thenComparing(strComparator17);
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = strComparator19.thenComparing(strComparator20);
        boolean boolean22 = strComparator17.equals((java.lang.Object) strComparator21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { '4', strComparator14, strComparator17, 0.0d };
        generator9.setArrays(objArray24);
        java.lang.ClassLoader classLoader26 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test6971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6971");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        boolean boolean9 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6972");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.util.ParallelSorter.Generator generator3 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader4 = null;
        generator3.setClassLoader(classLoader4);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = strComparator13.thenComparing(strComparator14);
        boolean boolean16 = strComparator11.equals((java.lang.Object) strComparator15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { '4', strComparator8, strComparator11, 0.0d };
        generator3.setArrays(objArray18);
        generator0.setArrays(objArray18);
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator31.getStrategy();
        generator25.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = generator25.getClassLoader();
        generator25.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator47 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator47.setUseCache(true);
        boolean boolean50 = generator47.getAttemptLoad();
        boolean boolean51 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator47.getStrategy();
        generator41.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader54 = generator41.getClassLoader();
        generator25.setClassLoader(classLoader54);
        boolean boolean56 = generator25.getAttemptLoad();
        generator25.setUseCache(true);
        generator25.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator61 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator61.setUseCache(true);
        boolean boolean64 = generator61.getAttemptLoad();
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        generator61.setUseCache(true);
        generator61.setUseCache(false);
        boolean boolean72 = generator61.getUseCache();
        java.lang.ClassLoader classLoader73 = generator61.getClassLoader();
        boolean boolean74 = generator61.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator75 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader76 = null;
        generator75.setClassLoader(classLoader76);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader79 = null;
        generator78.setClassLoader(classLoader79);
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator84 = strComparator82.thenComparing(strComparator83);
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator87 = strComparator85.thenComparing(strComparator86);
        java.util.Comparator<java.lang.String> strComparator88 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator89 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator90 = strComparator88.thenComparing(strComparator89);
        boolean boolean91 = strComparator86.equals((java.lang.Object) strComparator90);
        java.lang.Object[] objArray93 = new java.lang.Object[] { '4', strComparator83, strComparator86, 0.0d };
        generator78.setArrays(objArray93);
        generator75.setArrays(objArray93);
        generator61.setArrays(objArray93);
        generator25.setArrays(objArray93);
        generator0.setArrays(objArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter99 = org.mockito.cglib.util.ParallelSorter.create(objArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(strComparator88);
        org.junit.Assert.assertNotNull(strComparator89);
        org.junit.Assert.assertNotNull(strComparator90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6973");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        java.lang.ClassLoader classLoader17 = null;
        generator14.setClassLoader(classLoader17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        generator13.setUseCache(false);
        boolean boolean24 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator32.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        boolean boolean36 = generator32.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator37.setUseCache(true);
        boolean boolean40 = generator37.getAttemptLoad();
        boolean boolean41 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator37.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator43.setUseCache(true);
        boolean boolean46 = generator43.getAttemptLoad();
        boolean boolean47 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator43.getStrategy();
        generator37.setStrategy(generatorStrategy48);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator50.getNamingPolicy();
        generator50.setUseCache(false);
        boolean boolean61 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator50.getNamingPolicy();
        generator50.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator50.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy65);
        generator32.setNamingPolicy(namingPolicy65);
        boolean boolean68 = generator32.getAttemptLoad();
        java.lang.ClassLoader classLoader69 = generator32.getClassLoader();
        generator0.setClassLoader(classLoader69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test6974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6974");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass11 = generatorStrategy10.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test6975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6975");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        boolean boolean19 = generator0.getAttemptLoad();
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = strComparator20.reversed();
        java.util.Comparator<java.lang.String> strComparator24 = strComparator23.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = null;
        generator26.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy31);
        boolean boolean33 = strComparator23.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator36.getStrategy();
        java.lang.ClassLoader classLoader38 = generator36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator36.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.util.ParallelSorter.Generator generator43 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader46 = null;
        generator43.setClassLoader(classLoader46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator50.getClassLoader();
        generator50.setUseCache(false);
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator50.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        boolean boolean61 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test6976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6976");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator26.setUseCache(true);
        boolean boolean29 = generator26.getAttemptLoad();
        boolean boolean30 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator26.getStrategy();
        generator25.setStrategy(generatorStrategy31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        generator25.setStrategy(generatorStrategy38);
        generator22.setStrategy(generatorStrategy38);
        generator14.setStrategy(generatorStrategy38);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        java.util.Comparator<java.lang.String> strComparator49 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator49.thenComparing(strComparator50);
        java.util.Comparator<java.lang.String> strComparator52 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator53 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator54 = strComparator52.thenComparing(strComparator53);
        java.util.Comparator<java.lang.String> strComparator55 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator56 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator57 = strComparator55.thenComparing(strComparator56);
        boolean boolean58 = strComparator53.equals((java.lang.Object) strComparator57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { '4', strComparator50, strComparator53, 0.0d };
        generator45.setArrays(objArray60);
        generator42.setArrays(objArray60);
        generator14.setArrays(objArray60);
        generator13.setArrays(objArray60);
        generator0.setArrays(objArray60);
        boolean boolean66 = generator0.getUseCache();
        boolean boolean67 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertNotNull(strComparator53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(strComparator55);
        org.junit.Assert.assertNotNull(strComparator56);
        org.junit.Assert.assertNotNull(strComparator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test6977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6977");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator5.setUseCache(true);
        boolean boolean8 = generator5.getAttemptLoad();
        boolean boolean9 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator5.getStrategy();
        generator4.setStrategy(generatorStrategy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator4.setStrategy(generatorStrategy17);
        generator0.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator32 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = null;
        generator32.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = generator24.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        generator40.setUseCache(true);
        generator40.setUseCache(false);
        boolean boolean51 = generator40.getUseCache();
        java.lang.ClassLoader classLoader52 = generator40.getClassLoader();
        generator24.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator24.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        generator56.setAttemptLoad(true);
        boolean boolean63 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator56.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator66 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader67 = null;
        generator66.setClassLoader(classLoader67);
        java.lang.ClassLoader classLoader69 = null;
        generator66.setClassLoader(classLoader69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator66.getNamingPolicy();
        generator65.setNamingPolicy(namingPolicy71);
        boolean boolean73 = generator65.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator74 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        java.util.Comparator<java.lang.String> strComparator81 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator82 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator83 = strComparator81.thenComparing(strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator85 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator86 = strComparator84.thenComparing(strComparator85);
        boolean boolean87 = strComparator82.equals((java.lang.Object) strComparator86);
        java.lang.Object[] objArray89 = new java.lang.Object[] { '4', strComparator79, strComparator82, 0.0d };
        generator74.setArrays(objArray89);
        generator65.setArrays(objArray89);
        generator56.setArrays(objArray89);
        generator24.setArrays(objArray89);
        generator0.setArrays(objArray89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator83);
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test6978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6978");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy21);
        generator8.setAttemptLoad(false);
        generator8.setAttemptLoad(false);
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator29.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator36 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator36.setUseCache(true);
        boolean boolean39 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        generator36.setClassLoader(classLoader40);
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator36.getNamingPolicy();
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator36.getNamingPolicy();
        java.lang.ClassLoader classLoader48 = generator36.getClassLoader();
        generator0.setClassLoader(classLoader48);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter53 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test6979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6979");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator1 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator14 = strComparator12.thenComparing(strComparator13);
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator17 = strComparator15.thenComparing(strComparator16);
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator20 = strComparator18.thenComparing(strComparator19);
        boolean boolean21 = strComparator16.equals((java.lang.Object) strComparator20);
        java.lang.Object[] objArray23 = new java.lang.Object[] { '4', strComparator13, strComparator16, 0.0d };
        generator8.setArrays(objArray23);
        java.lang.ClassLoader classLoader25 = null;
        generator8.setClassLoader(classLoader25);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator8.setStrategy(generatorStrategy40);
        generator0.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        generator0.setUseCache(true);
        boolean boolean48 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test6980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6980");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        boolean boolean16 = generator0.getAttemptLoad();
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        java.lang.ClassLoader classLoader33 = null;
        generator30.setClassLoader(classLoader33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy35);
        generator22.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator22.getStrategy();
        generator18.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test6981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6981");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy14);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        generator8.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader23);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        boolean boolean29 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test6982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6982");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        boolean boolean10 = generator0.getUseCache();
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test6983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6983");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        boolean boolean13 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator9.getStrategy();
        generator8.setStrategy(generatorStrategy14);
        boolean boolean16 = generator8.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader26 = null;
        generator25.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy30);
        generator8.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        java.lang.ClassLoader classLoader38 = null;
        generator35.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator42.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator45 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator46 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator46.setUseCache(true);
        boolean boolean49 = generator46.getAttemptLoad();
        boolean boolean50 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator46.getStrategy();
        generator45.setStrategy(generatorStrategy51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        generator45.setStrategy(generatorStrategy58);
        generator42.setStrategy(generatorStrategy58);
        generator34.setStrategy(generatorStrategy58);
        org.mockito.cglib.util.ParallelSorter.Generator generator62 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        org.mockito.cglib.util.ParallelSorter.Generator generator65 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        boolean boolean78 = strComparator73.equals((java.lang.Object) strComparator77);
        java.lang.Object[] objArray80 = new java.lang.Object[] { '4', strComparator70, strComparator73, 0.0d };
        generator65.setArrays(objArray80);
        generator62.setArrays(objArray80);
        generator34.setArrays(objArray80);
        generator33.setArrays(objArray80);
        generator8.setArrays(objArray80);
        generator0.setArrays(objArray80);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        boolean boolean88 = generator0.getUseCache();
        boolean boolean89 = generator0.getAttemptLoad();
        boolean boolean90 = generator0.getAttemptLoad();
        boolean boolean91 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test6984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6984");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test6985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6985");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        java.lang.ClassLoader classLoader2 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator10.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        generator13.setStrategy(generatorStrategy19);
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator13.setStrategy(generatorStrategy26);
        generator10.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator29 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = generator29.getClassLoader();
        generator10.setClassLoader(classLoader31);
        org.mockito.cglib.util.ParallelSorter.Generator generator33 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator33.setUseCache(true);
        boolean boolean36 = generator33.getAttemptLoad();
        boolean boolean37 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator33.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator33.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator41.setUseCache(true);
        boolean boolean44 = generator41.getAttemptLoad();
        boolean boolean45 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator41.getStrategy();
        generator40.setStrategy(generatorStrategy46);
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator48.setUseCache(true);
        boolean boolean51 = generator48.getAttemptLoad();
        boolean boolean52 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator48.getStrategy();
        generator40.setStrategy(generatorStrategy53);
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.util.Comparator<java.lang.String> strComparator59 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator60 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator61 = strComparator59.thenComparing(strComparator60);
        java.util.Comparator<java.lang.String> strComparator62 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = strComparator62.thenComparing(strComparator63);
        java.util.Comparator<java.lang.String> strComparator65 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = strComparator65.thenComparing(strComparator66);
        boolean boolean68 = strComparator63.equals((java.lang.Object) strComparator67);
        java.lang.Object[] objArray70 = new java.lang.Object[] { '4', strComparator60, strComparator63, 0.0d };
        generator55.setArrays(objArray70);
        generator40.setArrays(objArray70);
        generator33.setArrays(objArray70);
        generator10.setArrays(objArray70);
        generator0.setArrays(objArray70);
        boolean boolean76 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        boolean boolean78 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(strComparator59);
        org.junit.Assert.assertNotNull(strComparator60);
        org.junit.Assert.assertNotNull(strComparator61);
        org.junit.Assert.assertNotNull(strComparator62);
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test6986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6986");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator15.getStrategy();
        java.lang.ClassLoader classLoader17 = generator15.getClassLoader();
        generator15.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator20.setUseCache(true);
        boolean boolean23 = generator20.getAttemptLoad();
        boolean boolean24 = generator20.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator25 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator25.setUseCache(true);
        boolean boolean28 = generator25.getAttemptLoad();
        boolean boolean29 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator25.getStrategy();
        generator20.setStrategy(generatorStrategy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator34.setUseCache(true);
        boolean boolean37 = generator34.getAttemptLoad();
        boolean boolean38 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator34.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator40.setUseCache(true);
        boolean boolean43 = generator40.getAttemptLoad();
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator34.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = generator34.getClassLoader();
        generator34.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator56 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator56.setUseCache(true);
        boolean boolean59 = generator56.getAttemptLoad();
        boolean boolean60 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator56.getStrategy();
        generator50.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = generator50.getClassLoader();
        generator34.setClassLoader(classLoader63);
        generator20.setClassLoader(classLoader63);
        generator15.setClassLoader(classLoader63);
        generator0.setClassLoader(classLoader63);
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator68.setUseCache(true);
        boolean boolean71 = generator68.getAttemptLoad();
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        generator68.setUseCache(true);
        generator68.setUseCache(false);
        boolean boolean79 = generator68.getUseCache();
        java.lang.ClassLoader classLoader80 = generator68.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator68.getStrategy();
        generator0.setStrategy(generatorStrategy81);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean88 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test6987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6987");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator10 = strComparator8.thenComparing(strComparator9);
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator13 = strComparator11.thenComparing(strComparator12);
        java.util.Comparator<java.lang.String> strComparator14 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator15 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator16 = strComparator14.thenComparing(strComparator15);
        boolean boolean17 = strComparator12.equals((java.lang.Object) strComparator16);
        java.lang.Object[] objArray19 = new java.lang.Object[] { '4', strComparator9, strComparator12, 0.0d };
        generator4.setArrays(objArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator4.setClassLoader(classLoader21);
        boolean boolean23 = generator4.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator24 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator24.setUseCache(true);
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        generator4.setStrategy(generatorStrategy29);
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        boolean boolean35 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(strComparator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test6988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6988");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator18 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator18.setUseCache(true);
        boolean boolean21 = generator18.getAttemptLoad();
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        generator18.setUseCache(true);
        generator18.setUseCache(false);
        boolean boolean29 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator18.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator31.setUseCache(true);
        boolean boolean34 = generator31.getAttemptLoad();
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        generator31.setUseCache(true);
        generator31.setUseCache(false);
        boolean boolean42 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator31.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = strComparator47.reversed();
        java.util.Comparator<java.lang.String> strComparator51 = strComparator50.reversed();
        org.mockito.cglib.util.ParallelSorter.Generator generator52 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader54 = null;
        generator53.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy58);
        boolean boolean60 = strComparator50.equals((java.lang.Object) generator52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator52.getStrategy();
        generator0.setStrategy(generatorStrategy61);
        boolean boolean63 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test6989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6989");
        java.util.Comparator<java.lang.String> strComparator0 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator1 = java.util.Comparator.nullsFirst(strComparator0);
        int int4 = strComparator1.compare("hi!", "hi!");
        java.util.Comparator<java.lang.String> strComparator5 = strComparator1.reversed();
        java.lang.Object obj6 = null;
        boolean boolean7 = strComparator5.equals(obj6);
        org.junit.Assert.assertNotNull(strComparator0);
        org.junit.Assert.assertNotNull(strComparator1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test6990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6990");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = generator9.getClassLoader();
        generator9.setUseCache(false);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator9.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator17.getStrategy();
        java.lang.ClassLoader classLoader19 = generator17.getClassLoader();
        generator17.setUseCache(false);
        boolean boolean22 = generator17.getUseCache();
        java.lang.ClassLoader classLoader23 = generator17.getClassLoader();
        generator9.setClassLoader(classLoader23);
        generator0.setClassLoader(classLoader23);
        org.mockito.cglib.util.ParallelSorter.Generator generator26 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        generator27.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = null;
        generator34.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = generator26.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator26.getStrategy();
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader46 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(classLoader46);
    }

    @Test
    public void test6991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6991");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test6992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6992");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator4.setUseCache(true);
        boolean boolean7 = generator4.getAttemptLoad();
        boolean boolean8 = generator4.getUseCache();
        generator4.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator4.getNamingPolicy();
        boolean boolean12 = generator4.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator13 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.util.Comparator<java.lang.String> strComparator17 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator18 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator19 = strComparator17.thenComparing(strComparator18);
        java.util.Comparator<java.lang.String> strComparator20 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator21 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator22 = strComparator20.thenComparing(strComparator21);
        java.util.Comparator<java.lang.String> strComparator23 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator24 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator25 = strComparator23.thenComparing(strComparator24);
        boolean boolean26 = strComparator21.equals((java.lang.Object) strComparator25);
        java.lang.Object[] objArray28 = new java.lang.Object[] { '4', strComparator18, strComparator21, 0.0d };
        generator13.setArrays(objArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator13.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy31);
        generator0.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader34 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator0.setStrategy(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strComparator17);
        org.junit.Assert.assertNotNull(strComparator18);
        org.junit.Assert.assertNotNull(strComparator19);
        org.junit.Assert.assertNotNull(strComparator20);
        org.junit.Assert.assertNotNull(strComparator21);
        org.junit.Assert.assertNotNull(strComparator22);
        org.junit.Assert.assertNotNull(strComparator23);
        org.junit.Assert.assertNotNull(strComparator24);
        org.junit.Assert.assertNotNull(strComparator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy35);
    }

    @Test
    public void test6993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6993");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator9.setUseCache(true);
        boolean boolean12 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.util.ParallelSorter.Generator generator15 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.util.ParallelSorter.Generator generator23 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        java.util.Comparator<java.lang.String> strComparator27 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator28 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator29 = strComparator27.thenComparing(strComparator28);
        java.util.Comparator<java.lang.String> strComparator30 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator31 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator32 = strComparator30.thenComparing(strComparator31);
        java.util.Comparator<java.lang.String> strComparator33 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator34 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator35 = strComparator33.thenComparing(strComparator34);
        boolean boolean36 = strComparator31.equals((java.lang.Object) strComparator35);
        java.lang.Object[] objArray38 = new java.lang.Object[] { '4', strComparator28, strComparator31, 0.0d };
        generator23.setArrays(objArray38);
        java.lang.ClassLoader classLoader40 = null;
        generator23.setClassLoader(classLoader40);
        org.mockito.cglib.util.ParallelSorter.Generator generator42 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader43 = null;
        generator42.setClassLoader(classLoader43);
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.util.ParallelSorter.Generator generator49 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator50 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator50.setUseCache(true);
        boolean boolean53 = generator50.getAttemptLoad();
        boolean boolean54 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator50.getStrategy();
        generator49.setStrategy(generatorStrategy55);
        generator23.setStrategy(generatorStrategy55);
        generator15.setStrategy(generatorStrategy55);
        generator9.setStrategy(generatorStrategy55);
        generator0.setStrategy(generatorStrategy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strComparator27);
        org.junit.Assert.assertNotNull(strComparator28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(strComparator33);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy62);
    }

    @Test
    public void test6994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6994");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator8 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator8.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator11 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator12.setUseCache(true);
        boolean boolean15 = generator12.getAttemptLoad();
        boolean boolean16 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator12.getStrategy();
        generator11.setStrategy(generatorStrategy17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator19.setUseCache(true);
        boolean boolean22 = generator19.getAttemptLoad();
        boolean boolean23 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator19.getStrategy();
        generator11.setStrategy(generatorStrategy24);
        generator8.setStrategy(generatorStrategy24);
        org.mockito.cglib.util.ParallelSorter.Generator generator27 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = generator27.getClassLoader();
        generator8.setClassLoader(classLoader29);
        generator0.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        boolean boolean34 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter35 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test6995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6995");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator6 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator6.setUseCache(true);
        boolean boolean9 = generator6.getAttemptLoad();
        boolean boolean10 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator16 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator16.setUseCache(true);
        boolean boolean19 = generator16.getAttemptLoad();
        boolean boolean20 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator16.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator22 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator22.setUseCache(true);
        boolean boolean25 = generator22.getAttemptLoad();
        boolean boolean26 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator22.getStrategy();
        generator16.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader29);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        boolean boolean36 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator39 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        boolean boolean42 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator39.getStrategy();
        java.lang.ClassLoader classLoader44 = generator39.getClassLoader();
        generator39.setUseCache(false);
        boolean boolean47 = generator39.getUseCache();
        generator39.setUseCache(false);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        generator53.setUseCache(true);
        boolean boolean62 = strComparator50.equals((java.lang.Object) generator53);
        generator53.setAttemptLoad(false);
        boolean boolean65 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator53.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy66);
        java.lang.ClassLoader classLoader68 = generator39.getClassLoader();
        generator0.setClassLoader(classLoader68);
        boolean boolean70 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test6996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6996");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.util.Comparator<java.lang.String> strComparator4 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator5 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator6 = strComparator4.thenComparing(strComparator5);
        java.util.Comparator<java.lang.String> strComparator7 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator8 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator9 = strComparator7.thenComparing(strComparator8);
        java.util.Comparator<java.lang.String> strComparator10 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator11 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator12 = strComparator10.thenComparing(strComparator11);
        boolean boolean13 = strComparator8.equals((java.lang.Object) strComparator12);
        java.lang.Object[] objArray15 = new java.lang.Object[] { '4', strComparator5, strComparator8, 0.0d };
        generator0.setArrays(objArray15);
        java.lang.ClassLoader classLoader17 = null;
        generator0.setClassLoader(classLoader17);
        org.mockito.cglib.util.ParallelSorter.Generator generator19 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader20 = null;
        generator19.setClassLoader(classLoader20);
        java.lang.ClassLoader classLoader22 = null;
        generator19.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getUseCache();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator30 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator30.getStrategy();
        java.lang.ClassLoader classLoader32 = generator30.getClassLoader();
        generator30.setUseCache(false);
        boolean boolean35 = generator30.getUseCache();
        boolean boolean36 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy37);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator41 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader42 = null;
        generator41.setClassLoader(classLoader42);
        java.lang.ClassLoader classLoader44 = null;
        generator41.setClassLoader(classLoader44);
        generator41.setAttemptLoad(true);
        boolean boolean48 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator41.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.util.ParallelSorter.Generator generator51 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        boolean boolean53 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator55 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = generator55.getClassLoader();
        boolean boolean58 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator55.getClassLoader();
        generator51.setClassLoader(classLoader59);
        generator0.setClassLoader(classLoader59);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(strComparator6);
        org.junit.Assert.assertNotNull(strComparator7);
        org.junit.Assert.assertNotNull(strComparator8);
        org.junit.Assert.assertNotNull(strComparator9);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertNotNull(strComparator11);
        org.junit.Assert.assertNotNull(strComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test6997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6997");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator4 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator5 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader8 = null;
        generator5.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.util.ParallelSorter.Generator generator12 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader15 = null;
        generator12.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy17);
        generator4.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        generator0.setAttemptLoad(false);
        boolean boolean25 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator28.getStrategy();
        java.lang.ClassLoader classLoader30 = generator28.getClassLoader();
        generator28.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator34 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator35 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator35.setUseCache(true);
        boolean boolean38 = generator35.getAttemptLoad();
        boolean boolean39 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator35.getStrategy();
        generator34.setStrategy(generatorStrategy40);
        generator28.setStrategy(generatorStrategy40);
        generator28.setAttemptLoad(true);
        boolean boolean45 = generator28.getAttemptLoad();
        boolean boolean46 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator28.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator48 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = generator48.getClassLoader();
        generator48.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator53 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator53.setUseCache(true);
        boolean boolean56 = generator53.getAttemptLoad();
        boolean boolean57 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator53.getStrategy();
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator60 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        java.lang.ClassLoader classLoader63 = null;
        generator60.setClassLoader(classLoader63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator60.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy65);
        boolean boolean67 = generator59.getUseCache();
        org.mockito.cglib.util.ParallelSorter.Generator generator68 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        java.util.Comparator<java.lang.String> strComparator72 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator73 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator74 = strComparator72.thenComparing(strComparator73);
        java.util.Comparator<java.lang.String> strComparator75 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator76 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator77 = strComparator75.thenComparing(strComparator76);
        java.util.Comparator<java.lang.String> strComparator78 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator79 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator80 = strComparator78.thenComparing(strComparator79);
        boolean boolean81 = strComparator76.equals((java.lang.Object) strComparator80);
        java.lang.Object[] objArray83 = new java.lang.Object[] { '4', strComparator73, strComparator76, 0.0d };
        generator68.setArrays(objArray83);
        generator59.setArrays(objArray83);
        generator53.setArrays(objArray83);
        generator48.setArrays(objArray83);
        generator28.setArrays(objArray83);
        generator0.setArrays(objArray83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass91 = generatorStrategy90.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strComparator72);
        org.junit.Assert.assertNotNull(strComparator73);
        org.junit.Assert.assertNotNull(strComparator74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(strComparator76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test6998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6998");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        boolean boolean9 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test6999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6999");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.util.ParallelSorter.Generator generator7 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator7.getStrategy();
        java.lang.ClassLoader classLoader9 = generator7.getClassLoader();
        generator7.setUseCache(false);
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        org.mockito.cglib.util.ParallelSorter.Generator generator14 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator14.setUseCache(true);
        boolean boolean17 = generator14.getAttemptLoad();
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        boolean boolean25 = generator14.getUseCache();
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        boolean boolean27 = generator14.getAttemptLoad();
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        org.mockito.cglib.util.ParallelSorter.Generator generator31 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.util.Comparator<java.lang.String> strComparator35 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator36 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator37 = strComparator35.thenComparing(strComparator36);
        java.util.Comparator<java.lang.String> strComparator38 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator39 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator40 = strComparator38.thenComparing(strComparator39);
        java.util.Comparator<java.lang.String> strComparator41 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator42 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator43 = strComparator41.thenComparing(strComparator42);
        boolean boolean44 = strComparator39.equals((java.lang.Object) strComparator43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { '4', strComparator36, strComparator39, 0.0d };
        generator31.setArrays(objArray46);
        generator28.setArrays(objArray46);
        generator14.setArrays(objArray46);
        generator7.setArrays(objArray46);
        generator0.setArrays(objArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.util.ParallelSorter parallelSorter52 = org.mockito.cglib.util.ParallelSorter.create(objArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.Character is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(strComparator39);
        org.junit.Assert.assertNotNull(strComparator40);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertNotNull(strComparator42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[4, INSTANCE, INSTANCE, 0.0]");
    }

    @Test
    public void test7000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test7000");
        org.mockito.cglib.util.ParallelSorter.Generator generator0 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator0.setUseCache(true);
        boolean boolean3 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader8 = generator0.getClassLoader();
        org.mockito.cglib.util.ParallelSorter.Generator generator9 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator10 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.util.ParallelSorter.Generator generator17 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator17.setUseCache(true);
        org.mockito.cglib.util.ParallelSorter.Generator generator20 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator21 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator21.setUseCache(true);
        boolean boolean24 = generator21.getAttemptLoad();
        boolean boolean25 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator21.getStrategy();
        generator20.setStrategy(generatorStrategy26);
        org.mockito.cglib.util.ParallelSorter.Generator generator28 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator28.setUseCache(true);
        boolean boolean31 = generator28.getAttemptLoad();
        boolean boolean32 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator28.getStrategy();
        generator20.setStrategy(generatorStrategy33);
        generator17.setStrategy(generatorStrategy33);
        generator9.setStrategy(generatorStrategy33);
        org.mockito.cglib.util.ParallelSorter.Generator generator37 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        org.mockito.cglib.util.ParallelSorter.Generator generator40 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        java.util.Comparator<java.lang.String> strComparator44 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator45 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator46 = strComparator44.thenComparing(strComparator45);
        java.util.Comparator<java.lang.String> strComparator47 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator48 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator49 = strComparator47.thenComparing(strComparator48);
        java.util.Comparator<java.lang.String> strComparator50 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator51 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator52 = strComparator50.thenComparing(strComparator51);
        boolean boolean53 = strComparator48.equals((java.lang.Object) strComparator52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { '4', strComparator45, strComparator48, 0.0d };
        generator40.setArrays(objArray55);
        generator37.setArrays(objArray55);
        generator9.setArrays(objArray55);
        org.mockito.cglib.util.ParallelSorter.Generator generator59 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        java.util.Comparator<java.lang.String> strComparator63 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator64 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator65 = strComparator63.thenComparing(strComparator64);
        java.util.Comparator<java.lang.String> strComparator66 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator67 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator68 = strComparator66.thenComparing(strComparator67);
        java.util.Comparator<java.lang.String> strComparator69 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator70 = java.util.Comparator.naturalOrder();
        java.util.Comparator<java.lang.String> strComparator71 = strComparator69.thenComparing(strComparator70);
        boolean boolean72 = strComparator67.equals((java.lang.Object) strComparator71);
        java.lang.Object[] objArray74 = new java.lang.Object[] { '4', strComparator64, strComparator67, 0.0d };
        generator59.setArrays(objArray74);
        java.lang.ClassLoader classLoader76 = null;
        generator59.setClassLoader(classLoader76);
        org.mockito.cglib.util.ParallelSorter.Generator generator78 = new org.mockito.cglib.util.ParallelSorter.Generator();
        java.lang.ClassLoader classLoader79 = null;
        generator78.setClassLoader(classLoader79);
        java.lang.ClassLoader classLoader81 = null;
        generator78.setClassLoader(classLoader81);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator78.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy83);
        org.mockito.cglib.util.ParallelSorter.Generator generator85 = new org.mockito.cglib.util.ParallelSorter.Generator();
        org.mockito.cglib.util.ParallelSorter.Generator generator86 = new org.mockito.cglib.util.ParallelSorter.Generator();
        generator86.setUseCache(true);
        boolean boolean89 = generator86.getAttemptLoad();
        boolean boolean90 = generator86.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator86.getStrategy();
        generator85.setStrategy(generatorStrategy91);
        generator59.setStrategy(generatorStrategy91);
        generator9.setStrategy(generatorStrategy91);
        generator0.setStrategy(generatorStrategy91);
        generator0.setUseCache(false);
        boolean boolean98 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(strComparator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(strComparator63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(strComparator70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[4, INSTANCE, INSTANCE, 0.0]");
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }
}

